<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main" xml:id="_aJXKZjK" coord="1,80.19,104.54,431.06,13.41;1,80.70,121.48,198.02,13.41">Analyzing the Direct and Transitive Impact of Vulnerabilities onto Different Artifact Repositories</title>
			</titleStmt>
			<publicationStmt>
				<publisher>Association for Computing Machinery (ACM)</publisher>
				<availability status="unknown"><p>Copyright Association for Computing Machinery (ACM)</p>
				</availability>
				<date type="published" when="2022-02-07">2022-02-07</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Johannes</forename><surname>Düsing</surname></persName>
							<idno type="ORCID">0000-0002-9367-2206</idno>
						</author>
						<author role="corresp">
							<persName coords="1,80.70,161.49,78.04,12.34"><forename type="first">Ben</forename><surname>Hermann</surname></persName>
							<email>ben.hermann@cs.tu-dortmund.de.</email>
							<idno type="ORCID">0000-0001-9848-2017</idno>
						</author>
						<author>
							<affiliation key="aff0">
								<note type="raw_affiliation">Technical University Dortmund, Germany</note>
								<orgName type="institution">Technical University Dortmund</orgName>
								<address>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<note type="raw_affiliation">Technical University Dortmund, Germany</note>
								<orgName type="institution">Technical University Dortmund</orgName>
								<address>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<note type="raw_affiliation">Technical University Dortmund, Otto-Hahn-StraÃğe 14, Dortmund, Germany,</note>
								<orgName type="institution">Technical University Dortmund</orgName>
								<address>
									<addrLine>Otto-Hahn-StraÃğe 14</addrLine>
									<settlement>Dortmund</settlement>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff3">
								<note type="raw_affiliation">; Ben Hermann , , - - 14 , , ,</note>
								<address>
									<postCode>14</postCode>
									<settlement>Ben Hermann</settlement>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main" xml:id="_yjQxzXk" coord="1,80.19,104.54,431.06,13.41;1,80.70,121.48,198.02,13.41">Analyzing the Direct and Transitive Impact of Vulnerabilities onto Different Artifact Repositories</title>
					</analytic>
					<monogr>
						<title level="j" type="main" xml:id="_JhvRaTG">Digital Threats: Research and Practice</title>
						<title level="j" type="abbrev">Digital Threats</title>
						<idno type="ISSN">2692-1626</idno>
						<idno type="eISSN">2576-5337</idno>
						<imprint>
							<publisher>Association for Computing Machinery (ACM)</publisher>
							<biblScope unit="volume">3</biblScope>
							<biblScope unit="issue">4</biblScope>
							<biblScope unit="page" from="1" to="25"/>
							<date type="published" when="2022-02-07" />
						</imprint>
					</monogr>
					<idno type="MD5">FC198EA6661F93900BA314376BAA0ABA</idno>
					<idno type="DOI">10.1145/3472811</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.8.0" ident="GROBID" when="2024-03-13T15:33+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term xml:id="_45HcCar">Vulnerability</term>
					<term xml:id="_QJE4v8E">Impact Analysis</term>
					<term xml:id="_RxWSTFr">Repository Mining</term>
					<term xml:id="_QBxv89B">Patch Detection</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0" xml:id="_vANCywR"><p xml:id="_J4hE4ta"><s xml:id="_87qWuvv" coords="1,80.70,181.94,450.61,9.34;1,80.70,192.90,161.53,9.34">In modern-day software development, a vast amount of public software libraries enable the reuse of existing implementations for reoccurring tasks and common problems.</s><s xml:id="_3htF68q" coords="1,244.45,192.90,286.85,9.34;1,80.70,203.86,214.56,9.34">While this practice does yield signiicant beneits in productivity, it also puts an increasing amount of responsibility on library maintainers.</s><s xml:id="_e65R4F6" coords="1,297.50,203.86,234.04,9.34;1,80.70,214.82,213.64,9.34">If a security law is contained in a library release, it may directly afect thousands of applications that are depending on it.</s><s xml:id="_2GbQKUm" coords="1,296.80,214.82,234.51,9.34;1,80.70,225.77,450.61,9.34;1,80.70,236.73,42.88,9.34">Given the fact that libraries are often interconnected, meaning they are depending on other libraries for certain sub-tasks, the impact of a single vulnerability may be large, and is hard to quantify.</s><s xml:id="_5H7qr2D" coords="1,125.97,236.73,405.34,9.34;1,80.70,247.69,291.95,9.34">Recent studies have shown that developers in fact struggle with upgrading vulnerable dependencies, despite ever-increasing support by automated tools, which are often publicly available.</s><s xml:id="_6BSm4xp" coords="1,374.88,247.69,156.42,9.34;1,80.70,258.65,440.74,9.34">With our work, we aim to improve on this situation by providing an in-depth analysis on how developers handle vulnerability patches and dependency upgrades.</s><s xml:id="_CJBak99" coords="1,523.66,258.65,7.64,9.34;1,80.70,269.61,450.60,9.34;1,80.70,280.57,195.77,9.34">In order to do so, we contribute a miner for artifact dependency graphs supporting diferent programming platforms, which annotates the graph with vulnerability information.</s><s xml:id="_SctFHKJ" coords="1,279.29,280.57,252.02,9.34;1,80.70,291.53,451.99,9.34">We execute our application and generate a data set for the artifact repositories Maven Central, NuGet.org, and the NPM Registry, with the resulting graph being stored in a Neo4j graph database.</s><s xml:id="_nEarekB" coords="1,80.38,302.49,451.09,9.34;1,80.70,313.45,112.38,9.34">Afterwards, we conduct an extensive analysis of our data, which is aimed at understanding the impact of vulnerabilities for the three diferent repositories.</s><s xml:id="_ucG94YV" coords="1,195.32,313.45,336.21,9.34;1,80.70,324.41,216.43,9.34">Finally, we summarize the resulting risks and derive possible mitigation strategies for library maintainers and software developers based on our indings.</s><s xml:id="_9ddzMDM" coords="1,299.37,324.41,232.10,9.34;1,80.70,335.36,309.55,9.34">We found that NuGet.org, the smallest artifact repository in our sample, is subject to fewer security concerns than Maven Central or the NPM Registry.</s><s xml:id="_4KSrkbY" coords="1,392.31,335.36,139.00,9.34;1,80.70,346.32,450.84,9.34;1,80.70,357.28,186.61,9.34">However, for all repositories, we found that vulnerabilities may inluence libraries via long transitive dependency chains and that a vulnerability in a single library may afect thousands of other libraries transitively.</s></p><p xml:id="_pvMKaPN"><s xml:id="_RAwBhx2" coords="1,80.70,374.58,269.88,9.34">CCS Concepts: • Security and privacy → Vulnerability management.</s></p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<facsimile>
		<surface n="1" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="2" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="3" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="4" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="5" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="6" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="7" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="8" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="9" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="10" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="11" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="12" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="13" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="14" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="15" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="16" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="17" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="18" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="19" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="20" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="21" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="22" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="23" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="24" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="25" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="26" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="27" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
	</facsimile>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1" xml:id="_dcyQvV9">INTRODUCTION</head><p xml:id="_mChr6U7"><s xml:id="_ZX4UskP" coords="1,80.70,431.66,345.83,10.38">Software reuse has proven to be an essential part of software development <ref type="bibr" coords="1,397.88,431.66,10.49,10.38" target="#b4">[5,</ref><ref type="bibr" coords="1,411.40,431.66,11.34,10.38" target="#b17">18]</ref>.</s><s xml:id="_Qet2Erv" coords="1,429.56,431.66,101.74,10.38;1,80.70,443.62,450.61,10.38;1,80.70,455.57,136.31,10.38">A vast amount of public repositories exist, where developers can choose open-source software libraries for a variety of diferent tasks and programming environments.</s><s xml:id="_JarpVVj" coords="1,219.50,455.43,312.07,10.52;1,80.70,467.53,450.61,10.38;1,80.70,479.48,214.75,10.38">Various build systems like NPM <ref type="bibr" coords="1,350.85,455.57,14.95,10.38" target="#b18">[19]</ref>, Nuget <ref type="bibr" coords="1,399.07,455.57,16.47,10.38" target="#b25">[25]</ref> or Maven <ref type="bibr" coords="1,458.94,455.57,16.46,10.38" target="#b13">[14]</ref> conveniently integrate the management of external components into development worklows, thus allowing developers to browse and add components by the click of a button.</s></p><p xml:id="_p4kvrDs"><s xml:id="_KUcN5Bp" coords="1,90.66,491.44,440.64,10.38;1,80.70,503.39,450.61,10.38;1,80.70,515.35,144.04,10.38">As a result of the continuous improvement in tooling support, the amount of open-source library code has been shown to be more than 45% of the total project code for open-source Java projects, with only 10% of projects not reusing code at all <ref type="bibr" coords="1,206.34,515.35,14.71,10.38" target="#b17">[18]</ref>.</s><s xml:id="_udhSsGb" coords="1,227.22,515.35,304.08,10.38;1,80.70,527.30,450.60,10.38;1,80.70,539.26,168.60,10.38">Similarly, the 2021 Synposis Open Source Security Report inds that of 1,546 commercial codebases analyzed in 2020, 98% contained open-source library code, with the average application being comprised of 75% open source <ref type="bibr" coords="1,230.74,539.26,14.84,10.38" target="#b41">[42]</ref>.</s></p><p xml:id="_V2QkFK9"><s xml:id="_WueR9fX" coords="2,90.66,106.56,440.64,10.38;2,80.70,118.52,436.42,10.38">It has been established by W.C. Lim and others, that software reuse has several positive efects on a software product and its development process, including increased productivity and shorter time-to-market <ref type="bibr" coords="2,498.38,118.52,14.99,10.38" target="#b22">[22]</ref>.</s><s xml:id="_tVwE7S6" coords="2,520.35,118.52,11.21,10.38;2,80.70,130.33,450.80,10.52;2,80.70,142.43,126.12,10.38">By May 2021, almost 7 million artifacts are available on Maven Central, which is only one of many repositories for open-source Java libraries <ref type="bibr" coords="2,188.30,142.43,14.81,10.38" target="#b28">[28]</ref>.</s><s xml:id="_ZgRt9fP" coords="2,209.31,142.43,321.99,10.38;2,80.70,154.24,320.71,10.52">A similar trend in the availability of reusable software artifacts can be observed in other repositories as well, with examples like the NPM Registry and NuGet.org</s><s xml:id="_AZKuzCa" coords="2,404.24,154.38,127.07,10.38;2,80.70,166.34,54.56,10.38">hosting over 16 million artifacts combined (cf.</s><s xml:id="_tqrf2rE" coords="2,137.75,166.34,49.00,10.38">Section 4.3).</s></p><p xml:id="_cExs9UB"><s xml:id="_DBN7RhN" coords="2,90.66,178.29,440.64,10.38;2,80.70,190.25,59.69,10.38">However, using external open-source libraries from repositories like NuGet.org also introduces some distinct disadvantages.</s><s xml:id="_vkRTnZe" coords="2,142.89,190.25,328.24,10.38">Most prominently, those libraries impose a new level of complexity on a project.</s><s xml:id="_jD3H45t" coords="2,473.61,190.25,57.69,10.38;2,80.70,202.06,450.61,10.52;2,80.40,214.02,410.52,10.52">Many of them have dependencies to other libraries of the same repository, thus creating a potentially large dependency graph (often called dependency tree), containing both the direct and transitive dependencies of a project.</s><s xml:id="_Nzjyecr" coords="2,494.11,214.16,37.19,10.38;2,80.70,226.11,450.61,10.38;2,80.70,238.07,216.17,10.38"><ref type="bibr" coords="2,494.11,214.16,37.19,10.38;2,80.70,226.11,9.56,10.38">Decan et al.</ref> have shown in 2019 that these graphs can exhibit depths larger than six, with roughly 25% of all artifacts having a dependency graph of depth at least three.</s><s xml:id="_RgHGSpv" coords="2,300.18,238.07,231.12,10.38;2,80.70,250.02,328.40,10.38">The authors also observe that the ratio of transitive to direct dependencies roughly equals 15 for both the NPM Registry and NuGet.org</s><s xml:id="_n24XYY2" coords="2,411.61,250.02,18.55,10.38"><ref type="bibr" coords="2,411.61,250.02,14.84,10.38" target="#b10">[11]</ref>.</s><s xml:id="_TYuvJxp" coords="2,432.66,250.02,98.65,10.38;2,80.70,261.98,450.61,10.38;2,80.70,273.93,232.75,10.38">Overseeing the diferent responsibilities, release dates and available versions of all libraries in that graph is a complex task that is likely to add additional overhead to the development process <ref type="bibr" coords="2,294.89,273.93,14.84,10.38" target="#b31">[32]</ref>.</s></p><p xml:id="_cxt4vyv"><s xml:id="_atyBkGz" coords="2,90.66,285.89,370.09,10.38">This fact becomes especially relevant when considering vulnerabilities in software libraries.</s><s xml:id="_wER4s6x" coords="2,463.25,285.89,69.74,10.38;2,80.70,297.84,452.14,10.38">A single vulnerability in a certain library may break the security of all libraries and projects using it, be it directly or transitively.</s><s xml:id="_XqZDcyw" coords="2,80.22,309.66,452.18,10.52;2,80.70,321.75,450.61,10.38;2,80.70,333.71,114.69,10.38">While vulnerabilities being present in a dependency does not necessarily mean vulnerable code is being used <ref type="bibr" coords="2,518.60,309.80,10.35,10.38" target="#b5">[6]</ref>, Lawrence and Frohof have shown that in Java vulnerabilities may be exploited simply because the corresponding code is on the classpath <ref type="bibr" coords="2,177.02,333.71,14.69,10.38" target="#b20">[21]</ref>.</s><s xml:id="_EZnaave" coords="2,197.74,333.57,333.82,10.52;2,80.70,345.66,450.61,10.38;2,80.45,357.62,204.08,10.38">By May 2021, one single release of a popular library like jackson-databind is directly used by more than 18,000 other libraries on Maven Central alone <ref type="bibr" coords="2,355.50,345.66,14.99,10.38" target="#b29">[29]</ref>, which underlines the impact a single vulnerability may have onto the whole repository.</s></p><p xml:id="_vBgGxyX"><s xml:id="_nqzXbzh" coords="2,90.66,369.57,441.74,10.38;2,80.70,381.53,268.31,10.38">In order to minimize the risk of developers not knowing about vulnerabilities in their library dependencies, those vulnerabilities are often disclosed using the CVE standard.</s><s xml:id="_e8zTPy4" coords="2,351.71,381.53,179.59,10.38;2,80.70,393.48,188.34,10.38">The list of all known CVE vulnerabilities is publicly available <ref type="bibr" coords="2,155.64,393.48,11.86,10.38" target="#b8">[9]</ref> and frequently updated.</s><s xml:id="_gNt2Awd" coords="2,271.52,393.48,259.78,10.38;2,80.70,405.44,283.48,10.38">The list has been started in 1999 and has, as of May 2021, more than 153,000 entries, averaging at more than 19 vulnerabilities per day.</s><s xml:id="_EYKsWdk" coords="2,366.66,405.44,164.65,10.38;2,80.70,417.40,450.61,10.38;2,80.70,429.35,403.23,10.38">While those entries are not solely related to software libraries, but also applications, these numbers still indicate that ixing vulnerabilities in software libraries is not a rare case, but something that must be anticipated during the development process.</s><s xml:id="_grGktNE" coords="2,80.70,441.30,363.78,10.38">In general, the process of safely dealing with a newly published vulnerability is threefold:</s></p><p xml:id="_t7nQUur"><s xml:id="_4kwm3Jt" coords="2,90.55,458.49,441.01,10.38;2,105.11,470.45,38.15,10.38">(1) The maintainers of the afected library publish a new version that does not contain the vulnerability anymore.</s><s xml:id="_sdWN8qM" coords="2,145.74,470.31,217.03,10.52">We call this new version a patch for the vulnerability.</s><s xml:id="_ufWxcvY" coords="2,90.55,482.26,440.75,10.52;2,105.11,494.36,336.59,10.38"><ref type="bibr" coords="2,90.55,482.40,10.57,10.38" target="#b1">(2)</ref> The maintainers of all libraries directly using the afected library need to publish new versions that upgrade their dependencies to use the patch instead of the vulnerable version of the library.</s><s xml:id="_tsnkzxQ" coords="2,444.18,494.36,87.12,10.38;2,105.11,506.31,250.72,10.38">This process needs to be iterated recursively to account for transitive dependencies.</s><s xml:id="_6gPE58E" coords="2,90.55,518.27,440.76,10.38;2,104.81,530.22,287.53,10.38">(3) Similar to library maintainers, project developers need to upgrade their dependencies for any of the (transitively) afected libraries to not use vulnerable versions anymore.</s></p><p xml:id="_XdMZEJP"><s xml:id="_AuS8t7z" coords="2,90.66,547.41,440.64,10.38;2,80.70,559.36,163.10,10.38">While in theory, this process is adequate to deal with the problem at hand, in reality, there are several issues that negatively inluence its applicability.</s><s xml:id="_p2PMH6S" coords="2,246.00,559.36,285.56,10.38;2,80.70,571.32,93.34,10.38">Most importantly, it requires the developers of all libraries to be actively maintaining their code.</s><s xml:id="_SZYJY6z" coords="2,176.52,571.32,354.77,10.38;2,80.70,583.27,244.91,10.38">Moreover, they have to constantly monitor all published vulnerabilities and patches, and correlate that data with the dependency graph of their library.</s><s xml:id="_dk6bMGH" coords="2,327.76,583.27,147.70,10.38">While loating version references (i.e.</s><s xml:id="_eBv73tg" coords="2,477.62,583.27,53.69,10.38;2,80.33,595.23,450.97,10.38;2,80.45,607.18,376.45,10.38">dependencies with a range of valid version numbers) may in some cases enable maintainers to automatically beneit from vulnerability patches, they still need to verify that the vulnerability does not apply anymore.</s></p><p xml:id="_gnX8FDJ"><s xml:id="_fpW9zQN" coords="2,90.66,619.14,440.64,10.38;2,80.70,631.09,363.38,10.38">As the act of monitoring vulnerability publications for every artifact of a dependency graph is both cumbersome and repetitive, to this day several tools have been developed in an efort to automate this task.</s><s xml:id="_WhAeCyj" coords="2,445.83,631.09,85.47,10.38;2,80.70,642.91,450.60,10.52;3,80.70,106.56,301.77,10.38">A prominent example is Snyk, which can be added to software repositories as a CI check that informs developers of vulnerabilities in the project's dependencies, as well as their severity and possible patches.</s><s xml:id="_VSPxaM7" coords="3,384.96,106.42,146.34,10.52;3,80.70,118.52,367.27,10.38">Going one step further, Dependabot automatically upgrades vulnerable dependencies and creates a corresponding pull request.</s></p><p xml:id="_9UYWHXD"><s xml:id="_y85KsFt" coords="3,90.66,130.47,441.73,10.38;3,80.70,142.43,437.15,10.38">Despite the availability of tools like Snyk and Dependabot addressing the problem of vulnerable dependencies, a 2017 study performed by Kula et al. found that 69% of developers claim to be unaware of being afected.</s><s xml:id="_GSrcFSY" coords="3,520.40,142.43,10.90,10.38;3,80.70,154.38,391.20,10.38">As a result, more than 81% of the systems they analyzed contained vulnerable dependencies <ref type="bibr" coords="3,453.16,154.38,14.99,10.38" target="#b19">[20]</ref>.</s><s xml:id="_nTjKFP7" coords="3,474.65,154.38,56.65,10.38;3,80.70,166.34,450.79,10.38;3,80.70,178.29,28.50,10.38">In addition to that, some library maintainers may never release a patched version, as they decided to stop maintaining their library.</s><s xml:id="_MF3gmVk" coords="3,111.63,178.29,329.29,10.38">This information is not easy to obtain, as there is no standard way of publishing it.</s><s xml:id="_RkPz8TM" coords="3,443.35,178.29,87.96,10.38;3,80.70,190.11,450.61,10.52;3,80.70,202.20,71.24,10.38">Pashchenko et al. <ref type="bibr" coords="3,515.09,178.29,16.21,10.38" target="#b31">[32]</ref> argue that such halted dependencies may be identiied by using a heuristic based on the average interval between diferent releases.</s></p><p xml:id="_KxFqVVY"><s xml:id="_UZmnys5" coords="3,90.66,214.16,440.64,10.38;3,80.70,226.11,405.59,10.38">In their study, Kula et al. conclude that one reason for this is the developer's perception of security patches and dependency upgrades as added responsibility yielding little to no beneits for the user <ref type="bibr" coords="3,467.55,226.11,14.99,10.38" target="#b19">[20]</ref>.</s><s xml:id="_Z4Yr9MS" coords="3,489.63,226.11,41.67,10.38;3,80.70,238.07,450.79,10.38;3,80.70,250.02,167.89,10.38">While the act of upgrading a dependency does not consume much time, it requires careful consideration to account for compatibility, performance, and security.</s><s xml:id="_HnExuJW" coords="3,251.09,250.02,280.22,10.38;3,80.70,261.98,450.61,10.38;3,80.70,273.93,82.05,10.38">Therefore, a good understanding of the respective repository and its patching behavior is key to making informed decisions for dependency upgrades, thus ultimately improving application security.</s></p><p xml:id="_dmAxYbg"><s xml:id="_MdpPXFp" coords="3,90.66,285.89,440.64,10.38;3,80.70,297.84,182.63,10.38">However, the question of how and when developers release patches and upgrade dependencies in diferent artifact repositories has yet to be answered.</s><s xml:id="_HDzDU7m" coords="3,266.21,297.84,265.35,10.38;3,80.70,309.80,188.19,10.38">This is due to a lack of empirical data on the subject, especially regarding the diferences between repositories.</s><s xml:id="_ubWTurc" coords="3,271.37,309.80,259.93,10.38;3,80.70,321.75,389.72,10.38">To this day, there is no vulnerability-enriched dependency graph available for any of the major artifact repositories, although that data is freely accessible online.</s><s xml:id="_TtE53eS" coords="3,472.90,321.75,58.40,10.38;3,80.70,333.71,452.04,10.38">As a result, no formal analysis has yet been conducted on patching behavior in the presence of multi-level dependency graphs.</s></p><p xml:id="_z8kYU2r"><s xml:id="_t9kWVa6" coords="3,90.66,345.66,440.64,10.38;3,80.70,357.62,450.61,10.38;3,80.70,369.57,49.48,10.38">The main goal of our work is to provide detailed insights into the problem of vulnerable software artifacts and their dependencies by conducting an in-depth analysis that investigates the patching behavior across diferent repositories.</s><s xml:id="_bxyMMwD" coords="3,132.66,369.57,331.62,10.38">Based on that, we derive development strategies that increase application security.</s><s xml:id="_dgUFxbp" coords="3,466.77,369.57,64.54,10.38;3,80.70,381.53,44.39,10.38">In summary, we contribute:</s></p><p xml:id="_9R8C7jU"><s xml:id="_r6tRhWn" coords="3,90.55,396.69,440.75,10.38;3,105.11,408.64,135.21,10.38">(1) A distributed application for mining the dependency graphs of diferent software repositories and annotating it with vulnerability information.</s><s xml:id="_G8pSu6x" coords="3,242.81,408.50,288.50,10.52;3,105.11,420.60,18.55,10.38">Our implementation is presented in Section 4 and published on Zenodo <ref type="bibr" coords="3,105.11,420.60,14.84,10.38" target="#b11">[12]</ref>.</s><s xml:id="_N4PyVgG" coords="3,90.55,432.55,440.76,10.38;3,105.11,444.51,32.52,10.38">(2) An analysis on the patching behavior of library developers in NuGet.org, the NPM Registry, and Maven Central.</s><s xml:id="_g9Xg5jh" coords="3,140.11,444.51,292.74,10.38;3,90.55,456.46,440.75,10.38;3,105.11,468.42,39.20,10.38">We highlight our analysis design, methodology, and results in Section 5. (3) A set of resulting threats to application security and possible mitigation strategies, which are discussed in Section 6.</s></p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2" xml:id="_ZqjZZcW">BACKGROUND</head><p xml:id="_8ZaUBN8"><s xml:id="_A6EU8k6" coords="3,80.70,506.34,452.14,10.38">Build Systems like Maven or NPM resolve dependency speciications in so-called software artifact repositories.</s></p><p xml:id="_tgYRcex"><s xml:id="_8QqaRfF" coords="3,80.70,518.15,450.61,10.52;3,80.70,530.11,452.14,10.52">Popular examples for such repositories are Maven Central with almost 7 million artifacts by May 2021 <ref type="bibr" coords="3,497.27,518.29,14.85,10.38" target="#b28">[28]</ref>, the NPM Registry (around 13.5 million artifacts, cf. Figure <ref type="figure" coords="3,305.26,530.25,3.88,10.38">4</ref>) and NuGet.org with around 2.8 million artifacts <ref type="bibr" coords="3,514.10,530.25,14.99,10.38" target="#b26">[26]</ref>.</s><s xml:id="_GmyrMFP" coords="3,80.40,542.20,450.90,10.38;3,80.70,554.16,133.76,10.38">These repositories generally expose a web-based interface granting full read-access to any client that wants to consume the contained artifacts.</s><s xml:id="_zYtDP4T" coords="3,216.96,554.16,185.36,10.38;3,402.32,552.70,3.38,7.58;3,406.20,554.16,125.11,10.38;3,80.70,566.11,42.58,10.38;3,123.28,564.66,3.38,7.58;3,129.65,566.11,90.14,10.38;3,219.79,564.66,3.38,7.58;3,226.16,566.11,131.48,10.38">For Maven Central this interface is ile-based 1 , while for other examples like NuGet.org 2 and the NPM Registry 3 it is a JSON-based artifact index.</s><s xml:id="_9wfcXxJ" coords="3,90.66,578.07,440.64,10.38;3,80.70,589.88,315.21,10.52">When developers reference an artifact in their project, that artifact may itself be depending on other artifacts of the same repository, thus introducing transitive dependencies to the project.</s><s xml:id="_KjduQp8" coords="3,398.38,590.02,132.92,10.38;3,80.70,601.84,377.15,10.52">Consequently, each project has a dedicated dependency graph, which may span multiple levels and is resolved by the build system.</s><s xml:id="_BWpTr2c" coords="3,459.71,601.98,71.59,10.38;4,80.70,106.56,452.14,10.38">Developers do not necessarily know about the transitive dependencies in their project, as they are typically resolved transparently.</s><s xml:id="_FT63WNb" coords="4,80.70,118.52,433.67,10.38">However, commands like mvn dependency:tree<ref type="foot" coords="4,280.21,117.06,3.38,7.58" target="#foot_3">4</ref> may be used to explicitly list the full dependency graph.</s></p><p xml:id="_HKb35H6"><s xml:id="_7uqCVH5" coords="4,90.66,130.47,403.14,10.38">There are two ways of referencing software artifacts in build systems for the context of this work.</s><s xml:id="_vy38dmH" coords="4,496.29,130.47,35.01,10.38;4,80.70,142.43,450.61,10.38;4,80.70,154.38,72.33,10.38">The irst one, which is used predominantly by Maven, is to specify the unique library identiier and the version number of the target artifact.</s><s xml:id="_mSbdCFm" coords="4,155.52,154.24,319.28,10.52">We call this a ixed artifact reference, as it references exactly one target artifact.</s><s xml:id="_46TDN43" coords="4,477.29,154.38,54.02,10.38;4,80.70,166.34,435.77,10.38">While Maven also supports the use of version ranges <ref type="bibr" coords="4,240.70,166.34,14.81,10.38" target="#b30">[30]</ref>, we ind that these are rarely used in any of the artifacts online.</s><s xml:id="_cbdEXnd" coords="4,518.96,166.34,12.34,10.38;4,80.70,178.15,450.86,10.52;4,80.70,190.25,196.76,10.38">On the other hand, loating artifact references, which are used in NPM and NuGet, consist of the unique library identiier and a range of valid version numbers.</s><s xml:id="_KpHQ9Kd" coords="4,279.97,190.25,251.33,10.38;4,80.45,202.20,350.29,10.38">For this type of reference, the build system selects one of the valid target artifacts, which usually is the most recent release of the respective library.</s></p><p xml:id="_5HXTQ5n"><s xml:id="_D5TZVQN" coords="4,90.66,214.16,441.74,10.38;4,80.70,226.11,280.90,10.38">Vulnerabilities in software artifacts can be discovered both unintentionally, e.g. by developers using the artifact, or intentionally, e.g. by users reviewing the source code of an artifact.</s><s xml:id="_x4CUvvj" coords="4,364.10,226.11,167.21,10.38;4,80.70,238.07,191.17,10.38">Frei et al. illustrate the diferent options a discoverer has upon inding a vulnerability <ref type="bibr" coords="4,253.50,238.07,14.69,10.38" target="#b14">[15]</ref>.</s><s xml:id="_Kwq9g6Z" coords="4,274.12,238.07,257.18,10.38;4,80.70,250.02,189.83,10.38">These include selling it on the black or white market, creating an exploit or a patch, or disclosing it to the public.</s><s xml:id="_RKDARpW" coords="4,273.02,250.02,259.81,10.38">For the context of this work, the last option is of special interest.</s></p><p xml:id="_jvV2z4A"><s xml:id="_unXmjH2" coords="4,90.66,261.98,440.64,10.38;4,80.45,273.79,452.39,10.52">Launched by the MITRE Corporation in 1999, the CVE list <ref type="bibr" coords="4,327.66,261.98,11.65,10.38" target="#b8">[9]</ref> is an online database of such publicly disclosed vulnerabilities, and has since emerged as a de facto standard for identifying and referencing vulnerabilities <ref type="bibr" coords="4,514.32,273.93,14.81,10.38" target="#b14">[15]</ref>.</s><s xml:id="_XWfqKkk" coords="4,80.70,285.89,349.47,10.38">For each vulnerability, it holds a unique identiier, a description, and a public reference.</s><s xml:id="_yDztgPj" coords="4,432.65,285.89,98.65,10.38;4,80.70,297.84,450.61,10.38;4,80.70,309.80,38.40,10.38">The NVD was created in 2005 and builds upon the CVE list by providing additional information on ixes, severity, and impact of each CVE entry <ref type="bibr" coords="4,105.18,309.80,10.44,10.38" target="#b7">[8]</ref>.</s></p><p xml:id="_Bp78RMp"><s xml:id="_dEJNtK8" coords="4,90.66,321.75,394.46,10.38">Several tools incorporate those data sources in order to inform developers about vulnerabilities.</s><s xml:id="_NnCGe8Y" coords="4,487.60,321.75,43.70,10.38;4,80.70,333.57,345.86,10.52">Prominent examples include the Maven plugin Dependency-Check Maven <ref type="bibr" coords="4,336.17,333.71,16.42,10.38" target="#b37">[38]</ref> and Dependabot<ref type="foot" coords="4,420.46,332.25,3.38,7.58" target="#foot_4">5</ref> .</s><s xml:id="_kAEKSEV" coords="4,429.05,333.71,102.51,10.38;4,80.70,345.52,450.87,10.52;4,80.70,357.62,450.61,10.38;4,80.70,369.57,113.09,10.38">The services provided by Snyk<ref type="foot" coords="4,100.96,344.21,3.38,7.58" target="#foot_5">6</ref> rely on a proprietary vulnerability database, which incorporates not only vulnerabilities published by the NVD but also indings from academic collaborations and proprietary research, as well as vulnerabilities reported by the community.</s><s xml:id="_njTasFa" coords="4,196.28,369.57,335.02,10.38;4,80.70,381.53,378.26,10.38">According to Snyk, each inding is manually tested for accuracy and enriched with additional metadata, including an explicit link to the set of afected software artifacts <ref type="bibr" coords="4,440.22,381.53,14.99,10.38" target="#b24">[24]</ref>.</s><s xml:id="_5CUAPgn" coords="4,461.88,381.53,69.61,10.38;4,80.45,393.48,450.85,10.38;4,80.70,405.44,59.32,10.38">Furthermore, for vulnerabilities not imported from public sources like the NVD, Snyk distinguishes the date of disclosure and date of publication.</s><s xml:id="_tCtFen9" coords="4,142.51,405.44,388.79,10.38;4,80.70,417.26,268.44,10.52">Upon disclosure, Snyk assess the severity and risks of vulnerabilities and, following an explicit Disclosure Policy, contacts the maintainers of the afected modules.</s><s xml:id="_ZnGwZEk" coords="4,351.61,417.40,179.69,10.38;4,80.70,429.35,377.20,10.38">After that, Snyk cooperates with the module maintainers and publishes the vulnerability information following a public disclosure timeline.</s><s xml:id="_b87MBRa" coords="4,460.34,429.35,70.97,10.38;4,80.70,441.17,431.72,10.52">Finally, as Snyk is oicially registered as CVE Central Naming Authority, it assigns a CVE identiier for the vulnerability <ref type="bibr" coords="4,493.87,441.31,14.84,10.38" target="#b23">[23]</ref>.</s></p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3" xml:id="_9Em5R8v">APPROACH</head><p xml:id="_7h9PkZC"><s xml:id="_hBGRB3e" coords="4,80.70,481.39,206.72,10.38">Our approach incorporates three diferent phases.</s><s xml:id="_A2XT8Ff" coords="4,290.00,481.39,241.30,10.38;4,80.70,493.34,260.94,10.38">First, we aggregate data on software artifact dependencies for diferent repositories and annotate vulnerability information.</s><s xml:id="_h4xvh2z" coords="4,344.13,493.34,187.37,10.38;4,80.70,505.30,210.06,10.38">We then deine research questions and answer them using the data produced in the previous phase.</s><s xml:id="_y5K4tWk" coords="4,293.25,505.30,238.05,10.38;4,80.70,517.26,450.61,10.38;4,80.70,529.21,141.38,10.38">With our research questions, we investigate how and when library maintainers upgrade a directly or transitively vulnerable release, and how many artifacts are afected by vulnerabilities in the irst place.</s><s xml:id="_sMPfk6s" coords="4,224.57,529.21,306.73,10.38;4,80.70,541.17,85.82,10.38">Finally, we discuss the results, identify potential security threats and derive mitigation strategies.</s></p><p xml:id="_5wFBgup"><s xml:id="_ZXphS9P" coords="4,90.66,552.98,346.27,10.52">For data aggregation, we design and implement a distributed application called Miner.</s><s xml:id="_rtf28Yd" coords="4,439.43,553.12,91.87,10.38;4,80.70,565.08,452.14,10.38">This application builds the artifact dependency graph for diferent repositories, which is done by querying the respective web interfaces.</s><s xml:id="_HQYQmgz" coords="4,80.70,577.03,450.60,10.38;4,80.33,588.99,129.26,10.38">In a second step, the Miner utilizes a customized dump of the Snyk database to annotate the dependency graph with vulnerability information.</s><s xml:id="_aUCkKbu" coords="4,212.17,588.99,254.01,10.38">The graph is then stored in a database for further processing.</s><s xml:id="_fBjK9nV" coords="4,468.77,588.99,62.54,10.38;5,80.70,106.56,450.61,10.38;5,80.70,118.52,128.98,10.38">We present the design of our Miner in Section 4.1, highlight implementation details in Section 4.2, and present insights into the resulting data set in Section 4.3.</s></p><p xml:id="_PU4jXqB"><s xml:id="_EKStWwW" coords="5,90.66,130.47,393.41,10.38">In the second phase, we conduct our analysis, which is guided by four diferent research questions.</s><s xml:id="_MyDXKYk" coords="5,486.50,130.47,44.80,10.38;5,80.70,142.43,211.14,10.38">We present those questions and deine their scope in Section 5.1.</s><s xml:id="_TAHR5tW" coords="5,294.34,142.43,236.97,10.38;5,80.70,154.38,450.79,10.38;5,80.70,166.34,102.45,10.38">In order to answer those questions, we implement diferent analysis applications that extract metrics from the annotated dependency graph, and also implement tools for manual data exploration.</s><s xml:id="_CnBEA6J" coords="5,185.64,166.34,345.67,10.38;5,80.70,178.29,366.04,10.38">We provide the results for each analysis in Section 5.3, which includes diagrams and plots of the previously generated metrics, as well as the outcomes of our manual analyses.</s></p><p xml:id="_b3XBEbt"><s xml:id="_NRtnGfJ" coords="5,90.66,190.25,247.92,10.38">Finally, we discuss the results of our analysis in Section 6.</s><s xml:id="_ecP94cB" coords="5,341.97,190.25,189.33,10.38;5,80.70,202.20,377.89,10.38">We systematically derive potential threats to application security from our indings and analyze which repositories are afected by them.</s><s xml:id="_URnfdEa" coords="5,461.09,202.20,70.22,10.38;5,80.70,214.16,450.86,10.38;5,80.70,226.11,119.96,10.38">We then propose possible mitigation strategies for those threats, which are meant to help software developers improve the security of their development process.</s></p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4" xml:id="_HJcMV6c">DATA AGGREGATION</head><p xml:id="_A2SuG7B"><s xml:id="_FcZXVmu" coords="5,80.70,267.84,450.61,10.38;5,80.70,279.66,51.01,10.52">In order to aggregate the data set that we perform our analysis on, we developed a distributed application called Miner.</s><s xml:id="_xt9n8c3" coords="5,134.21,279.80,397.35,10.38;5,80.70,291.76,281.82,10.38">It extracts the artifact dependency graph from diferent repositories, annotates it with vulnerability information and stores it in a persistent fashion for further processing.</s><s xml:id="_XufTnJZ" coords="5,364.99,291.76,166.32,10.38;5,80.70,303.71,143.78,10.38">In this chapter, we present the design and implementation of said application.</s></p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1" xml:id="_wWBHueg">Design</head><p xml:id="_x6uVN5W"><s xml:id="_vE9r7ks" coords="5,80.70,345.44,397.74,10.38">In this section, we present the core design decision upon which we based application development.</s><s xml:id="_fct8pf7" coords="5,480.93,345.44,50.37,10.38;5,80.70,357.40,396.59,10.38">We aimed to include all relevant properties that might increase analysis expressiveness in the inal data model.</s></p><p xml:id="_vGS974X"><s xml:id="_4bPzBrk" coords="5,80.70,381.62,89.24,8.96">Selecting Repositories.</s><s xml:id="_m5mrSSw" coords="5,173.43,380.20,357.87,10.38;5,80.70,392.16,353.47,10.38">While we designed our application with extensibility in mind, we selected an initial set of artifact repositories in order to identify a superset of relevant artifact properties.</s><s xml:id="_mgyR6BX" coords="5,437.48,392.16,93.82,10.38;5,80.70,404.11,321.43,10.38">We decided to include repositories for three programming platforms: the JVM, .NET, and JavaScript.</s><s xml:id="_NCMrvwQ" coords="5,404.77,404.11,126.72,10.38;5,80.33,415.93,450.97,10.52">To ensure the relevance of our work, we consider only the most popular repository for each platform, yielding Maven Central (JVM), NuGet.org</s><s xml:id="_zCj56Ck" coords="5,80.40,427.88,169.33,10.52">(.NET) and the NPM Registry (JavaScript).</s></p><p xml:id="_rnYjg8T"><s xml:id="_kDDm4KM" coords="5,80.70,452.24,125.90,8.96">Defining a Suitable Data Model.</s><s xml:id="_zfFXRD3" coords="5,210.08,450.83,321.22,10.38;5,80.70,462.78,310.74,10.38">The creation of a suitable data model for the resulting data set involves deining properties for artifacts, vulnerabilities, and the relation of those two entities.</s></p><p xml:id="_ESJ6V9g"><s xml:id="_zUz7PeD" coords="5,90.66,474.74,442.17,10.38">We deine our data model for software artifacts by inspecting the data provided by the three selected repositories.</s><s xml:id="_ZaNSeHG" coords="5,80.70,486.69,420.26,10.38">Based on that, we identify common properties and evaluate their usefulness in the context of our work.</s></p><p xml:id="_9sxgwMP"><s xml:id="_3T7q9uh" coords="5,90.66,498.65,440.64,10.38;5,80.70,510.60,235.24,10.38">While named diferently, all three repositories incorporate the concept of a unique library identiier, which is always accompanied by a corresponding version number.</s><s xml:id="_kXefsPQ" coords="5,318.44,510.60,212.86,10.38;5,80.70,522.56,450.60,10.38;5,80.70,534.51,134.49,10.38">In Maven Central, the library identiier is composed of two attributes called groupId and artifactId, for NuGet.org and the NPM Registry it is a simple attribute called id and name, respectively.</s><s xml:id="_Atz7Qu8" coords="5,218.05,534.51,313.26,10.38;5,80.70,546.47,70.44,10.38">The concatenation of library identiier and version number yields a unique artifact identiier.</s><s xml:id="_qbvETsN" coords="5,153.62,546.47,277.45,10.38">Also, all three repositories expose the publication date of an artifact.</s></p><p xml:id="_Ghz4aQu"><s xml:id="_d9TPuTr" coords="5,90.66,558.42,442.18,10.38">Naturally, a dependency graph cannot be constructed without information about an artifact's dependencies.</s><s xml:id="_8xwxwSe" coords="5,80.22,570.38,451.08,10.38;5,80.70,582.33,170.52,10.38">We represent each dependency as a tuple, containing both a library identiier and a domain-speciic expression encoding a range of valid version numbers.</s><s xml:id="_MDxH4Bb" coords="5,253.37,582.33,277.93,10.38;5,80.70,594.29,450.61,10.38;5,80.70,606.24,65.22,10.38">As a result, the NPM dependency "lodash":"^4.17.4" references all artifacts of library lodash with a version number greater than or equal to 4.17.4 up until the next major version 5.0.0, excluding.</s><s xml:id="_r6yFsZB" coords="5,148.41,606.24,383.15,10.38;5,80.70,618.20,326.79,10.38">For our data model, we introduce an entity that holds three properties: the target's repository name and library identiier, as well as a repository-speciic version range speciier.</s><s xml:id="_S8nrA78" coords="5,409.84,618.20,121.47,10.38;5,80.70,630.15,450.61,10.38;5,80.70,642.11,118.66,10.38">For the sake of traceability, we keep the original deinition of the range speciier in our datamodel, and only normalize the data when resolving references in a later stage (cf.</s><s xml:id="_wuD8At3" coords="5,201.85,642.11,49.00,10.38">Section 4.2).</s><s xml:id="_bDYYQeG" coords="6,90.66,106.56,441.74,10.38;6,80.70,118.52,281.78,10.38">So in summary, the set of properties for software artifacts in our data model contains a unique library identiier, a version number, the release date, and a list of artifact dependencies.</s></p><p xml:id="_HvF3acy"><s xml:id="_dh7RPZs" coords="6,90.66,130.33,441.74,10.52;6,80.33,142.32,404.34,10.52;6,484.67,141.00,6.21,7.58;6,493.88,142.46,38.96,10.38">Our source of information on software vulnerabilities is a customized data dump of the Snyk Vulnerability DB, which was provided to us by Snyk Ltd. in an efort to support our research, and is up-to-date as of 16 th July 2020.</s><s xml:id="_5EfXSgT" coords="6,80.70,154.41,450.61,10.38;6,80.70,166.37,450.61,10.38;6,80.70,178.32,37.42,10.38">Based on this data source, we deine our data model for vulnerabilities, which includes the vulnerability's internal Snyk identiier, its severity (Critical, High, Medium or Low) and a reference to an associated CVE identiier, if available.</s><s xml:id="_emKq2tb" coords="6,120.61,178.32,300.38,10.38">Furthermore, we incorporate the date of disclosure and date of publication.</s><s xml:id="_Eypdxrp" coords="6,423.48,178.32,107.83,10.38;6,80.70,190.28,203.32,10.38">Lastly, vulnerabilities must be linked to the software artifacts that they afect.</s><s xml:id="_MbpZjTP" coords="6,286.52,190.28,244.97,10.38;6,80.70,202.23,452.13,10.38">In Snyk, this is done by providing a unique library identiier and domain-speciic version range speciier, for which they use a syntax that is diferent in all three repositories.</s><s xml:id="_MwwXh5F" coords="6,80.70,214.19,450.60,10.38;6,80.70,226.14,119.93,10.38">Similar to artifact dependencies, we keep the domain-speciic range speciier in our data model, and normalize the data when it is processed.</s><s xml:id="_WSyRqG2" coords="6,90.66,446.14,178.24,10.38">We summarize our data model in Figure <ref type="figure" coords="6,261.94,446.14,3.48,10.38" target="#fig_0">1</ref>.</s><s xml:id="_6Jm9Qsa" coords="6,271.79,446.14,259.52,10.38;6,80.70,458.10,333.64,10.38">It features a single entity called ArtifactReference, which is used to model both artifact dependencies and vulnerability-to-artifact relations.</s><s xml:id="_Wzn5Uk4" coords="6,417.38,457.96,113.92,10.52;6,80.70,469.92,294.54,10.52">It has an associated current target, which is the referenced artifact with the highest version number.</s><s xml:id="_NTb7H7a" coords="6,377.74,470.06,153.56,10.38;6,80.70,481.87,450.60,10.52;6,80.70,493.97,236.68,10.38">Furthermore, we identiied additional relations that are required to perform a meaningful analysis: A Patching Relation connects each vulnerability to zero or more artifacts that incorporate the respective patch.</s><s xml:id="_5zhUjmr" coords="6,319.74,493.83,211.56,10.52;6,80.70,505.92,450.61,10.38;6,80.45,517.88,134.65,10.38">Furthermore, there are two distinct relations ordering releases for each unique library, one of them considering the time of release (next release), the other one the version number (next version).</s></p><p xml:id="_G5k9zQH"><s xml:id="_ggsRapT" coords="6,90.66,529.83,440.64,10.38;6,80.70,540.33,73.12,11.20;6,156.80,541.79,181.82,10.38">Figure <ref type="figure" coords="6,119.14,529.83,4.65,10.38" target="#fig_1">2</ref> illustrates the data model by showing a sample instantiation for a vulnerability that is associated to CVE-2020-11023 <ref type="foot" coords="6,150.44,540.33,3.38,7.58" target="#foot_6">7</ref> and afects the jQuery library in NuGet.org.</s><s xml:id="_S39SWaH" coords="6,341.10,541.79,190.21,10.38;6,80.70,553.74,413.32,10.38">For the sake of readability only ive entities of type SoftwareArtifact are shown here, in reality there are 58 artifacts afected by this vulnerability.</s></p><p xml:id="_vqrtMXN"><s xml:id="_DSckmYd" coords="6,80.70,574.34,87.43,8.96">Defining Components.</s><s xml:id="_PVKCA4j" coords="6,171.61,572.92,359.69,10.38;6,80.70,584.88,393.02,10.38">In order to enable a modular and distributed implementation of our miner, we decompose the task of data aggregation into sub-tasks, each of which is addressed by a diferent component.</s></p><p xml:id="_hpNG3gm"><s xml:id="_MFEjUyf" coords="6,90.66,596.69,347.86,10.52">The Database component is responsible for storing the data set in a persistent fashion.</s><s xml:id="_yRAxxDM" coords="6,441.01,596.83,90.30,10.38;6,80.70,608.79,398.51,10.38">It exposes an interface that allows structured querying of the data, which is required for the subsequent analysis phase.</s><s xml:id="_HGGptks" coords="6,481.71,608.65,49.60,10.52;6,80.70,620.60,450.61,10.52;7,80.70,465.04,140.23,10.38">The Artifact Miners enumerate all software artifacts for their respective repository and store the results in the database using the data model deined in Figure <ref type="figure" coords="7,214.15,465.04,3.39,10.38" target="#fig_0">1</ref>.</s><s xml:id="_5Jfx82N" coords="7,223.41,465.04,307.90,10.38;7,80.70,477.00,220.97,10.38">As the interfaces of all three repositories are diferent from each other, there is one dedicated miner implementation per repository.</s></p><p xml:id="_aEMTDye"><s xml:id="_PnSM2Yk" coords="7,90.66,488.95,440.64,10.38;7,80.70,500.77,151.99,10.52">The task of parsing the list of vulnerabilities and transforming them to the aforementioned data model is handled by the Vulnerability Processor.</s><s xml:id="_bVPV5s7" coords="7,234.98,500.77,296.32,10.52;7,80.70,512.86,452.14,10.38">Finally, the Reference Resolver enumerates all ArtifactReference entities in the database, which implicitly reference a set of artifacts, and converts them to explicit entity-to-entity relations.</s><s xml:id="_6bKKP9n" coords="7,80.40,524.82,399.19,10.38">This is done so that the subsequent analysis does not need to re-resolve those implicit relations.</s><s xml:id="_u2JC5EC" coords="7,482.28,524.82,49.02,10.38;7,80.70,536.63,450.60,10.52;7,80.70,548.73,450.86,10.38;7,80.70,560.68,37.38,10.38">Using those explicit relations, the Patch Detector then enumerates all vulnerabilities in the data set and inds those artifacts that patch the vulnerability, i.e. the irst artifacts of the targeted library that are not afected by the vulnerability anymore.</s><s xml:id="_YUbrJmn" coords="7,120.48,560.68,412.36,10.38">The vulnerability and its patching artifact are connected via an entity-to-entity relation in the database.</s></p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2" xml:id="_yzK9mQe">Implementation</head><p xml:id="_qyBJWt3"><s xml:id="_VN9SRmQ" coords="7,80.35,604.97,434.06,10.38">As previously mentioned, we design a distributed application for the task of aggregating our data set.</s><s xml:id="_XhjtmMF" coords="7,517.89,604.97,13.41,10.38;7,80.70,616.78,452.14,10.52">We separately implement and package each component, and manage their deployment using Docker and Portainer.</s><s xml:id="_5sH8Twm" coords="7,80.70,628.74,450.61,10.52;7,80.45,640.69,95.39,10.52">For our implementations we use Python 3.8, and our Docker images are based on the python-alpine image in version 3.8.2-alpine3.11.</s></p><p xml:id="_zEneWWw"><s xml:id="_MWeDHpk" coords="8,90.66,106.56,440.64,10.38;8,80.70,118.52,30.15,10.38;8,110.84,117.06,3.38,7.58;8,114.72,118.52,2.19,10.38">We publish our miners and the respective components for postprocessing as open-source Docker images via GitHub <ref type="foot" coords="8,110.84,117.06,3.38,7.58" target="#foot_7">8</ref> .</s><s xml:id="_y4XzSc8" coords="8,119.42,118.52,412.14,10.38;8,80.70,130.47,127.82,10.38">Due to our data on vulnerabilities being the intellectual property of Snyk Ltd., we cannot publish any components handling this data.</s><s xml:id="_TxcKb4J" coords="8,211.01,130.47,222.31,10.38">However, they can be obtained directly from Snyk Ltd.</s></p><p xml:id="_eZqqdym"><s xml:id="_2KaMrcZ" coords="8,90.66,142.43,440.64,10.38;8,80.70,154.38,69.02,10.38">In the following, we highlight the most important implementation details, the challenges we faced, and the tools we utilized.</s></p><p xml:id="_Xp9UB2f"><s xml:id="_wGfMhSS" coords="8,80.70,173.92,38.66,8.96">Database.</s><s xml:id="_xXcRwb6" coords="8,122.84,172.50,408.46,10.38;8,80.70,184.32,199.02,10.52">As our data set is essentially a large dependency graph with annotated vulnerability nodes, we select the graph database Neo4j as our storage backend.</s><s xml:id="_QDVM5X4" coords="8,282.19,184.46,250.65,10.38">We deploy it using the oicial Docker image<ref type="foot" coords="8,461.91,183.01,3.38,7.58" target="#foot_8">9</ref> in version 4.0.5.</s></p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head xml:id="_cUrtHrD">Miners.</head><p xml:id="_mgZnAu6"><s xml:id="_ftnfTPc" coords="8,114.17,202.58,322.65,10.38">For each repository, we develop and implement a dedicated miner component.</s><s xml:id="_UZuJJ8v" coords="8,439.29,202.58,92.01,10.38;8,80.70,214.54,450.60,10.38;8,80.70,226.49,50.69,10.38">For Maven Central we initially relied on an existing implementation by Benellalam et al. <ref type="bibr" coords="8,346.02,214.54,10.35,10.38" target="#b3">[4]</ref>, which also stores a full dependency graph using Neo4j.</s><s xml:id="_Udt8Uqm" coords="8,133.86,226.49,347.16,10.38">However, due to multiple problems we faced when executing this implementation (cf.</s><s xml:id="_TtKUX9u" coords="8,483.50,226.49,48.90,10.38;8,80.33,238.45,225.71,10.38">Section 4.3), we had to re-implement the Maven miner from scratch.</s></p><p xml:id="_MfuuHNU"><s xml:id="_4mCHJxa" coords="8,90.66,250.40,440.64,10.38;8,80.70,262.36,340.36,10.38">All our implementations follow an asynchronous Producer-Consumer-Architecture: a producer enumerates artifacts, which are grouped into batches and piped to a pool of consumer threads.</s><s xml:id="_N83vAKz" coords="8,423.56,262.36,107.74,10.38;8,80.70,274.31,96.29,10.38">Those consumers store all artifacts in the database.</s><s xml:id="_Cu6rVJK" coords="8,179.26,274.31,352.05,10.38;8,80.70,286.27,134.16,10.38">By decoupling those two processes, periods of low storage throughput do not slow down the artifact enumeration process.</s></p><p xml:id="_MfpSWcw"><s xml:id="_VGjSYcv" coords="8,90.66,298.22,440.64,10.38;8,80.70,310.18,103.68,10.38">For NuGet.org, artifacts are enumerated by consuming an append-only catalog that keeps track of all types of artifact-related events.</s><s xml:id="_F3aQm8b" coords="8,186.87,310.18,344.68,10.38;8,80.70,322.13,192.00,10.38">For each publication event, the miner retrieves corresponding artifact properties by issuing a single HTTP request to the NuGet.org</s><s xml:id="_ZWRnTDw" coords="8,275.19,322.13,17.27,10.38">API.</s><s xml:id="_7hQZcK8" coords="8,294.94,322.13,236.60,10.38;8,80.70,334.09,201.62,10.38">The catalog consists of multiple pages, for which the index is located at api.nuget.org/v3/catalog0/index.json.</s></p><p xml:id="_Ukd4kfq"><s xml:id="_4734y77" coords="8,90.66,346.04,412.07,10.38">In contrast to that, the NPM Registry provides a single index ile at replicate.npmjs.com/_all_docs,</s><s xml:id="_74K5jBY" coords="8,505.67,346.04,25.63,10.38;8,80.70,358.00,198.51,10.38">which contains identiiers for all libraries ever created.</s><s xml:id="_a7UgVYw" coords="8,281.77,358.00,249.53,10.38;8,80.70,369.96,240.75,10.38">Our NPM Miner utilizes this identiier to retrieve a list of all artifacts belonging to that library at the NPM Registry API.</s></p><p xml:id="_Ar8u8Fy"><s xml:id="_XNAB4Mc" coords="8,90.66,381.77,440.64,10.52;8,80.70,393.87,186.23,10.38">Finally, for Maven Central we leverage an Apache Lucene index of all artifact identiiers, which is located at https://repo.maven.apache.org/maven2/.index/</s><s xml:id="_sUrjRUG" coords="8,269.42,393.87,82.27,10.38">and updated weekly.</s><s xml:id="_yjFKSQj" coords="8,354.18,393.87,177.12,10.38;8,80.70,405.82,452.14,10.38">For each identiier, the miner downloads the corresponding pom.xml ile from Maven Central and extracts information about the artifact and its dependencies.</s><s xml:id="_EbYjCBx" coords="8,80.70,417.78,450.61,10.38;8,80.70,429.73,42.23,10.38">However, in contrast to other repositories, Maven's dependencies cannot always be extracted by looking at a single ile.</s><s xml:id="_MWmyGnZ" coords="8,125.57,429.59,405.73,10.52;8,80.70,441.69,159.17,10.38">They may be speciied in one of the artifact's parent POM iles, or use property values that need to be resolved in the POM ile hierarchy.</s><s xml:id="_ZFJwHxw" coords="8,242.82,441.69,288.48,10.38;8,80.70,453.64,450.60,10.38;8,80.70,465.60,132.51,10.38">These problems can be addressed by using the Maven command-line interfaces to resolve dependencies, which does, however, take a very long time and uses a signiicant amount of disk space for POM ile caching.</s><s xml:id="_f22P9rh" coords="8,215.71,465.60,315.60,10.38;8,80.37,477.55,328.56,10.38">Instead, we developed our own dependency resolver using the standard Java XML libraries, which signiicantly increases the performance of our application.</s><s xml:id="_rdGWx6h" coords="8,411.43,477.55,119.87,10.38;8,80.70,489.51,450.60,10.38;8,80.40,501.32,450.90,10.52;8,80.70,513.28,56.51,10.52;8,137.21,511.96,6.76,7.58;8,144.48,513.42,2.17,10.38">To guarantee correctness, we use a secondary dependency resolver as a fallback: Whenever our XML resolver fails to resolve a property value (which may happen in cases of so-called import-scope dependencies), we re-resolve dependencies using the Eclipse Aether library <ref type="foot" coords="8,137.21,511.96,6.76,7.58" target="#foot_9">10</ref> .</s><s xml:id="_eTbqTGw" coords="8,149.14,513.42,382.16,10.38;8,80.70,525.23,327.77,10.52">As this library is solely available for the JVM platform, we implement the Maven miner in Java and deploy it using the oicial maven Docker image in version 3.6.0-jdk-8-alpine.</s></p><p xml:id="_MwuMqev"><s xml:id="_tbpJXsh" coords="8,80.70,544.91,92.71,8.96">Vulnerability Processor.</s><s xml:id="_eGZEgFZ" coords="8,176.89,543.50,355.51,10.38;8,80.33,555.45,450.97,10.38;8,80.45,567.41,150.41,10.38">The vulnerability processor consumes our snapshot of the Snyk Vulnerability Database, which has been provided in the JSON ile format and creates corresponding entities of type Vulnerability and ArtifactReference in the database.</s></p><p xml:id="_GDScASB"><s xml:id="_5fYnkAN" coords="8,80.70,586.94,61.24,8.96">Postprocessing.</s><s xml:id="_wEXAjAP" coords="8,145.42,585.53,385.89,10.38;8,80.70,597.48,337.65,10.38">After the Miners and Vulnerability Processor have aggregated all data necessary, two distinct components perform postprocessing steps in order to prepare the data for analysis.</s></p><p xml:id="_VCynNpW"><s xml:id="_3xTbx2c" coords="9,140.24,109.12,18.28,10.38;9,175.49,109.12,18.28,10.38;9,210.74,109.12,22.91,10.38;9,250.63,109.12,3.82,10.38">1.0.0 1.8.0 1.8.11</s><s xml:id="_D5NTMP3" coords="9,254.45,109.12,19.09,10.38;9,290.52,109.12,116.72,10.38;9,424.21,109.12,50.55,10.38">1.8.12 1.8.13 1.9.0 1.9.9 2.0.0 2.0.3 3.0.0</s></p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head xml:id="_vreAg9p">Fig. 3. Detecting patching library releases</head><p xml:id="_G69XcvJ"><s xml:id="_846usXX" coords="9,90.66,165.06,441.74,10.38;9,80.33,177.02,450.97,10.38;9,80.70,188.97,96.67,10.38">The Reference Resolver converts a number of implicit relations between database entities into explicit relations, which enables us to greatly improve the performance of our subsequent analyses and simpliies transitive queries to the database.</s><s xml:id="_NhHaxwX" coords="9,179.85,188.97,351.45,10.38;9,80.70,200.93,122.38,10.38">It irst processes all artifacts for each unique library identiier and creates relations of type NEXT and NEXT_RELEASE.</s><s xml:id="_qHn3aMK" coords="9,205.57,200.79,325.73,10.52;9,80.70,212.88,50.41,10.38;9,131.11,211.43,6.76,7.58;9,138.37,212.88,392.93,10.38;9,80.70,224.84,45.63,10.38">These represent the order of versions (according to the Semantic Versioning 2.0.0 speciication <ref type="foot" coords="9,131.11,211.43,6.76,7.58" target="#foot_10">11</ref> ) and the order of release dates for all artifacts of the given library, as illustrated in our data model in Figure <ref type="figure" coords="9,119.53,224.84,3.40,10.38" target="#fig_0">1</ref>.</s><s xml:id="_AHVHpz3" coords="9,128.82,224.84,402.48,10.38;9,80.70,236.79,275.16,10.38">Afterwards, the Reference Resolver connects all database entities of type ArtifactReference with their target artifacts by creating direct relations of type REFERENCES.</s><s xml:id="_jSbNfxs" coords="9,358.37,236.79,172.94,10.38;9,80.70,248.75,353.59,10.38">This is done by parsing the speciic version range qualiier and then iltering all artifacts of the target library for matching versions.</s><s xml:id="_vQxK9d2" coords="9,436.77,248.75,94.72,10.38;9,80.70,260.70,450.61,10.38;9,80.33,272.66,137.72,10.38">The Reference Resolver also creates a special relation called CURRENT_TAR'ET between each ArtifactReference and its target artifact with the highest version number.</s><s xml:id="_aTbaxx4" coords="9,220.64,272.66,280.29,10.38">The result of a successful run based on a reference to the Nuget.org</s><s xml:id="_eChTMrd" coords="9,503.53,272.66,28.04,10.38;9,80.70,284.61,127.58,10.38">library jQuery can be seen in Figure <ref type="figure" coords="9,201.45,284.61,3.41,10.38" target="#fig_1">2</ref>.</s></p><p xml:id="_Q2JqxTA"><s xml:id="_kPxc2dK" coords="9,90.66,296.57,440.64,10.38;9,80.70,308.52,199.27,10.38">Finally, the Patch Detector builds on top of the transformations performed by the Reference Resolver and detects the set of patches for each vulnerability.</s><s xml:id="_KYrP8rb" coords="9,282.78,308.52,248.78,10.38;9,80.70,320.48,382.71,10.38">As the range of version numbers afected by a vulnerability may be discontinuous, it is possible that there are multiple patches for a single vulnerability.</s><s xml:id="_YdBbAaV" coords="9,465.94,320.48,65.36,10.38;9,80.70,332.43,450.60,10.38;9,80.70,344.39,212.82,10.38">The component incorporates two diferent approaches: First it checks whether we have explicit data on the patching software artifact, which is true for most of the vulnerabilities.</s><s xml:id="_JYzatYY" coords="9,296.00,344.39,235.29,10.38;9,80.70,356.34,430.20,10.38">If no such data exists, the patching artifacts are calculated by inding the irst non-afected library releases for which the predecessor is afected by the vulnerability.</s><s xml:id="_eauXHAy" coords="9,513.37,356.34,17.93,10.38;9,80.70,368.30,450.61,10.38;9,80.70,380.25,215.56,10.38">This process is illustrated in Figure <ref type="figure" coords="9,209.13,368.30,3.48,10.38" target="#fig_9">3</ref>, where version numbers highlighted red are afected by a vulnerability, and green version numbers indicate the detected patches.</s><s xml:id="_cQbQ7Wr" coords="9,298.75,380.25,232.55,10.38;9,80.70,392.21,178.60,10.38">In the database, a vulnerability is connected to each of its patches with a relation of type PATCHED_BY.</s></p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3" xml:id="_bvY42U6">Execution Results</head><p xml:id="_MWQHYMp"><s xml:id="_q7B7q9R" coords="9,80.22,429.48,267.30,10.38">We initially executed our miner throughout the course of 70 days.</s><s xml:id="_nxKDKqe" coords="9,350.00,429.48,181.30,10.38;9,80.70,441.43,256.40,10.38">The irst phase was dedicated to running the Miners for all three repositories, which took a total of 43 days.</s><s xml:id="_kKXTeef" coords="9,339.60,441.43,191.96,10.38;9,80.70,453.39,452.14,10.38">The second step of executing the Vulnerability Processor took less than one minute, whereas the postprocessing phase required another 27 days to complete.</s><s xml:id="_rzF3FtG" coords="9,80.22,465.34,354.60,10.38">We identiied two main factors with signiicant impact on the application performance:</s></p><p xml:id="_EHFyVX9"><s xml:id="_tj3TRCz" coords="9,94.64,479.82,436.66,10.38;9,105.11,491.77,127.30,10.38">Maven Miner For our Maven Miner component we initially reused an existing implementation published by Benelallam et al. <ref type="bibr" coords="9,186.96,491.77,11.71,10.38" target="#b3">[4]</ref> in 2019.</s><s xml:id="_EsNCTyB" coords="9,234.91,491.77,296.40,10.38;9,105.11,503.73,55.54,10.38">During its execution, we observed a large variation regarding the artifact mining speed.</s><s xml:id="_F2skmpr" coords="9,162.83,503.73,369.57,10.38;9,104.74,515.68,190.74,10.38">Furthermore, some internal components of the application required constant manual restarts, which lead to additional performance penalties.</s><s xml:id="_UU5JtvR" coords="9,297.98,515.68,233.33,10.38;9,105.11,527.64,320.00,10.38">Due to those problems, we aborted the program execution and instead developed our own Maven Miner implementation from scratch (cf.</s><s xml:id="_BGdvVf7" coords="9,427.60,527.64,49.00,10.38">Section 4.2).</s><s xml:id="_ysKcWnQ" coords="9,94.65,539.60,436.66,10.38;9,105.11,551.55,170.94,10.38">Reference Resolver The Reference Resolver identiies potential targets of a reference, which involves a lookup via their unique library identiier.</s><s xml:id="_vKZSCvg" coords="9,278.76,551.55,254.22,10.38;9,105.11,563.51,44.77,10.38">For all three repositories, these identiiers are generally caseinsensitive.</s><s xml:id="_HYGzpVS" coords="9,151.89,563.51,91.50,10.38">However, in NuGet.org</s><s xml:id="_zQBGDE4" coords="9,245.41,563.51,285.90,10.38;9,105.11,575.46,42.38,10.38">references often use a style of capitalization that difers from the original deinition.</s><s xml:id="_H67XQEQ" coords="9,149.98,575.46,381.32,10.38;9,105.11,587.42,352.91,10.38">Therefore, the Reference Resolver is required to do a case-insensitive property lookup in the Neo4j database, which turned out to be signiicantly slower than an exact-match lookup.</s><s xml:id="_vC3qK2N" coords="9,460.45,587.42,70.85,10.38;9,105.11,599.37,58.03,10.38">For future runs of the NuGet.org</s><s xml:id="_K2Sebcq" coords="9,165.63,599.37,341.85,10.38">Miner, this problem has been averted by converting all package names to lowercase.</s><s xml:id="_eevd6tJ" coords="9,90.66,613.85,440.64,10.38;9,80.70,625.80,62.44,10.38">Running our own Maven Miner implementation took additional 14 days, including the second phase of postprocessing.</s><s xml:id="_4745sUJ" coords="9,145.63,625.80,385.67,10.38;10,80.70,279.07,288.89,10.38">Our inal data for NuGet.org and the NPM Registry is up-to-date as of June 2020, while the data for Maven, which was calculated at a later stage, is valid as of April 2021.</s><s xml:id="_Zqw45WC" coords="10,371.86,279.07,159.44,10.38;10,80.70,291.03,117.18,10.38">Furthermore, our data on vulnerabilities is up-to-date as of July 2020.</s><s xml:id="_EFQNh5r" coords="10,200.36,291.03,330.94,10.38;10,80.70,302.98,450.60,10.38;10,80.70,314.94,194.11,10.38">In order to avoid inconsistencies in the data set, we disregard all information on artifacts and vulnerabilities released after June 2020, thus creating a snapshot of that point in time for all three repositories and their associated vulnerabilities.</s></p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head xml:id="_6Tur3rE">Maven</head><p xml:id="_tWd3Mw2"><s xml:id="_3Ge5aM9" coords="10,90.66,326.89,440.64,10.38;10,80.70,338.85,354.94,10.38">Our inal data set contains a total of 21.8 million software artifacts spread across 1.9 million libraries, and incorporates 7110 vulnerabilities, 27% of which do not have associated CVE identiiers.</s><s xml:id="_3kGnucp" coords="10,438.12,338.85,93.18,10.38;10,80.70,350.80,198.94,10.38">There is a total of 3736 distinct CVE identiiers referenced in the data set.</s><s xml:id="_s4VttKG" coords="10,282.14,350.80,249.17,10.38;10,80.70,362.76,113.16,10.38">Figure <ref type="figure" coords="10,310.05,350.80,4.55,10.38">4</ref> illustrates how those values are distributed across the three diferent repositories.</s><s xml:id="_J2treRv" coords="10,196.49,362.76,334.81,10.38;10,80.70,374.71,183.93,10.38">The data is stored in two separate Neo4j instances, which in their uncompressed state require a combined disk space of 51 GB.</s></p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5" xml:id="_4MR7ytu">ANALYSIS</head><p xml:id="_Sew4JTs"><s xml:id="_uPT3tbA" coords="10,80.70,414.66,450.60,10.38;10,80.70,426.62,326.43,10.38">Based on our data set presented as part of Section 4.3, we design and conduct an analysis that characterizes the patching behavior exhibited by maintainers of the diferent artifact repositories.</s><s xml:id="_pkz2zxb" coords="10,409.61,426.62,121.69,10.38;10,80.70,438.57,380.85,10.38">We aim to identify how much inluence software vulnerabilities have, especially considering transitive artifact dependencies.</s><s xml:id="_hWaMYVe" coords="10,464.03,438.57,67.26,10.38;10,80.70,450.53,436.51,10.38">Furthermore, we investigate the time it takes library maintainers to release patches and to upgrade vulnerable dependencies.</s></p><p xml:id="_ckKvMgY"><s xml:id="_ebUnTmp" coords="10,90.66,462.48,440.64,10.38;10,80.70,474.44,67.72,10.38">In this section, we irst present the design of our analysis (Section 5.1), which consists of four diferent research questions (RQs).</s><s xml:id="_BVnyXKw" coords="10,151.22,474.44,380.08,10.38;10,80.70,486.39,46.03,10.38">After that, we present our methodology in Section 5.2, and inally we outline our results in Section 5.3.</s></p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1" xml:id="_fPMMAbN">Design</head><p xml:id="_mbJKEqh"><s xml:id="_dcMSUWM" coords="10,80.22,526.20,435.43,10.52">With our analysis design, we aim to deine the scope of the term patching behavior as precisely as possible.</s><s xml:id="_4Zd9fSU" coords="10,518.14,526.34,13.17,10.38;10,80.70,538.29,450.60,10.38;10,80.70,550.25,106.85,10.38">We do so by deriving a set of research questions, each of which involves metrics that contribute to our subjective understanding of the term.</s><s xml:id="_8FNDsnf" coords="10,190.02,550.25,341.29,10.38;10,80.70,562.21,119.11,10.38">Thus, answering those questions yields a characterization of the patching behavior in each of the three repositories.</s><s xml:id="_zdKEavb" coords="10,202.29,562.21,329.01,10.38;10,80.70,574.16,342.38,10.38">This, in turn, enables us to compare the results across diferent repositories and to identify characteristic diferences regarding the handling of software vulnerabilities.</s></p><p xml:id="_37WhM7G"><s xml:id="_uQprSBq" coords="10,90.66,586.12,326.13,10.38">In total, we answer four distinct research questions which constitute our analysis.</s><s xml:id="_Ge7EACm" coords="10,419.25,586.12,112.05,10.38;10,80.70,598.07,182.40,10.38">In the following, we present the goal and scope of each question in detail.</s></p><p xml:id="_WKXf4bu"><s xml:id="_6EkbG8t" coords="10,90.66,620.54,242.92,8.93">RQ1: How long does it take developers to release patches?</s><s xml:id="_nfFsmf2" coords="10,337.06,619.09,194.24,10.38;10,80.70,631.05,229.17,10.38">We identify the duration between the publication of a vulnerability and the release of an appropriate patch.</s><s xml:id="_7UgrRUN" coords="10,312.36,631.05,218.94,10.38;10,80.70,643.00,429.16,10.38">This value is of critical interest, as it describes a period of time in which a vulnerability is publicly known without developers having an option to mitigate the risk.</s><s xml:id="_tgjw2Dy" coords="10,512.26,643.00,20.14,10.38;11,80.70,106.42,450.60,10.52;11,80.45,118.52,27.96,10.38">Also, the duration between vulnerability disclosure and patch release is of interest, as well as a comparison of the two values.</s></p><p xml:id="_HXWAuY3"><s xml:id="_CbEvqUd" coords="11,90.66,140.23,242.79,8.93">RQ2: What is the transitive impact of vulnerabilities?</s><s xml:id="_hcPksd2" coords="11,336.94,138.77,194.37,10.38;11,80.70,150.73,206.07,10.38">We determine the number of artifacts that are afected by a given vulnerability in the irst place.</s><s xml:id="_sncbqrb" coords="11,289.38,150.59,241.92,10.52;11,80.70,162.54,390.44,10.52">While this is rather trivial to calculate for artifacts directly afected by a vulnerability, it is interesting to also identify artifacts that are transitively afected.</s><s xml:id="_ZhQptPB" coords="11,473.62,162.68,57.94,10.38;11,80.70,174.64,450.60,10.38;11,80.70,186.59,30.87,10.38">It is especially relevant to compare these values across diferent repositories since the inluence of vulnerabilities is expected to vary.</s><s xml:id="_G4FhNU7" coords="11,114.05,186.45,417.26,10.52;11,80.70,198.55,87.34,10.38">The results are likely to help us understand the net impact a vulnerability may have, depending on the respective repository.</s></p><p xml:id="_ZYNynpm"><s xml:id="_rdqWD4Q" coords="11,90.66,220.26,355.31,8.93">RQ3: How long does it take developers to upgrade vulnerable direct dependencies?</s><s xml:id="_fepJcyF" coords="11,449.45,218.80,83.54,10.38;11,80.70,230.76,192.38,10.38">We analyze the artifacts directly depending on a vulnerable artifact.</s><s xml:id="_a3tQHh8" coords="11,275.42,230.76,255.89,10.38;11,80.70,242.71,309.61,10.38">Our overall goal is to understand when vulnerable dependencies are ixed by library developers, as compared to the vulnerability's publication.</s><s xml:id="_PugXQmS" coords="11,392.61,242.71,138.88,10.38;11,80.70,254.67,452.14,10.38">It is also interesting to see whether or not these upgrade durations depend on the respective library, and how they difer across multiple repositories.</s><s xml:id="_RN7QsBD" coords="11,80.40,266.62,451.09,10.38;11,80.70,278.58,244.48,10.38">The results may help library developers to understand the consequences of vulnerable dependencies, and other developers to carefully select dependencies for their project.</s></p><p xml:id="_4A4tUWh"><s xml:id="_CKqPgft" coords="11,90.66,300.29,257.75,8.93">RQ4: Do developers adhere to published security advisories?</s><s xml:id="_EcJgcPG" coords="11,351.90,298.83,179.40,10.38;11,80.45,310.79,405.00,10.38">We investigate whether or not developers use vulnerable dependencies, for which the corresponding security advisory has already been made public.</s><s xml:id="_tqcNMBT" coords="11,487.46,310.79,43.84,10.38;11,80.70,322.74,438.47,10.38">The results indicate whether or not vulnerability publications are being monitored and considered during development.</s></p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2" xml:id="_CHac2HH">Methodology</head><p xml:id="_Be9pRxt"><s xml:id="_TzAYMb8" coords="11,80.22,361.93,350.57,10.38">We extract diferent metrics from our data set in order to answer the RQs deined above.</s><s xml:id="_SQnzeBk" coords="11,433.16,361.93,98.14,10.38;11,80.70,373.88,451.70,10.38;11,80.70,385.84,24.07,10.38;11,104.77,384.38,6.76,7.58;11,114.52,385.84,38.27,10.38;11,152.79,384.38,6.76,7.58;11,160.05,385.84,2.19,10.38">Besides those automated analyses, in some cases, we also require utilities for manual data exploration, which we implement using Python, Plotly <ref type="foot" coords="11,104.77,384.38,6.76,7.58" target="#foot_11">12</ref> and Dash <ref type="foot" coords="11,152.79,384.38,6.76,7.58" target="#foot_12">13</ref> .</s></p><p xml:id="_aQ3E76Q"><s xml:id="_ZtGf3QM" coords="11,90.66,397.79,440.65,10.38;11,80.70,409.75,110.78,10.38">We implement two diferent modes of operation regarding the detection of dependencies for all metrics that involve transitive relations.</s><s xml:id="_WbSjBxc" coords="11,193.97,409.75,338.43,10.38;11,80.33,421.56,322.21,10.52">In the data set, a dependency is modeled using a node of type ArtifactReference, which is connected to all valid releases of the target library (as seen in Figure <ref type="figure" coords="11,392.84,421.70,3.24,10.38" target="#fig_1">2</ref>).</s><s xml:id="_TaJyCwj" coords="11,405.03,421.70,126.28,10.38;11,80.70,433.66,450.60,10.38;11,80.70,445.61,313.90,10.38">Considering all of those targets as possible dependencies vastly increases the search space of the respective analysis, and does not correspond to reality, where a package manager picks exactly one of the valid target releases.</s><s xml:id="_9YyqaYc" coords="11,397.04,445.61,134.26,10.38;11,80.70,457.43,237.30,11.37">Therefore, this mode of operation results in data that is an overapproximation (M &gt; ) of reality.</s></p><p xml:id="_aTGc5TA"><s xml:id="_EgbXxGC" coords="11,90.66,469.52,444.80,10.38">Another option for dependency detection is to select only one of the possible targets for any ArtifactReference.</s><s xml:id="_YuQ2vfB" coords="11,80.40,481.48,450.91,10.38;11,80.70,493.43,196.14,10.38">The most reasonable choice is to select the most recent release of the target library, as this is what any package manager does in the absence of version conlicts.</s><s xml:id="_MzfDB4n" coords="11,279.33,493.43,251.97,10.38;11,80.70,505.39,142.09,10.38">Our analyses leverage the CURRENT_TAR'ET relation annotated by the Reference Resolver to do so.</s><s xml:id="_P8ew7tg" coords="11,225.27,505.25,279.95,11.38">This mode of operation yields an underapproximation (M &lt; ) of reality.</s></p><p xml:id="_qYDWRdK"><s xml:id="_7cyuCVh" coords="11,90.66,517.34,442.18,11.23">All of our analyses that consider transitive dependencies can be executed in both the M &gt; and M &lt; mode.</s><s xml:id="_5esyaDj" coords="11,80.70,529.30,450.61,10.38;11,80.70,541.25,452.14,11.23">However, since package managers always select one target per dependency, and only deviate from the most recent release in the rare case of version conlicts, we consider M &lt; to yield data that is intuitively closer to reality.</s><s xml:id="_pgfWH97" coords="11,80.40,553.21,442.93,10.38">Therefore, all results presented in the following Section 5.3 have been obtained using this mode of operation.</s></p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3" xml:id="_apFrpb4">Results</head><p xml:id="_w6EXvmw"><s xml:id="_v7VgAbG" coords="11,80.70,592.39,363.28,10.38">In this section, we present our analysis results for the aforementioned research questions.</s><s xml:id="_h5KbtMu" coords="11,446.46,592.39,84.84,10.38;11,80.70,604.35,444.65,10.38">For each of them, we briely present the metrics involved and illustrate the results per repository using diferent types of diagrams.</s><s xml:id="_ypJVmTt" coords="12,80.70,348.60,263.18,8.93">RQ1: How long does it take developers to release patches?</s><s xml:id="_eWGDAjk" coords="12,347.36,347.15,183.94,10.38;12,80.45,359.10,450.85,10.38;12,80.70,371.06,29.21,10.38">For this irst RQ, we analyze the time from a vulnerability's publication or disclosure to the release of an appropriate patch by the developers of the target library.</s><s xml:id="_pV84sTv" coords="12,112.40,371.06,418.90,10.38;12,80.70,383.01,246.38,10.38">A previous study on the NPM Registry from 2018 <ref type="bibr" coords="12,316.26,371.06,16.39,10.38" target="#b9">[10]</ref> suggests that patches are often published before the date of publication, and even before the date of disclosure.</s><s xml:id="_QCy8P3k" coords="12,329.45,383.01,201.86,10.38;12,80.70,394.97,51.78,10.38">We, therefore, expect that most patching durations are negative.</s><s xml:id="_H2stVsT" coords="12,90.66,476.92,440.64,10.38;12,80.70,488.88,354.24,11.23">For each vulnerability and patching artifact, our analysis extracts the duration from vulnerability publication to patch release (δ P ) and from vulnerability disclosure to patch release (δ D ) in seconds.</s><s xml:id="_DfPdFsb" coords="12,437.44,488.88,93.86,10.38;12,80.70,500.83,450.61,10.38;12,80.70,512.79,161.32,10.38">This is done by issuing the Cypher query illustrated in Listing 1, and calculating the diferences between the datetime values release and dis / pub for each patching artifact.</s><s xml:id="_3nscmcE" coords="12,244.51,512.79,286.79,10.38;12,80.70,524.74,445.21,10.38">As this process is limited to vulnerabilities that have patches associated to them, a separate database query irst retrieves the number of unpatched vulnerabilities for each repository.</s></p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head xml:id="_Yz2EyQR">Maven</head><p xml:id="_ngjmHXr"><s xml:id="_dnvKz4Z" coords="12,90.66,536.70,381.37,10.38">The bar chart in Figure <ref type="figure" coords="12,189.83,536.70,4.73,10.38">5</ref> illustrates the number of unpatched vulnerabilities per repository.</s><s xml:id="_SyrQSfj" coords="12,474.75,536.70,56.55,10.38;12,80.70,548.65,351.03,10.38">In addition to that, the percentage of vulnerabilities with wildcard version range speciiers is shown.</s><s xml:id="_jS35W2g" coords="12,434.23,548.65,97.33,10.38;12,80.70,560.61,450.60,10.38;12,80.33,572.56,194.89,10.38">These vulnerabilities by deinition cannot be patched by any artifact, as they reference the entirety of their target library, for example with a version range qualiier of "*" or "[0,]".</s></p><p xml:id="_frF57wJ"><s xml:id="_8FXZGXF" coords="12,90.66,584.52,440.64,10.38;12,80.70,596.47,107.08,10.38">While on average 35.8% of all vulnerabilities are not patched, NPM has by far the highest amount with a percentage of almost 50%.</s><s xml:id="_QbFR7nJ" coords="12,190.28,596.33,341.02,10.52;12,80.70,608.29,321.02,10.52">Upon further investigation, we found that this is partially due to so-called Security Holders, which we found to be referenced by 14% of all NPM vulnerabilities.</s><s xml:id="_mvvDaYf" coords="12,404.86,608.43,126.44,10.38;12,80.70,620.38,450.61,10.38;12,80.70,632.34,139.27,10.38">Security Holders are symbolic artifacts that act as a placeholder for library identiiers that have previously been in use and are not usable anymore for security reasons <ref type="bibr" coords="12,201.45,632.34,14.81,10.38" target="#b42">[43]</ref>.</s><s xml:id="_4j7n5DN" coords="12,222.46,632.20,308.84,10.52;12,80.70,644.15,131.62,10.52">Figure <ref type="figure" coords="12,250.70,632.34,4.61,10.38">5</ref> shows the values for NPM when excluding security holders as NPM WSH (without security holders).</s><s xml:id="_wxPgKnr" coords="13,90.66,316.76,364.92,10.38">In Figure <ref type="figure" coords="13,130.13,316.76,3.44,10.38">6</ref>, we illustrate the distribution of severities for those unpatched vulnerabilities.</s><s xml:id="_eAbB7gK" coords="13,458.08,316.76,73.49,10.38;13,80.70,328.71,450.80,10.38;13,80.70,340.67,236.12,10.38">While we initially expected those vulnerabilities to be of minor severity, our data indicates that in fact more than 50% are either of severity high or critical across all three repositories.</s><s xml:id="_KfvpQdu" coords="13,319.31,340.67,211.99,10.38;13,80.33,352.62,343.62,10.38">This is mainly inluenced by the NPM repository, in which more than 70% of all unpatched vulnerabilities have a high or critical severity.</s><s xml:id="_wjpRg8p" coords="13,426.45,352.62,104.85,10.38;13,80.70,364.58,450.60,10.38;13,80.45,376.53,208.14,10.38">For Nuget and Maven, we observed a behavior that is more in line with our expectations, as for both of them around 66% of the unpatched vulnerabilities are either of severity low or medium.</s></p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head xml:id="_32BBV4D">Maven</head><p xml:id="_WJVjUwZ"><s xml:id="_HfdvzCM" coords="13,90.66,388.49,429.68,10.38">For the remainder of this section, we only consider vulnerabilities with existing patches for our analysis.</s><s xml:id="_EtBYSUK" coords="13,522.84,388.49,8.46,10.38;13,80.40,400.44,219.19,10.38;13,303.11,400.44,25.67,10.38;13,330.15,400.30,201.75,10.52;13,80.70,412.40,31.19,10.38">In Table <ref type="table" coords="13,104.40,400.44,3.34,10.38" target="#tab_4">1</ref>, we present the mean and median values for δ D and δ P , as well as the respective Interquartile Range (IQR) in days.</s><s xml:id="_uRsXTaf" coords="13,114.39,412.40,52.32,10.38;13,168.08,412.40,184.24,10.38">Regarding δ P , we observe that vulnerabilities in NuGet.org</s><s xml:id="_xyDu2zn" coords="13,354.82,412.40,176.75,10.38;13,80.70,424.35,169.57,10.38">seem to be patched the earliest, followed by Maven Central and then the NPM Registry.</s><s xml:id="_JJhNeRQ" coords="13,252.31,424.35,25.20,10.38;13,280.62,424.35,251.78,10.38;13,80.70,436.31,450.61,10.38;13,80.70,448.26,279.58,10.38">For δ D we observe very similar median values for all three repositories, however, there are large diferences in the IQR values, indicating a much more skewed distribution for Maven Central (184.0) as compared to the NPM Registry <ref type="bibr" coords="13,281.96,448.26,22.03,10.38">(25.4)</ref> or NuGet.org</s><s xml:id="_pXfqS6x" coords="13,362.77,448.26,19.59,10.38"><ref type="bibr" coords="13,362.77,448.26,16.32,10.38">(3.8)</ref>.</s></p><p xml:id="_9Gk8qcY"><s xml:id="_RrZUzzp" coords="13,90.66,460.22,299.34,10.38;13,391.37,460.22,2.18,10.38">In general, in Table <ref type="table" coords="13,171.14,460.22,4.61,10.38" target="#tab_4">1</ref> we observe rather large IQR values, especially for δ P .</s><s xml:id="_Ahb6nWB" coords="13,396.03,460.22,135.27,10.38;13,80.70,472.17,325.18,11.24">In order to gain more meaningful insights, we plot a stacked histogram of both the δ D and δ P values in Figure <ref type="figure" coords="13,398.91,472.17,3.48,10.38" target="#fig_3">7</ref>.</s><s xml:id="_rpMZCJT" coords="13,408.54,472.17,122.76,10.38;13,80.70,484.13,450.60,11.23;13,80.70,496.08,228.44,11.23">For each repository, the chart indicates the amount of patches released before vulnerability disclosure (δ D ≤ 0), between disclosure and publication (δ D &gt; 0 &gt; δ P ) and after publication (δ P ≥ 0).</s></p><p xml:id="_pyyqEsa"><s xml:id="_jXsJfwU" coords="13,90.66,508.04,419.95,10.38">We observed that, in total, almost 50% of all vulnerabilities are patched before their date of disclosure.</s><s xml:id="_rE2YNjv" coords="13,513.09,508.04,18.21,10.38;13,80.70,519.99,450.61,10.38;13,80.70,531.95,394.38,10.38">This suggests that library developers employ vulnerability detection processes, and manage to signiicantly reduce the attack surface of their library before any external actor informs them about a particular threat.</s><s xml:id="_EFubgU5" coords="13,477.76,531.95,54.64,10.38;13,80.70,543.90,451.70,10.38;13,80.70,555.86,296.52,10.38">Furthermore, around 73% of all vulnerabilities are patched before their publication, meaning that without any insider knowledge, an attacker may only be able to exploit the remaining 27% for an attack.</s><s xml:id="_2ABTASg" coords="13,379.71,555.86,151.60,10.38;13,80.70,567.81,370.98,10.38">In addition to that, our data suggests that an additional 7% of vulnerabilities are patched within the irst month after publication.</s></p><p xml:id="_3ATDSKK"><s xml:id="_YmpSguv" coords="13,90.66,579.77,440.64,10.38;13,80.70,591.72,184.38,10.38">While this average data does match our general expectation of the patch release date distribution, there are some notable diferences between repositories.</s><s xml:id="_wUsWc9d" coords="13,267.13,591.72,264.18,10.38;13,80.70,603.68,308.37,10.38">While for Maven Central over 50% of all vulnerabilities are patched before their disclosure, the corresponding value for NuGet.org is only 33%.</s><s xml:id="_hnNAMcd" coords="13,391.56,603.68,139.75,10.38;13,80.70,615.63,119.82,10.38">However, with 86% being patched before publication, NuGet.org</s><s xml:id="_VsbtfN6" coords="13,203.02,615.63,253.00,10.38">outperforms Maven Central, which is below 75% for this value.</s><s xml:id="_UkKYQk5" coords="13,458.51,615.63,72.79,10.38;13,80.70,627.59,118.45,10.38">This suggests that maintainers of the NuGet.org</s><s xml:id="_kXYtFQ6" coords="13,201.62,627.59,329.68,10.38;13,80.70,639.55,432.35,10.38">repository rely on vulnerability disclosure to a larger degree than their colleagues at Maven Central, but are still able to patch a larger amount of vulnerabilities before they are made public.</s></p><p xml:id="_ZkK5t23"><s xml:id="_D3aNQyS" coords="13,451.03,670.05,18.16,8.30">Digit.</s><s xml:id="_SNRgU2j" coords="13,471.53,670.05,23.42,8.30">Threat.</s><s xml:id="_crXNVsR" coords="13,497.27,670.05,13.10,8.30">Res.</s><s xml:id="_8Ku2q2P" coords="13,512.70,670.05,18.60,8.30">Pract.</s><s xml:id="_v2EBXrj" coords="14,84.09,300.61,430.85,9.54">Over 25% of all vulnerabilities are unpatched, with the majority being of high or critical severity.</s><s xml:id="_kkU26Gm" coords="14,517.16,300.61,17.53,9.54;14,84.09,312.56,265.05,9.54">The main driver for both trends is the NPM Registry repository.</s><s xml:id="_eMBXDhN" coords="14,351.35,312.56,185.13,9.54;14,84.09,324.52,311.04,9.54">Almost 75% of all patches are released before vulnerability publication, on average this happens 184 days prior.</s><s xml:id="_SyU36cM" coords="14,397.08,324.52,46.44,9.54">NuGet.org</s><s xml:id="_EUvZAgP" coords="14,445.47,324.52,89.22,9.54;14,84.09,336.48,226.99,9.54">patches are released the earliest compared to vulnerability publication.</s></p><p xml:id="_aAbzZxw"><s xml:id="_4rPAy4w" coords="14,80.70,363.75,247.59,8.93">RQ2: What is the transitive impact of vulnerabilities?</s><s xml:id="_rdtQbq9" coords="14,331.78,362.29,199.78,10.38;14,80.70,374.25,324.48,10.38">We inspect the net impact of vulnerabilities by measuring the number of artifacts that are afected, both directly and transitively.</s><s xml:id="_C4kNW4K" coords="14,407.58,374.25,123.72,10.38;14,80.70,386.20,319.05,10.38">As part of this, we also analyze the length of transitive dependency chains that propagate such vulnerabilities.</s><s xml:id="_BUDwKug" coords="14,90.66,488.12,440.64,10.38;14,80.70,499.93,450.61,11.39;14,80.70,512.03,24.96,10.38">In order to do so, we query our data set and for each vulnerability extract the number of unique afected libraries (I Lib,n ) and unique afected artifacts (I Art,n ) per level n, where the level captures the length of the transitive chain.</s><s xml:id="_PkY2We4" coords="14,108.50,512.03,422.80,11.24;14,80.70,523.98,452.14,11.24">I Art,0 (v) therefore corresponds to the number of artifacts directly afected by vulnerability v, whereas I Art,1 (v) represents the number of artifacts directly depending on a level zero artifact for the same vulnerability.</s><s xml:id="_QwBhZyc" coords="14,80.35,535.94,432.09,11.23">As described in Section 5.2, the detection of dependencies is executed in an underapproximation mode (M &lt; ).</s><s xml:id="_TNQTqNu" coords="14,514.91,535.94,16.39,10.38;14,80.70,547.89,268.93,10.38">Due to performance reasons, we cut of our analysis at a depth of six.</s><s xml:id="_5KcjCnA" coords="14,352.30,547.89,179.00,10.38;14,80.70,559.85,450.60,10.38;14,80.70,571.80,301.78,10.38">Listing 2 presents an example query that is used to obtain values for a single vulnerability in the Maven Central dependency graph, with the cutof being speciied as the recursive multiplicity of the DEPENDS_ON relation in line 2.</s></p><p xml:id="_7ZxWXxR"><s xml:id="_BpBUTAy" coords="14,90.66,583.76,253.39,10.38">In Figure <ref type="figure" coords="14,129.37,583.76,4.56,10.38">8</ref> we illustrate the transitive impact of vulnerabilities.</s><s xml:id="_FsCUBmU" coords="14,346.55,583.62,184.46,10.52;14,80.70,595.71,184.50,10.38">We say a vulnerability v has impact on level n if it afects at least one library on that level, ie.</s><s xml:id="_5MbWUFC" coords="14,267.61,595.71,263.69,11.25;14,80.70,607.67,219.38,10.38">I Lib,n (v) &gt; 0. We observe that vulnerabilities in the Maven Central Repository have the most impact on the irst six levels.</s><s xml:id="_hcQBvnR" coords="14,302.57,607.67,228.73,10.38;14,80.70,619.63,286.90,10.38">Here, more than 70% of all vulnerabilities have an impact on the irst level, and roughly 50% have an impact on the sixth level.</s><s xml:id="_RpPkWWc" coords="14,370.44,619.63,160.86,10.38;14,80.70,631.58,76.74,10.38">For the NPM Registry these values are signiicantly lower.</s><s xml:id="_n4anAGG" coords="14,159.93,631.58,279.76,10.38">The former one being not more than 60% and the latter just over 15%.</s><s xml:id="_kexy5Zb" coords="14,442.18,631.58,89.12,10.38;14,80.70,643.54,53.17,10.38">Finally, vulnerabilities in NuGet.org</s><s xml:id="_twJGgkQ" coords="14,136.36,643.54,352.94,10.38">exhibit the least impact of all three repositories, merely 3% have an impact on level six.</s></p><p xml:id="_VEXyVGA"><s xml:id="_X973Kxf" coords="15,90.66,106.56,440.64,10.38;15,80.70,118.52,130.88,10.38">As we cut of our automated analysis at level six, it does not reveal any information about the total length of impact chains in the data set.</s><s xml:id="_v3GDA2Q" coords="15,214.06,118.52,317.24,10.38;15,80.45,130.47,278.68,10.38">Therefore, we conducted a structured manual analysis on the most impactful vulnerabilities, which are likely to exhibit the longest impact chains.</s><s xml:id="_hkQN4A9" coords="15,361.62,130.47,169.94,10.38;15,80.70,142.43,450.61,10.38;15,80.70,154.38,183.02,10.38">However, it must be noted that there may be longer chains for less impactful vulnerabilities, therefore our results may only be seen as an indication for the general trend in terms of impact chain length.</s><s xml:id="_w8RZ9PP" coords="15,266.17,154.38,265.13,11.23;15,80.70,166.34,188.88,10.38">Table <ref type="table" coords="15,290.18,154.38,4.54,10.38" target="#tab_8">3</ref> reports the maximum chain length L MAX that we observed during manual inspection for each repository.</s><s xml:id="_U74v7XR" coords="15,272.07,166.34,259.23,10.38;15,80.70,178.29,105.01,10.38">The longest chain is comprised of 38 artifacts and is part of the Maven Central repository.</s><s xml:id="_83ThDhV" coords="15,188.21,178.29,223.39,10.38">The impact chains for the NPM Registry and NuGet.org</s><s xml:id="_wYu6Bvj" coords="15,414.10,178.29,117.20,10.38;15,80.70,190.25,219.25,10.38">proved to be shorter, here we observed maximum lengths of 15 and 13, respectively.</s></p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head xml:id="_vE4zXBx">Repository</head><p xml:id="_NusncA9"><s xml:id="_yAhDEKK" coords="15,225.54,251.39,28.94,9.54;15,90.66,377.66,367.15,11.24">Target  Apart from the length of impact chains, we also investigate the I Art,n values for each level n.</s><s xml:id="_xQ86WMx" coords="15,460.30,377.66,71.00,10.38;15,80.70,389.61,452.14,10.38">In order to enable a comparison between repositories, we normalize those values per 100,000 total artifacts for each repository.</s><s xml:id="_F7KNTNc" coords="15,80.40,400.02,450.91,12.61;15,80.70,414.90,17.97,10.38">Table <ref type="table" coords="15,104.41,402.25,4.54,10.38" target="#tab_6">2</ref> presents the mean (X ) and median ( X ) number of afected artifacts per level, as well as the corresponding IQR.</s><s xml:id="_GPGbkbX" coords="15,101.16,414.90,431.24,10.38">Interestingly, we observe turning points for X at levels two and four for the NPM Registry and NuGet.org,</s><s xml:id="_fyykMR7" coords="15,80.33,426.85,308.73,10.38">while the values for Maven Central exhibit continuous growth until level six.</s><s xml:id="_UGcW37x" coords="15,391.55,426.85,139.75,10.38;15,80.70,438.81,199.72,10.38">This matches both our observation of very long impact chains in Maven Central (cf.</s><s xml:id="_AaKsaHs" coords="15,282.91,438.81,248.39,10.38;15,80.70,450.76,171.79,10.38">Table <ref type="table" coords="15,307.79,438.81,3.87,10.38" target="#tab_8">3</ref>) and the large number of Maven vulnerabilities with impact on level six or higher (cf. Figure <ref type="figure" coords="15,242.70,450.76,3.26,10.38">8</ref>).</s></p><p xml:id="_aM4DKXw"><s xml:id="_TPV8FpE" coords="15,90.66,462.72,284.13,10.38">However, the direct comparison between Maven Central and NuGet.org</s><s xml:id="_YN5Ekfr" coords="15,376.94,462.72,154.62,10.38;15,80.70,474.67,450.61,10.38;15,80.70,486.63,278.80,10.38">reveals a stark contrast in vulnerability impact: While in NuGet.org on average only 2 artifacts per 100,000 are afected by vulnerabilities on level 6, the corresponding values for Maven Central is almost 6,000 times larger.</s></p><p xml:id="_GTXK9NS"><s xml:id="_Jx8sXhf" coords="15,83.74,506.98,452.74,9.54;15,84.09,518.94,115.93,9.54">Vulnerabilities in the Maven Central repository afect the most artifacts and do so via the longest transitive dependency chains.</s><s xml:id="_Nw8pZTC" coords="15,202.94,518.94,135.83,9.54">On the other hand, NuGet.org</s><s xml:id="_jMs22TA" coords="15,341.68,518.94,193.02,9.54;15,84.09,530.89,382.37,9.54">vulnerabilities have the shortest transitive impact chains, and afect less than 0.02% the number of artifacts compared to Maven.</s></p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head xml:id="_qVhVv6J">RQ3: How long does it take developers to upgrade vulnerable direct dependencies?</head><p xml:id="_wpvfrPZ"><s xml:id="_MS6F47V" coords="15,463.09,566.77,68.58,10.38;15,80.70,578.73,450.60,10.38;15,80.70,590.68,48.94,10.38">We analyze how long it takes library maintainers to upgrade a vulnerable direct dependency, as compared to the vulnerability's publication.</s><s xml:id="_kMw85VD" coords="15,132.30,590.68,399.01,10.38;15,80.70,602.64,190.75,10.38">We are especially interested in inding out whether the publication of vulnerabilities triggers an immediate response from library maintainers.</s><s xml:id="_ZpFMXe6" coords="15,274.13,602.64,257.18,10.38;15,80.70,614.59,349.06,10.38">Since maintainers are generally not involved in the disclosure process, we do not compare the time of upgrades to vulnerability disclosure dates here.</s><s xml:id="_8XgkUy2" coords="15,432.25,614.59,99.04,10.38;15,80.70,626.41,450.60,10.52;15,80.70,638.50,35.44,10.38">Furthermore, we present information on the relative number of afected libraries per repository and investigate the upgrade ratio for such libraries.</s><s xml:id="_vCMyZSu" coords="16,107.60,266.66,32.74,9.54;16,83.36,278.62,47.01,9.54;16,90.66,308.17,441.74,11.24;16,80.70,320.13,450.60,10.38;16,80.70,332.22,123.36,11.38">end for 14: end for For each unique library identiier, our analysis collects the number of total vulnerable dependencies (n VD ), as well as the number of vulnerable dependencies that have not been upgraded for this library, which we call unpatched dependencies (n UD ).</s><s xml:id="_HwKzEAa" coords="16,206.71,332.22,287.75,11.38;16,497.57,332.36,13.42,10.38;16,514.43,329.91,14.48,8.71;16,514.46,339.05,14.41,8.71;16,530.60,332.36,2.24,10.38">Based on that, we deine the patching ratio r P for each library as r P = 1 -n UD n VD .</s><s xml:id="_XYBRrXS" coords="16,80.70,345.99,450.61,10.38;16,80.70,357.94,310.63,11.23">Furthermore, for every library that has at least one patched vulnerable dependency, we extract the mean duration between vulnerability publication and dependency upgrade, δ PU , in seconds.</s><s xml:id="_U4yZbZP" coords="16,393.80,357.94,137.50,10.38;16,80.35,369.90,51.66,10.38;16,90.66,488.80,286.79,10.38">This methodology is illustrated in Algorithm 1. Table <ref type="table" coords="16,115.30,488.80,4.66,10.38" target="#tab_9">4</ref> summarizes the main characteristics of our results for this RQ.</s><s xml:id="_B9FcDaF" coords="16,379.95,488.80,151.36,10.38;16,80.70,500.75,379.18,10.38">It contains not only the total but also the relative amount of libraries that have ever been afected by direct vulnerable dependencies.</s><s xml:id="_GjqxrBF" coords="16,462.38,500.75,68.92,10.38;16,80.70,512.71,450.61,10.38;16,80.70,524.66,195.69,10.38">Here, we observe signiicant diferences between repositories: While in Maven Central more than a fourth of all libraries are afected, in NuGet.org this value is just above 1%.</s><s xml:id="_J5t692x" coords="16,278.76,524.66,161.95,10.38;16,444.16,524.66,87.41,10.38;16,80.70,536.62,268.04,10.38">In addition to that, Maven's average n V D value of 8.7 is notably larger than the values for the NPM Registry (3.4) and NuGet.org</s><s xml:id="_cAEyE6N" coords="16,351.45,536.62,20.56,10.38"><ref type="bibr" coords="16,351.45,536.62,17.14,10.38">(2.8)</ref>.</s><s xml:id="_W5DBKAD" coords="16,374.72,536.62,156.58,10.38;16,80.45,548.57,398.71,11.24">Despite these diferences, the average values for r P are rather similar for all three repositories, with values ranging from 32% to 40%.</s><s xml:id="_QcWTvD2" coords="16,482.29,548.57,50.11,10.38;16,80.45,560.53,409.80,10.38">On average, vulnerable dependencies are patched up to 503 days before vulnerability publication (NPM Registry).</s></p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head xml:id="_qru5QZU">Repository</head><p xml:id="_S5tT33D"><s xml:id="_ASb7NSu" coords="16,90.66,572.48,440.64,10.38;16,80.70,584.44,342.09,10.38;16,423.31,588.60,14.40,6.34;16,440.48,584.44,90.83,10.38;16,80.40,596.39,6.13,10.38;16,87.05,600.56,14.40,6.34;16,104.22,596.39,16.14,10.38">Upon investigating the distribution of patching rates, which is illustrated in Figure <ref type="figure" coords="16,427.40,572.48,3.40,10.38" target="#fig_7">9</ref>, we made an interesting observation: Library maintainers tend to either upgrade all vulnerable dependencies (r P = 100%), or none of them (r P = 0%).</s><s xml:id="_faZHkKm" coords="16,122.85,596.39,378.64,10.38">We observed partial upgrades for only 17% (Maven Central) to 1% (NuGet.org) of all libraries.</s></p><p xml:id="_PJ2Ypcx"><s xml:id="_Cmh3GU5" coords="16,90.66,608.35,222.47,11.23">The distribution of all δ PU values is plotted in Figure <ref type="figure" coords="16,301.91,608.35,7.49,10.38" target="#fig_8">10</ref>.</s><s xml:id="_y4j3Vn6" coords="16,315.50,608.35,215.81,10.38;16,80.70,620.30,275.95,10.38">As we expected, most values for the NPM Registry are below -400 days, which matches the low average reported in Table <ref type="table" coords="16,349.93,620.30,3.36,10.38" target="#tab_9">4</ref>.</s><s xml:id="_veAwVGx" coords="16,359.16,620.30,172.14,10.38;16,80.70,632.26,450.61,10.38;16,80.70,644.21,409.82,10.38">However, in Maven Central and NuGet.org between 10% and 13% of all values are larger than 400 days, which indicates that a substantial amount of vulnerable dependencies is upgraded more than a year after the corresponding security advisory was published.</s></p><p xml:id="_qRgWgs7"><s xml:id="_Z5QMupM" coords="17,110.83,275.23,103.14,10.38">Maven NPM NuGet.org</s><s xml:id="_mYC5qr6" coords="17,96.55,268.16,10.98,10.38;17,91.91,235.74,15.61,10.38;17,91.91,203.32,15.61,10.38;17,91.91,170.90,15.61,10.38;17,91.91,138.48,15.61,10.38;17,87.28,106.07,20.24,10.38;17,103.62,293.11,18.19,10.18;17,124.57,292.05,95.11,11.24;17,103.62,305.10,18.19,10.18;17,124.57,304.04,10.98,10.38;17,90.66,365.44,440.64,10.38;17,80.70,377.39,450.79,10.38;17,80.70,389.35,56.01,10.38">0% 20% 40% 60% 80% 100% r P = 100% 100% &gt; r P &gt; 0% r P = 0%  Interestingly, both Maven Central and NPM Registry exhibit a slight peak in the [0; 100) interval, which may indicate that the publication of a vulnerability prompts some developers to immediately upgrade their dependencies.</s><s xml:id="_cctbGWe" coords="17,139.21,389.35,393.19,10.38;17,80.70,401.30,106.77,10.38">Another reason for this observation may be the use of automated tools for vulnerability detection, as mentioned in Section 2.</s></p><p xml:id="_KZXruZ9"><s xml:id="_UPPFPkV" coords="17,83.74,419.42,315.33,9.54">Vulnerable dependencies afect only 1% of all libraries in NuGet.org,</s><s xml:id="_CQ8fpa6" coords="17,402.48,419.42,134.00,9.54;17,84.08,431.38,18.54,9.54">but up to 29% in Maven Central.</s><s xml:id="_Y87bzpD" coords="17,105.18,431.38,429.80,9.54;17,84.08,443.33,54.01,9.54">Upgrades of vulnerable dependencies usually happen more than 200 days prior to vulnerability publication.</s><s xml:id="_Yh7U3rq" coords="17,140.52,443.33,394.45,9.54;17,84.08,455.29,193.32,9.54">For some libraries, vulnerability publication seems to trigger an immediate dependency upgrade, suggesting the use of automation.</s></p><p xml:id="_3s3ujdQ"><s xml:id="_5JMwKUq" coords="17,80.70,482.57,282.03,8.93">RQ4: Do developers adhere to published security advisories?</s><s xml:id="_a2vn78C" coords="17,366.21,481.11,165.09,10.38;17,80.70,493.07,293.24,10.38">Once published, a vulnerability and all artifacts afected by it are publicly accessible by any software developer.</s><s xml:id="_46vPrX8" coords="17,376.42,493.07,154.88,10.38;17,80.70,505.02,176.49,10.38">We inspect whether or not developers adhere to those public security advisories.</s><s xml:id="_yQ9tJVN" coords="17,260.22,505.02,271.09,10.38;17,80.45,516.98,316.84,10.38">In order to do so, we calculate the number of artifacts that use a vulnerable dependency but were released after the vulnerability's publication.</s><s xml:id="_6NE2CfU" coords="17,90.66,607.69,442.33,10.38;17,80.70,619.65,274.95,11.24">For each such artifact, we compute the number of vulnerable dependencies, for which the respective vulnerability had already been published at the time of artifact release (n V ).</s><s xml:id="_FjkeEcZ" coords="17,358.13,619.65,173.18,10.38;17,80.70,631.60,451.70,10.38;17,80.33,643.56,73.38,11.23">Furthermore, for each artifact we calculate the minimum duration for which those vulnerabilities have been publicly accessible at that time in seconds, which we call δ PR .</s><s xml:id="_Vpy8Pch" coords="17,156.15,643.56,376.69,10.38">We collect the raw data for this analysis by executing the Cypher query presented in Listing 3.</s></p><p xml:id="_teg8wP5"><s xml:id="_EyMHq46" coords="18,192.81,242.71,10.38,3.07;18,194.59,238.70,10.38,4.01;18,196.90,236.66,10.38,2.04;18,90.66,413.29,421.95,10.38">[ 0 ; Similar to RQ3, Table <ref type="table" coords="18,182.42,413.29,4.73,10.38" target="#tab_10">5</ref> presents the total and the relative number of afected artifacts per repository.</s><s xml:id="_KC2ecDT" coords="18,515.45,413.29,17.54,10.38;18,80.70,425.24,246.15,11.23">Furthermore, the table holds the average values for n V and δ PR .</s><s xml:id="_SsmSHPV" coords="18,329.33,425.24,201.97,10.38;18,80.70,437.20,49.03,10.38">Here, we observe signiicant diferences between repositories.</s><s xml:id="_7rzRMYs" coords="18,131.90,437.20,78.14,10.38">While in NuGet.org</s><s xml:id="_nKgCMPW" coords="18,212.20,437.20,319.10,10.38;18,80.70,449.15,63.99,10.38">only 0.5% of all artifacts are afected, in the NPM Registry this value is more than 32 times higher.</s><s xml:id="_eWjjeMb" coords="18,147.18,449.15,384.12,10.38;18,80.33,461.11,450.97,10.38;18,80.70,473.06,111.83,10.38">In addition to that, afected artifacts in NuGet.org on average have 1.3 vulnerable dependencies with published advisories, compared to 3.3 and 2.8 vulnerable dependencies per artifact in Maven Central and the NPM Registry, respectively.</s></p><p xml:id="_KabzHfG"><s xml:id="_uVPUtDd" coords="18,90.66,485.02,441.73,10.38;18,80.33,496.97,404.45,10.38">The average duration between vulnerability publication and artifact release ranges from 155 to 470 days, which implies that some maintainers use dependencies known to be vulnerable for well over a year.</s><s xml:id="_Dzc93qN" coords="18,487.28,496.97,44.21,10.38;18,80.70,508.93,242.40,11.24">We further investigate the distribution of those δ PR values in Figure <ref type="figure" coords="18,311.64,508.93,7.64,10.38" target="#fig_0">11</ref>.</s></p><p xml:id="_YeFgU2J"><s xml:id="_rJvxNWa" coords="18,90.66,520.88,177.05,10.38">The distribution of values in the NuGet.org</s><s xml:id="_PWAZC44" coords="18,270.21,520.88,237.64,10.38">repository most closely matches our general expectations.</s><s xml:id="_6yszvES" coords="18,510.34,520.88,22.05,10.38;18,80.70,532.84,450.86,10.38;18,80.70,544.79,130.23,10.38">Here, more than 90% of all artifacts have been released no longer than one year after vulnerability publication, and only 0.8% after more than two years.</s><s xml:id="_x6GCzSv" coords="18,213.41,544.79,317.89,11.23;18,80.70,556.75,164.56,10.38">In contrast to that, over 20% of all δ PR values for both Maven Central and the NPM Registry are greater than two years.</s><s xml:id="_FgJGBjF" coords="18,247.52,556.75,283.78,10.38;18,80.70,568.70,52.55,10.38">Compared to NuGet.org, the values for both repositories are distributed more evenly.</s><s xml:id="_WtUkfFb" coords="18,135.75,568.70,150.91,10.38">This may indicate that in NuGet.org,</s><s xml:id="_EBHPvCy" coords="18,289.16,568.70,242.14,10.38;18,80.70,580.66,221.41,10.38">compared to the other two repositories, security advisories have a more direct inluence on dependency upgrades.</s></p><p xml:id="_c2HPJzb"><s xml:id="_2xFPtGE" coords="18,84.09,601.01,450.89,9.54;18,84.09,612.97,108.73,9.54">In the NPM Registry, 16.25% of all artifacts are released with dependencies for which public security advisories are available.</s><s xml:id="_tMGbkyC" coords="18,196.08,612.97,340.39,9.54;18,84.09,624.92,82.08,9.54">This phenomenon also afects Maven Central (15.46%) but has a lesser impact on NuGet.org</s><s xml:id="_F84QdW9" coords="18,168.71,624.92,27.73,9.54">(0.5%).</s><s xml:id="_AeKC4Ty" coords="18,198.97,624.92,265.33,9.54">On average, afected artifacts have between 1.3 (NuGet.org)</s><s xml:id="_sGBssAD" coords="18,466.84,624.92,67.86,9.54;18,84.09,636.88,439.86,9.54">and 3.3 (Maven Central) such dependencies, which advisories being published for up to 470 days (Maven Central).</s></p><p xml:id="_MU4vaDx"><s xml:id="_aztJ7g4" coords="19,80.70,121.50,275.79,10.38">In this section, we discuss our analysis results and their implications.</s><s xml:id="_p9M4YFd" coords="19,358.99,121.50,172.31,10.38;19,80.70,133.46,452.14,10.38">We start by pointing out security risks that result from our indings and go on to derive possible mitigation strategies that may improve the current situation.</s></p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1" xml:id="_4uSeCsy">Security Risks</head><p xml:id="_RAdB2x4"><s xml:id="_bq4wZu3" coords="19,80.70,170.32,452.14,10.38">Based on our analysis results presented in Section 5.3, we identify a set of potential threats for software security.</s><s xml:id="_mvDYX7Y" coords="19,80.22,182.27,203.68,10.38">We present this set, which we name T, in Table <ref type="table" coords="19,276.99,182.27,3.46,10.38" target="#tab_11">6</ref>.</s><s xml:id="_t9g6ADg" coords="19,286.40,182.27,244.91,10.38;19,80.70,194.23,353.27,10.38">In the following paragraphs, we highlight the core issues of each member of the set T, and present empirical evidence found in the analysis results.</s></p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head xml:id="_UAdGE63">Id Name</head><p xml:id="_Xz2aZgA"><s xml:id="_7qCTYgr" coords="19,320.20,219.06,30.20,9.54;19,90.66,333.71,441.74,10.38;19,80.70,345.66,288.37,11.23">Maven As part of our analysis for RQ1, we found that while most patches are released before vulnerability publication, a non-negligible amount of over 25% is in fact released afterwards (T 1 ).</s><s xml:id="_qvSrMTn" coords="19,371.56,345.66,159.75,10.38;19,80.70,357.62,430.48,10.38">This implies that for a certain period of time, software libraries were publicly known to be vulnerable, making them a prime target for exploitation.</s><s xml:id="_UhvEy87" coords="19,513.67,357.62,17.62,10.38;19,80.70,369.57,450.61,10.38;19,80.40,381.53,23.74,10.38">This threat is most pronounced for Maven Central (29%) and the NPM Registry (23%), but also applies to NuGet.org (13%).</s></p><p xml:id="_B6EpA6n"><s xml:id="_EgbtVHg" coords="19,90.66,393.48,440.64,10.38;19,80.70,405.44,450.86,10.38;19,80.70,417.40,139.79,11.23">The propagation of vulnerabilities along transitive dependency chains leads to an exponentially growing number of artifacts potentially afected and makes it increasingly hard to decide whether vulnerabilities apply to a speciic software artifact (T 2 ).</s><s xml:id="_UGX5bXp" coords="19,222.96,417.40,308.34,10.38;19,80.70,429.35,266.01,10.38">In our results for RQ2, we found that vulnerability impact chains in Maven Central are substantially longer than in the other two repositories.</s><s xml:id="_7qnf78R" coords="19,349.20,429.35,126.97,10.38">This is true both on average (cf.</s><s xml:id="_eNw8MwB" coords="19,478.67,429.35,52.64,10.38;19,80.70,441.31,66.02,10.38">Figure <ref type="figure" coords="19,506.60,429.35,3.74,10.38">8</ref>) and at maximum (cf.</s><s xml:id="_r8WVqXm" coords="19,149.21,441.31,34.27,10.38">Table <ref type="table" coords="19,173.69,441.31,3.26,10.38" target="#tab_8">3</ref>).</s><s xml:id="_UJYgj3y" coords="19,185.98,441.31,345.33,10.38;19,80.70,453.26,406.39,10.38">Furthermore, the amount of Maven artifacts transitively afected by a vulnerability is over 750 times higher than for the NPM Registry, and almost 6,000 times higher than for NuGet.org.</s></p><p xml:id="_Gp3ZVwK"><s xml:id="_ZrMEXYx" coords="19,90.66,465.22,299.59,10.38">As part of our results for RQ3, we found that between 1.16% (NuGet.org)</s><s xml:id="_vsTaj4U" coords="19,392.75,465.22,138.56,10.38;19,80.70,477.17,353.95,10.38">and 28.97% (Maven Central) of all repository libraries have at one point been afected by vulnerable direct dependencies.</s><s xml:id="_gkTkJmy" coords="19,437.15,477.17,94.15,10.38;19,80.70,489.13,450.61,10.38;19,80.70,501.08,130.39,10.38">A further classiication discovered that, out of all afected libraries, between 60% and 66% did not upgrade any of those vulnerable dependencies at all (cf. Figure <ref type="figure" coords="19,201.49,501.08,3.20,10.38" target="#fig_7">9</ref>).</s><s xml:id="_4WTmuvT" coords="19,213.58,501.08,317.98,10.38;19,80.70,513.04,355.98,10.38">As a result, from 0.7% (NuGet.org) up to 17.4% (Maven Central) of all repository libraries have potentially multiple vulnerable dependencies that have not been upgraded.</s><s xml:id="_qfH5AcZ" coords="19,439.18,513.04,92.32,10.38;19,80.70,524.99,450.60,11.24;19,80.70,536.95,166.92,10.38">This fact poses a major security threat (T 3 ), as consumers of those libraries may not be aware of the vulnerable dependencies, and do not expect the latest release to be vulnerable.</s></p><p xml:id="_cNjGJfK"><s xml:id="_88CtGRP" coords="19,90.66,548.90,440.90,10.38;19,80.70,560.86,450.86,10.38;19,80.40,572.81,56.14,10.38">When analyzing the distribution of upgrade durations for RQ3, we found that the publication of a vulnerability seems to trigger an immediate dependency upgrade for some libraries in Maven Central and the NPM Registry (cf. Figure <ref type="figure" coords="19,122.40,572.81,7.07,10.38" target="#fig_8">10</ref>).</s><s xml:id="_4gAjXTv" coords="19,138.81,572.81,393.59,10.38;19,80.70,584.77,89.69,10.38">This indicates that some library maintainers may be actively monitoring vulnerability publications, and respond if needed.</s><s xml:id="_JedkfpC" coords="19,172.62,584.77,314.75,10.38">However, we found no evidence for the same kind of behavior in the NuGet.org</s><s xml:id="_Zrpu4Zd" coords="19,489.60,584.77,42.80,10.38;19,80.70,596.72,349.82,11.24">repository, meaning that vulnerable dependencies may afect artifacts longer than necessary (T 4 ).</s></p><p xml:id="_jRAVB9Y"><s xml:id="_shgrBKP" coords="19,90.66,608.68,440.83,10.38;19,80.33,620.63,320.94,10.38">During the previous analysis for RQ4 we found that some software artifacts use vulnerable dependencies, for which the respective vulnerability has been published before the artifact release.</s><s xml:id="_HKADgvV" coords="19,403.76,620.63,127.54,10.38;19,80.70,632.59,332.62,10.38">This implies that developers did either not consult or deliberately ignore public security advisories like the CVE list.</s><s xml:id="_bkRqtED" coords="19,415.78,632.59,115.52,10.38;19,80.70,644.54,450.86,10.38;20,80.70,106.56,360.87,11.24">As a result, consumers of the corresponding repositories can not even rely on new releases of a library to be vulnerability-free, which may lead to a false sense of security when upgrading dependencies to the latest release (T 5 ).</s><s xml:id="_RaHf6va" coords="20,444.09,106.56,88.31,10.38;20,80.70,118.52,450.60,10.38;20,80.70,130.47,374.33,10.38">According to Table <ref type="table" coords="20,525.44,106.56,3.48,10.38" target="#tab_10">5</ref>, this issue afects artifacts in all three repositories, but is most pronounced for the NPM Registry (16.25% of all artifacts) and Maven Central (15.46%), while only afecting 0.5% of all artifacts in NuGet.org.</s></p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2" xml:id="_4MKgpc9">Mitigation Strategies</head><p xml:id="_KJcWARq"><s xml:id="_4UXqYNj" coords="20,80.35,168.46,450.96,10.38;20,80.70,180.42,419.27,10.38">As a inal contribution of our work, in this section, we present a set of mitigation strategies for maintainers and consumers of all three repositories, which aim to mitigate the threats presented in the previous section.</s><s xml:id="_KaXDyDa" coords="20,502.47,180.42,29.06,10.38;20,80.70,192.37,428.07,10.38">Table <ref type="table" coords="20,526.91,180.42,4.62,10.38" target="#tab_12">7</ref> presents the set of strategies, which we call S, alongside the corresponding threats and the target audience.</s><s xml:id="_JkztYqC" coords="20,511.26,192.37,20.05,10.38;20,80.70,204.33,339.14,10.38">Most of the strategies presented here are well-known in software engineering research.</s><s xml:id="_afeemA9" coords="20,422.40,204.33,108.90,10.38;20,80.70,216.28,450.80,10.38;20,80.70,228.24,30.97,10.38">However, here we provide justiication for their usefulness, as we link them to threats that we observed based on empirical indings in our dataset.</s></p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head xml:id="_3YaEQ6v">Id Name</head><p xml:id="_jnKA4UX"><s xml:id="_cg9zQnk" coords="20,340.83,254.29,34.58,9.54;20,90.66,372.41,442.32,11.24;20,80.70,384.36,189.53,10.38">Threats Threat T 1 refers to a substantial amount of library maintainers releasing patches a long time after the corresponding vulnerability has been published.</s><s xml:id="_bCFwSHa" coords="20,273.54,384.36,257.76,11.24;20,80.45,396.32,294.55,10.38">Furthermore, T 4 points out that maintainers of libraries with vulnerable dependencies do not act upon the vulnerability's publication.</s><s xml:id="_PUkj92v" coords="20,377.51,396.32,153.79,10.38;20,80.70,408.27,386.57,10.38">As a result, there are artifacts that are subject to publicly known vulnerabilities without a patch being available in all three repositories.</s><s xml:id="_xj4B23p" coords="20,469.66,408.27,61.65,10.38;20,80.70,420.23,450.61,11.23;20,80.70,432.18,450.79,10.38;20,80.33,444.14,123.83,10.38">An easy way of mitigating this risk is to closely and actively monitor the publication of vulnerabilities (S 1 ), so that maintainers can immediately upgrade the respective dependency or start implementing a patch, thus reducing the time for which an artifact is vulnerable.</s><s xml:id="_f4wSHah" coords="20,206.66,444.14,326.17,10.38">There are multiple ways to automatically monitor new vulnerability publications.</s><s xml:id="_QHbAhvb" coords="20,80.40,456.09,330.13,10.38;20,410.53,454.64,6.76,7.58;20,417.79,456.09,113.51,10.38;20,80.70,468.05,141.70,10.38;20,222.40,466.59,6.76,7.58;20,229.66,468.05,2.15,10.38">The NVD provides an RSS feed on the latest vulnerabilities that have been analyzed <ref type="foot" coords="20,410.53,454.64,6.76,7.58" target="#foot_14">14</ref> , and the MITRE corporation does the same on their Twitter feed <ref type="foot" coords="20,222.40,466.59,6.76,7.58" target="#foot_15">15</ref> .</s><s xml:id="_CgDxkF8" coords="20,234.31,468.05,297.26,10.38;20,80.70,480.00,452.14,10.38">Developers may also be informed about vulnerabilities in dependencies by the use of tools for dependency monitoring, which are regularly updated with the latest set of vulnerabilities.</s><s xml:id="_qQB2QQh" coords="20,80.70,491.96,346.73,10.38">Examples include the services provided by Snyk, as well as the npm audit command.</s></p><p xml:id="_uAKAUkX"><s xml:id="_G88Wtbu" coords="20,90.66,503.91,440.64,11.24;20,80.70,515.87,401.73,10.38">While adhering to strategy S 1 reduces the time of exposure to published vulnerabilities signiicantly, it is still likely to take library maintainers a couple of days or weeks to develop a patch and release it.</s><s xml:id="_WByFjBJ" coords="20,484.96,515.87,46.34,10.38;20,80.70,527.82,450.60,11.24;20,80.70,539.78,450.60,10.38;20,80.70,551.74,307.59,11.23">In an efort to further reduce this time, and therefore minimize the risk imposed by threat T 1 , maintainers may encourage members of the open-source community to ind and report security vulnerabilities on their own, thus increasing the chances of discovering vulnerabilities before their oicial publication (S 2 ).</s><s xml:id="_PGwDNkR" coords="20,390.43,551.60,140.88,10.52;20,80.70,563.55,450.61,10.52;20,80.70,575.65,109.95,10.38">Such initiatives are often called Bug Bounty Programs and are already ofered by a variety of corporations and institutions, including Microsoft <ref type="bibr" coords="20,514.93,563.69,16.37,10.38" target="#b27">[27]</ref> and the U.S. Pentagon <ref type="bibr" coords="20,172.14,575.65,14.80,10.38" target="#b16">[17]</ref>.</s><s xml:id="_Mtzz6br" coords="20,193.14,575.65,338.42,10.38;20,80.70,587.60,450.60,10.38;20,80.70,599.56,200.20,10.38">While for large corporations these programs often include incentives like monetary rewards, smaller groups of library maintainers may still be able to ofer some sort of reward, which may even be an honorable mention in the library description.</s><s xml:id="_e3mKqEG" coords="20,283.46,599.56,248.04,11.24;20,80.70,611.51,407.52,10.38">It must be noted that both S 1 and S 2 can only be applied for libraries that are still being actively maintained, as opposed to libraries that have been discontinued.</s></p><p xml:id="_Cd4uCFa"><s xml:id="_5Rb6HAv" coords="21,90.66,106.56,440.91,11.24;21,80.70,118.52,189.03,10.38">Strategy S 1 already suggested the usage of automated tools for dependency monitoring, which helps library maintainers monitor vulnerability publications.</s><s xml:id="_Tmtpbca" coords="21,272.20,118.52,259.10,10.38;21,80.70,130.47,339.17,11.23">In fact, this strategy also applies to regular repository consumers and has the potential to mitigate several risks identiied in the previous section (S 3 ).</s><s xml:id="_XZyekxE" coords="21,422.35,130.47,108.95,10.38;21,80.70,142.43,451.70,10.38;21,80.70,154.38,273.00,10.38">As those tools can often be integrated into a CI worklow, they inform library maintainers about vulnerable dependencies on every commit, making it efectively impossible to not be aware of their existence.</s><s xml:id="_V4zVkgg" coords="21,356.18,154.38,175.12,11.23;21,80.70,166.34,116.32,11.24">Therefore, the risks imposed by T 2 , T 3 and T 5 are reduced substantially.</s><s xml:id="_WW95w7e" coords="21,199.49,166.34,331.81,10.38;21,80.70,178.29,359.86,10.38">Furthermore, the usage of automated tools for detecting vulnerable dependencies may result in repository consumers preferring more secure libraries for their projects.</s><s xml:id="_PRjMsmg" coords="21,443.43,178.29,87.87,10.38;21,80.70,190.25,450.60,10.38;21,80.70,202.20,98.17,10.38">The more consumers show an obvious interest in security, the more likely library developers are to shift their development focus on security-related aspects.</s></p><p xml:id="_nCKd3xb"><s xml:id="_VUeCnxn" coords="21,90.66,214.16,440.64,10.38;21,80.45,226.11,452.53,11.23;21,80.70,238.07,85.69,10.38">Due to the larger amount of artifacts being released despite their dependencies being afected by published vulnerabilities, as implied by T 5 , strategy S 4 encourages library maintainers to inspect all their library's dependencies on every release.</s><s xml:id="_cqNB8jz" coords="21,168.87,238.07,362.43,10.38;21,80.70,250.02,158.44,10.38">By establishing a deined process of doing so, the risk of unintentionally using vulnerable dependencies is efectively eliminated.</s><s xml:id="_sWy9BhX" coords="21,241.64,250.02,289.66,10.38;21,80.70,261.98,86.93,11.23">Ideally, this process is automated by making use of similar tools to the ones discussed for S 3 .</s><s xml:id="_huGnZbA" coords="21,170.13,261.98,362.26,10.38;21,80.70,273.93,450.61,10.38;21,80.70,285.89,178.28,10.38">While maintainers may still intentionally decide to keep vulnerabilities for a given release, this guideline assures that at least one developer has evaluated the resulting risk and decided that it does not have a critical impact on library consumers.</s></p><p xml:id="_TdTfcE3"><s xml:id="_vyHzpHt" coords="21,90.66,297.84,440.64,11.23;21,80.70,309.80,213.39,10.38">The impact of threat T 2 is directly correlated to the density of the corresponding dependency graph, and therefore to the number of dependencies per artifact.</s><s xml:id="_X7HhVhY" coords="21,296.58,309.80,234.72,10.38;21,80.70,321.75,256.97,11.24">Consequently, the impact may be reduced by reducing the average number of dependencies for each software library (S 5 ).</s><s xml:id="_5PcmaMu" coords="21,340.15,321.75,191.40,10.38;21,80.70,333.71,452.14,10.38">A similar argument can be made for repository consumers, where the number of potential security threats is directly linked to the number of project dependencies.</s><s xml:id="_YTj2FpY" coords="21,80.22,345.66,451.09,10.38;21,80.70,357.62,393.55,10.38">While it is a rather simple task to remove redundant dependencies from an application or library, replacing those that are actually used can only be achieved by implementing the desired functionality from scratch.</s><s xml:id="_eqBQZRP" coords="21,476.47,357.62,54.83,10.38;21,80.33,369.57,395.74,10.38">However, this would be in stark contrast to the concept of software reuse, which has been proven to be efective.</s><s xml:id="_uzx8kst" coords="21,478.56,369.57,53.84,10.38;21,80.70,381.53,452.14,10.38">Nevertheless, especially in the NPM Registry, some of the libraries are small enough to be replaced by a single function deinition.</s><s xml:id="_SFqPwYY" coords="21,80.70,393.48,450.61,10.38;21,80.70,405.44,265.24,10.38">Examples include libraries like array-first, which provides a single function for returning the irst n elements of an array, or to-capital-case, which capitalizes a string value.</s><s xml:id="_qJhnGVM" coords="21,348.38,405.44,182.92,10.38;21,80.70,417.40,333.37,10.38">These examples illustrate that in some cases a trade-of between software reuse and potential security risks must be considered.</s><s xml:id="_m4CZADa" coords="21,416.56,417.40,114.74,10.38;21,80.70,429.35,450.61,10.38;21,80.70,441.31,450.60,10.38;21,80.70,453.26,150.35,10.38">This has also been observed in a 2020 study on the use of trivial packages by Abdalkareem et al. <ref type="bibr" coords="21,359.57,429.35,10.50,10.38" target="#b0">[1]</ref>, where the authors observe that trivial packages make up between 10.5% and 16% of PyPI and the Npm Registry, despite the fact that up to 72% of such packages to not incorporate any tests.</s><s xml:id="_5gvxUwW" coords="21,233.34,453.26,297.97,10.38;21,80.70,465.08,358.08,10.52">Similarly, Soto-Valero et al. ind that many dependencies in public software artifacts are actually unused, and present a tool called DepClean to tackle this issue <ref type="bibr" coords="21,420.23,465.22,14.84,10.38" target="#b40">[41]</ref>.</s></p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7" xml:id="_eWpqgn8">THREATS TO VALIDITY</head><p xml:id="_vT8757u"><s xml:id="_GFsQTh3" coords="21,80.70,504.07,450.60,10.38;21,80.70,516.03,71.02,10.38">In this section, we present possible threats to the validity of our work, and how we chose to mitigate them as much as possible.</s></p><p xml:id="_rTVsn2J"><s xml:id="_BCAuakK" coords="21,80.70,537.36,74.92,8.96">Construct Validity.</s><s xml:id="_twvx5KS" coords="21,159.11,535.95,372.20,10.38;21,80.70,547.90,237.12,10.38">In our analyses for RQ2, RQ3, and RQ4, we investigate metrics that involve vulnerabilities afecting (transitive) dependencies of a software artifact.</s><s xml:id="_hQaW4VB" coords="21,320.97,547.77,210.33,10.52;21,80.45,559.72,329.79,10.52">It must be noted, that the mere presence of such a vulnerable dependency does not imply that the vulnerability applies to the artifact.</s><s xml:id="_JH9Uu57" coords="21,412.70,559.86,118.61,10.38;21,80.33,571.68,450.97,10.52;21,80.70,583.77,195.53,10.38">In fact, researchers associated with the FASTEN Project propose to use method-level call graph analysis to decide whether or not vulnerabilities in dependencies actually apply to a project <ref type="bibr" coords="21,257.64,583.77,14.87,10.38">[31]</ref>.</s><s xml:id="_xMUgdjh" coords="21,278.71,583.63,252.59,10.52;21,80.70,595.73,450.61,10.38;21,80.70,607.68,258.85,10.38">They argue that analyzing vulnerabilities on the package-level leads to false positives, and therefore wastes development resources, which is also supported by the indings of an empirical study conducted by <ref type="bibr" coords="21,232.40,607.68,103.40,10.38">Zapata et al. in 2018 [13]</ref>.</s><s xml:id="_xwECEjQ" coords="21,342.63,607.68,188.68,10.38;21,80.70,619.64,324.94,10.38">However, the indings of this project are still preliminary and have yet to be implemented for entire software ecosystems <ref type="bibr" coords="21,391.69,619.64,10.46,10.38" target="#b5">[6]</ref>.</s><s xml:id="_WvKBg3V" coords="21,408.12,619.64,123.18,10.38;21,80.45,631.59,450.85,10.38;21,80.70,643.55,151.53,10.38">On the other hand, sometimes vulnerabilities in dependencies can be exploited simply because the corresponding code is on the classpath, as shown by Lawrence and Frohof <ref type="bibr" coords="21,213.73,643.55,14.80,10.38" target="#b20">[21]</ref>.</s><s xml:id="_HmkQv9w" coords="21,234.72,643.55,296.58,10.38;22,80.70,106.56,450.61,10.38;22,80.70,118.52,245.15,10.38">As our analysis handles vulnerabilities on the package level, we note that our indings generally have to be considered an overapproximation, which may be reined by incorporating precise call graph information for each artifact in the future.</s></p><p xml:id="_hAxwn4g"><s xml:id="_acgfAyf" coords="22,80.70,138.97,66.76,8.96">Internal Validity.</s><s xml:id="_2yvFRnz" coords="22,150.94,137.56,380.36,10.38;22,80.70,149.51,452.29,10.38;22,80.70,161.47,34.53,10.38">As mentioned in Section 5.2, our algorithm for dependency resolving supports two modes of execution, yielding either all valid targets (overapproximation) or the most recent valid target (underapproximation).</s><s xml:id="_3gvVHpU" coords="22,117.71,161.47,413.78,10.38;22,80.70,173.42,206.86,10.38">As package managers only refrain from using the most recent target in case of version conlicts, our analysis results have been obtained using the latter.</s><s xml:id="_Wqbrk3X" coords="22,290.07,173.42,241.24,10.38;22,80.70,185.38,249.94,10.38">Therefore, there might be some dependency paths that have not been counted towards our results for RQ2, RQ3, and RQ4.</s></p><p xml:id="_wCJaDSy"><s xml:id="_KVq75EZ" coords="22,90.66,197.33,440.64,10.38;22,80.70,209.29,300.32,10.38">For the threats presented in Section 7 we often assume that not being aware of vulnerabilities in dependencies is a major reason for not performing an upgrade or not releasing a patch.</s><s xml:id="_xMFcV3t" coords="22,383.49,209.29,148.00,10.38;22,80.70,221.24,450.60,10.38;22,80.45,233.20,237.59,10.38">However, there may in fact be other reasons involved in this decision, for example, libraries may not prioritize ixes, or maintainers may decide that vulnerabilities do not apply to their speciic usage scenario.</s><s xml:id="_e4cWSZK" coords="22,320.52,233.20,210.98,10.38;22,80.70,245.15,243.65,10.38">Further investigations need to be performed in order to identify those reasons and their relevance in this context.</s></p><p xml:id="_c69wr6W"><s xml:id="_MnEKTjA" coords="22,90.66,257.11,328.64,10.38">We rely on the correctness of the Synk dataset we use throughout the analysis.</s><s xml:id="_MkpZNxz" coords="22,421.95,257.11,109.62,10.38;22,80.45,269.06,450.85,10.38;22,80.70,281.02,53.36,10.38">As the dataset is manually veriied in a structured process and includes oicial data from the NVD, we think we can safely assume the data to be correct.</s></p><p xml:id="_Brhh8jk"><s xml:id="_ecGgN4W" coords="22,80.70,301.47,67.32,8.96">External Validity.</s><s xml:id="_bbuRWpv" coords="22,151.50,299.92,380.89,10.52;22,80.70,312.01,71.22,10.38">We used vulnerability data that is the intellectual property of Snyk Ltd. and can, consequently, not be published.</s><s xml:id="_PJMY8Ze" coords="22,154.52,312.01,376.96,10.38;22,80.70,323.97,205.23,10.38">Therefore, others can not reproduce our analysis, as we are only able to make our tools for generating dependency graphs publicly available.</s><s xml:id="_uQDNWCg" coords="22,288.51,323.97,242.80,10.38;22,80.70,335.92,397.36,10.38">We chose this approach as the data provided by Snyk both contains more vulnerabilities than sources like the NVD, and is manually veriied to be correct.</s><s xml:id="_azZpAzm" coords="22,480.82,335.92,50.48,10.38;22,80.70,347.88,294.72,10.38">We strive to include open vulnerability sources and repeat our analysis in the future.</s><s xml:id="_ds6yyYp" coords="22,377.90,347.88,153.41,10.38;22,80.70,359.83,355.48,10.38">In the meantime, interested researchs may of course obtain the vulnerability data through the same oicial channels we used.</s></p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head xml:id="_5U8cSWT">Conclusion Validity.</head><p xml:id="_22VZTS6"><s xml:id="_6kNQeS6" coords="22,163.51,378.87,277.22,10.38">As many of our analysis metrics imply, artifacts from the NuGet.org</s><s xml:id="_VuvDYpY" coords="22,443.23,378.87,88.08,10.38;22,80.70,390.83,384.32,10.38">repository seem to be somehow less afected by vulnerabilities compared to the NPM Registry and Maven Central.</s><s xml:id="_brs4ct6" coords="22,467.73,390.83,63.83,10.38;22,80.70,402.78,450.61,10.38;22,80.70,414.74,152.51,10.38">While this may be an indication of better processes and awareness by the respective developers, it may also be a result of the size and popularity of the repository.</s><s xml:id="_XWbDEKm" coords="22,235.71,414.74,295.60,10.38;22,80.70,426.69,450.61,10.38;22,80.70,438.65,225.49,10.38">Out of the three repositories observed in this work, NuGet.org has both the least amount of artifacts and the fewest downloads per week, which may lead to fewer vulnerabilities being introduced, and fewer vulnerabilities being discovered.</s><s xml:id="_cN4D6QR" coords="22,308.67,438.65,222.62,10.38;22,80.70,450.60,450.61,10.38;22,80.70,462.56,91.31,10.38">While we normalized our measures to include the size of repositories where applicable, further analysis is necessary to identify the efects of repository size onto the behavior we observed.</s></p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8" xml:id="_r5UVcS6">RELATED WORK</head><p xml:id="_T8u2ENn"><s xml:id="_Xd2gzxR" coords="22,80.70,500.53,450.61,10.38;22,80.70,512.48,51.76,10.38">Dependencies between software artifacts for certain software systems have been the topic of a variety of publications.</s><s xml:id="_wQFv5sa" coords="22,134.93,512.48,397.47,10.38;22,80.70,524.44,159.07,10.38">Furthermore, many researchers have analyzed the impact and lifecycle of software vulnerabilities, as well as possible mitigation strategies.</s><s xml:id="_9y78a27" coords="22,242.18,524.44,290.66,10.38">In this section, we present the most prominent examples of related work.</s></p><p xml:id="_t7yRwD9"><s xml:id="_zDPkc6p" coords="22,90.66,536.39,442.17,10.38">In <ref type="bibr" coords="22,101.58,536.39,10.49,10.38" target="#b3">[4]</ref>, Benelallam et al. present a snapshot of the Maven Central dependency graph as of September 6, 2018.</s><s xml:id="_qt32ZGC" coords="22,80.40,548.21,452.00,10.52;22,80.70,560.30,418.95,10.38">The authors implemented a tool called Maven Miner, which processes artifacts from the Maven Central repository, calculates their dependencies and creates a graph representation that is stored in a Neo4J graph database.</s><s xml:id="_SmhtCYe" coords="22,502.05,560.30,29.44,10.38;22,80.33,572.26,450.97,10.38;22,80.70,584.21,67.55,10.38">For our work, we initially used the Maven Miner to gather an up-to-date version of the dependency graph, but failed to do so in time (cf.</s><s xml:id="_Sc5B9rm" coords="22,150.73,584.21,49.00,10.38">Section 4.3).</s></p><p xml:id="_ysNZyRh"><s xml:id="_EwCkrt9" coords="22,90.66,596.17,440.64,10.38;22,80.70,608.12,54.60,10.38">In 2018, Decan et al. performed an empirical study on the impact of software vulnerabilities in the NPM Registry <ref type="bibr" coords="22,116.84,608.12,14.77,10.38" target="#b9">[10]</ref>.</s><s xml:id="_JRErXYH" coords="22,137.79,607.98,393.52,10.52;22,80.70,619.94,278.22,10.52">Based on 700 vulnerabilities, which the authors manually gathered from Snyk.io, they computed a set of afected package releases using the online service at libraries.io.</s><s xml:id="_2P4MJuj" coords="22,361.40,620.08,169.90,10.38;22,80.70,632.03,450.61,10.38;22,80.70,643.99,256.35,10.38">Among other things, the authors observed an ever-growing number of vulnerabilities and afected package releases over time, with more pronounced rates of growth for medium and high severity vulnerabilities.</s><s xml:id="_CYrXwkw" coords="22,339.97,643.99,191.34,10.38;23,80.70,106.56,151.93,10.38">A similar observation is made for commercial applications by Mike Pittenger in <ref type="bibr" coords="23,214.27,106.56,14.69,10.38" target="#b34">[35]</ref>.</s><s xml:id="_rRbckEQ" coords="23,234.78,106.56,296.72,10.38;23,80.45,118.52,365.75,10.38">Decan et al. also analyzed the time it takes package maintainers to discover vulnerabilities, and report that the majority was found in packages older than 28 months.</s><s xml:id="_jtVJEyr" coords="23,448.69,118.52,83.71,10.38;23,80.70,130.33,450.61,10.52;23,80.70,142.29,243.51,10.52">Similar to this work, the authors found that most vulnerabilities are patched before their publication, but there "is still a non-negligible proportion of vulnerabilities that take a long time to be ixed."</s><s xml:id="_Wh23UNy" coords="23,326.69,142.43,18.55,10.38"><ref type="bibr" coords="23,326.69,142.43,14.84,10.38" target="#b9">[10]</ref>.</s></p><p xml:id="_4DnCctM"><s xml:id="_umH4Kka" coords="23,90.66,154.38,440.65,10.38;23,80.70,166.34,432.14,10.38">Bavota et al. performed an in-depth study on 147 Java projects of the Apache ecosystem in 2015 <ref type="bibr" coords="23,479.51,154.38,10.38,10.38" target="#b2">[3]</ref>, in which they analyze how and why the dependencies between projects are upgraded, left unchanged, or dropped.</s><s xml:id="_pBYy2Yb" coords="23,515.33,166.34,15.97,10.38;23,80.70,178.29,450.61,10.38;23,80.70,190.25,274.91,10.38">The authors evaluate the inluence of the client project size, the number of LOC changed in the library project, the number of bugs ixed, and other factors on the upgrade behavior.</s><s xml:id="_UAC3qnV" coords="23,358.67,190.25,172.63,10.38;23,80.70,202.20,450.80,10.38;23,80.70,214.16,83.39,10.38">They ind that substantial changes to the library project, especially bug ixes, are adopted earliest, which matched the authors' observations in developer communications (eg.</s><s xml:id="_zQTTgNw" coords="23,166.57,214.16,68.70,10.38">via mailing lists).</s><s xml:id="_Y9zV5a5" coords="23,237.73,214.16,293.57,10.38;23,80.70,226.11,291.65,10.38">Similarly, a 2021 empirical study conducted by Chinthanet et al. analyzes the adoption of vulnerability-related ixes in NPM projects on GitHub <ref type="bibr" coords="23,358.61,226.11,10.30,10.38" target="#b6">[7]</ref>.</s><s xml:id="_4Bcjw99" coords="23,374.54,225.97,156.76,10.52;23,80.70,237.93,450.86,10.52;23,80.70,250.02,281.71,10.38">By inspection of 231 package-side ixing releases, the authors ind that such releases consist of up to 86% code unrelated to the actual ix, and that quick availability of ixes does not ensure a fast adoption process by clients.</s><s xml:id="_RykHASp" coords="23,364.90,250.02,166.41,10.38;23,80.70,261.98,450.61,10.38;23,80.70,273.79,364.80,10.52">Nevertheless, a 2019 study by Gkortzis et al. inds evidence for an inverse correlation between code reuse and the number of vulnerabilities, which seems to indicate that ł[...] a high reuse ratio is associated with a lower vulnerability densitył <ref type="bibr" coords="23,426.94,273.93,14.84,10.38" target="#b15">[16]</ref>.</s></p><p xml:id="_yewzpfq"><s xml:id="_86ZfF5D" coords="23,90.66,285.89,429.97,10.38">A 2017 study by Kula et al. analyzes the dependency upgrade behavior of software developers in detail <ref type="bibr" coords="23,502.27,285.89,14.69,10.38" target="#b19">[20]</ref>.</s><s xml:id="_aSXwP3a" coords="23,523.11,285.89,8.19,10.38;23,80.70,297.84,428.52,10.38">In an empirical study, the authors collected 4,600 Java projects that are using Maven dependencies from GitHub.</s><s xml:id="_HGSSWS7" coords="23,511.15,297.84,20.41,10.38;23,80.70,309.80,450.60,10.38;23,80.70,321.75,168.65,10.38">They found that while developers heavily rely on third-party libraries, they do not often upgrade their dependencies and tend to stick to popular old releases.</s><s xml:id="_dT4pvJ7" coords="23,252.04,321.75,279.27,10.38;23,80.70,333.57,337.41,10.52">An additional case study revealed that Awareness Mechanisms like Release Announcements and Security Advisories have a mixed inluence on developers.</s><s xml:id="_qUKjsmF" coords="23,420.32,333.71,110.98,10.38;23,80.70,345.66,338.10,10.38">The likelihood of upgrading a library dependency is observed to be decreasing with increasing migration efort.</s><s xml:id="_jwap2PG" coords="23,421.28,345.66,110.02,10.38;23,80.70,357.62,452.14,10.38">A subsequent interviewing process revealed that almost 70% of all developers were unaware of a vulnerable dependency in their project.</s><s xml:id="_G4P4Dzj" coords="23,80.40,369.57,451.10,10.38;23,80.70,381.53,382.76,10.38">The other 30% named mostly project-speciic reasons for which a dependency upgrade was not performed or not prioritized, eg. because the developers found that it does not actually apply to the project.</s><s xml:id="_CfEdnAH" coords="23,465.96,381.53,65.35,10.38;23,80.70,393.48,450.61,10.38;23,80.70,405.44,450.86,10.38;23,80.70,417.40,212.81,10.38">This intuition is conirmed in a 2018 study conducted on 60 NPM projects by Zapata et al., which inds that as much as 73.3% of such vulnerable dependencies may not actually apply to a project, concluding that package-level vulnerability analysis leads to signiicant overapproximation <ref type="bibr" coords="23,274.96,417.40,14.84,10.38" target="#b12">[13]</ref>.</s></p><p xml:id="_kxNTPw3"><s xml:id="_48mKsgx" coords="23,90.66,429.35,442.33,10.38;23,80.70,441.31,53.08,10.38">In 2018, Jukka Ruohonen published an analysis on vulnerabilities in Python packages that target web development <ref type="bibr" coords="23,115.04,441.31,14.99,10.38" target="#b38">[39]</ref>.</s><s xml:id="_RvqEn74" coords="23,136.44,441.17,344.22,10.52;23,480.71,439.85,6.76,7.58;23,487.97,441.31,43.33,10.38;23,80.70,453.26,168.94,10.38">The base data is collected from the Python Package Index (PyPI) and the Safety DB <ref type="foot" coords="23,480.71,439.85,6.76,7.58" target="#foot_16">16</ref> , a curated list of vulnerabilities in Python packages.</s><s xml:id="_Hr96qcp" coords="23,252.13,453.26,279.18,10.38;23,80.70,465.22,347.58,10.38">The author argues that, while often used in scientiic work, the CVE list of vulnerabilities does often not include smaller libraries or lesser-known exploits.</s><s xml:id="_TVeY2Mr" coords="23,430.76,465.22,100.55,10.38;23,80.70,477.17,450.60,10.38;23,80.70,488.99,255.67,10.52">A subsequent analysis of packages related to web development showed that most vulnerabilities in the data set are of mild severity, with Input Validation and XSS being the most common attack vectors.</s><s xml:id="_ntnEhMN" coords="23,338.67,489.13,192.63,10.38;23,80.70,501.08,313.19,10.38">A inal conclusion states that a more meaningful analysis would have to take the dependencies between artifacts into account.</s></p><p xml:id="_e7FVneG"><s xml:id="_BWKxSe9" coords="23,90.66,513.04,442.17,10.38">Ponta et al. <ref type="bibr" coords="23,135.45,513.04,16.22,10.38" target="#b35">[36]</ref> present a novel approach to detect whether or not a software artifact is afected by a vulnerability.</s><s xml:id="_DmXXTYB" coords="23,80.70,524.99,167.80,10.38">Instead of consuming metadata iles (eg.</s><s xml:id="_e432phF" coords="23,251.32,524.85,279.98,10.52;23,80.70,536.81,452.13,10.52">pom.xml), their tool Vulas combines static and dynamic analyses to decide whether or not the actual vulnerable code construct (eg. a method) is reachable from the analyzed artifact.</s><s xml:id="_ymBkJh2" coords="23,80.40,548.76,450.90,10.52;23,80.70,560.86,232.51,10.38">This way, the number of false positives is reduced and the intuition of vulnerabilities not applying in certain contexts, as reported by Kula et al. in <ref type="bibr" coords="23,236.45,560.86,14.97,10.38" target="#b19">[20]</ref>, is formalized.</s><s xml:id="_VnXsdnG" coords="23,315.69,560.86,215.61,10.38;23,80.70,572.81,359.81,10.38">In their latest publication <ref type="bibr" coords="23,422.69,560.86,14.97,10.38" target="#b36">[37]</ref>, Ponta et al. report on the current state of Vulas, and perform a comparative study on 300 enterprise projects.</s><s xml:id="_4pU9evz" coords="23,443.06,572.67,88.25,10.52;23,80.70,584.63,450.60,10.52;23,80.70,596.72,364.04,10.38">Compared to OWASP Dependency Check (OWASP DC), their tool identiied about 1800 additional true positive indings, whereas almost 89% of 17000 vulnerabilities only reported by OWASP DC turned out to be false positives.</s></p><p xml:id="_9NGKYhn"><s xml:id="_m4tAEKm" coords="23,90.66,608.68,440.64,10.38;23,80.70,620.63,231.09,10.38">In their 2016 publication, Alqahtani et al. use semantic web technologies to establish links between sources on software vulnerabilities and source code repositories <ref type="bibr" coords="23,297.83,620.63,10.46,10.38" target="#b1">[2]</ref>.</s><s xml:id="_hRyDYDt" coords="23,314.28,620.63,217.02,10.38;24,80.45,106.56,450.85,10.38;24,80.70,118.52,65.90,10.38">They argue that traditionally, information sources on vulnerabilities and project metadata are heterogeneous, which hinders the estimation of vulnerability impact and artifact security.</s></p><p xml:id="_ZREPKyT"><s xml:id="_kbTzE6D" coords="24,90.66,130.47,373.20,10.38">Shahzad et al. published their study on the life cycles of software vulnerabilities in 2012 <ref type="bibr" coords="24,445.42,130.47,14.75,10.38" target="#b39">[40]</ref>.</s><s xml:id="_ZvXf2Uk" coords="24,466.36,130.47,64.93,10.38;24,80.70,142.43,450.60,10.38;24,80.70,154.38,104.81,10.38">They obtained a sample of 46,310 vulnerabilities from diferent sources, including the NVD, and present an analysis regarding multiple data dimensions.</s><s xml:id="_q6kUYQ3" coords="24,188.00,154.38,343.30,10.38;24,80.70,166.34,274.59,10.38">Based on that, they extract association rules regarding the patching and exploitation behavior, which are then used for detecting patterns in the data set.</s></p><p xml:id="_kfghuVj"><s xml:id="_YfTnY5D" coords="24,90.66,178.29,440.64,10.38;24,80.70,190.25,450.61,10.38;24,80.70,202.20,71.95,10.38">In their 2018 publication, Pashchenko et al. argue that existing tools for vulnerable dependency detection often produce false positives, which in turn lead to ineicient development processes, especially in commercial software development <ref type="bibr" coords="24,134.28,202.20,14.69,10.38" target="#b31">[32]</ref>.</s><s xml:id="_KUxH5rA" coords="24,154.83,202.06,376.47,10.52;24,80.70,214.02,89.42,10.52">The authors state that dependency scopes are often not evaluated in existing approaches, as well as halted dependencies.</s><s xml:id="_Gkd789W" coords="24,172.48,214.16,359.02,10.38;24,80.70,226.11,287.80,10.38">The paper presents an analysis approach that is able to detect vulnerable dependencies for Maven artifacts while improving on the deiciencies mentioned above.</s><s xml:id="_kZCqK9f" coords="24,371.00,226.11,160.31,10.38;24,80.70,238.07,360.23,10.38">In particular, the authors use heuristics based on the average release time of a library in order to identify halted dependencies.</s><s xml:id="_XREd5PS" coords="24,443.62,238.07,87.69,10.38;24,80.45,250.02,452.38,10.38">Instead of automated vulnerability aggregation, the authors rely on manual identiication of vulnerable code for each vulnerability.</s><s xml:id="_cDFKKcB" coords="24,80.70,261.98,390.25,10.38">Finally, Pashchenko et al. conduct a study of their approach on 200 open source Maven libraries.</s><s xml:id="_ASRJPDc" coords="24,473.43,261.98,57.88,10.38;24,80.47,273.93,428.33,10.38">They ind that 14% of all dependencies in their sample are halted, with 1% of them being afected by known vulnerabilities.</s><s xml:id="_SAWnQPK" coords="24,511.16,273.93,20.41,10.38;24,80.70,285.89,450.60,10.38;24,80.45,297.84,136.73,10.38">They conclude that employing their approach helped to reduce the time developers have to spend on false positives in vulnerable dependency detection.</s></p><p xml:id="_5s92drk"><s xml:id="_ySwC5K5" coords="24,90.66,309.66,440.64,10.52;24,80.70,321.75,315.10,10.38">Building on their previous work, in 2020 Pashchenko et al. present Vuln4Real, a methodology for overcoming the inaccuracies of traditional approaches for vulnerable dependency detection <ref type="bibr" coords="24,377.42,321.75,14.69,10.38" target="#b32">[33]</ref>.</s><s xml:id="_d5N76bB" coords="24,397.59,321.75,133.97,10.38;24,80.70,333.71,317.23,10.38">They implement the methodology for the Maven build system and perform an empirical study on 500 libraries.</s><s xml:id="_XTjW5nB" coords="24,400.59,333.71,130.71,10.38;24,80.45,345.66,347.03,10.38">The authors ind that 80% of all vulnerable dependencies can potentially be ixed by a direct dependency upgrade.</s><s xml:id="_nqwUpfk" coords="24,430.81,345.66,100.49,10.38;24,80.70,357.62,450.61,10.38;24,80.70,369.57,191.82,10.38">Furthermore, Vuln4Real decreases the number of false positives by 27%, thus efectively saving developers the time they would otherwise have to spend on analyzing an inaccurate alert.</s></p><p xml:id="_9WwDNxt"><s xml:id="_NAw9qPD" coords="24,90.66,381.53,442.33,10.38;24,80.70,393.48,154.78,10.38">In 2020, Pashchenko et al. published a qualitative study on the security implications of developer decisions regarding dependency management <ref type="bibr" coords="24,217.11,393.48,14.69,10.38" target="#b33">[34]</ref>.</s><s xml:id="_FUAsc2d" coords="24,237.56,393.48,293.74,10.38;24,80.70,405.44,313.52,10.38">The authors interviewed a total of 25 developers from diferent enterprises to investigate the trade-of between functional and security-related concerns.</s><s xml:id="_t3UyARy" coords="24,396.70,405.44,134.60,10.38;24,80.70,417.40,452.14,10.38">Their results imply that selecting an appropriate dependency is a complex task, and security concerns are often neglected in these scenarios.</s><s xml:id="_HPqWE4q" coords="24,80.70,429.35,450.61,10.38;24,80.33,441.31,100.21,10.38">Furthermore, the authors observe that patches are more likely to be adopted by developers if they are not bundled with functional changes.</s></p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9" xml:id="_fyGeUXP">CONCLUSION</head><p xml:id="_hFUNqk7"><s xml:id="_8Q248nj" coords="24,80.70,493.44,450.79,10.38;24,80.70,505.40,451.70,10.38;24,80.70,517.35,139.01,10.38">Our work presented three core contributions, that mitigate the resulting threats to application security and foster a general understanding of how vulnerability patches and dependency upgrades are performed in Maven Central, NuGet.org, and the NPM Registry.</s></p><p xml:id="_eqUJhkD"><s xml:id="_VhGQJJA" coords="24,90.66,529.31,440.64,10.38;24,80.70,541.26,165.57,10.38">At irst, we designed and implemented a distributed application that aggregates the dependency graphs for artifacts from all three repositories.</s><s xml:id="_bBTjKxg" coords="24,249.72,541.26,281.59,10.38;24,80.70,553.22,282.09,10.38">An additional post-processing step leverages a Snyk data dump to annotate information about CVE software vulnerabilities to the graph.</s><s xml:id="_A5TPX4u" coords="24,365.28,553.22,166.02,10.38;24,80.70,565.17,450.60,10.38;24,80.70,577.13,170.21,10.38">By executing the application we obtained a vulnerability-enriched dependency graph for Maven Central (as of September 2018), NuGet.org, and the NPM Registry (both up-to-date as of June 2020).</s><s xml:id="_yPdqsPw" coords="24,253.42,577.13,277.89,10.38;24,80.70,589.08,450.61,10.38;24,80.70,601.04,42.98,10.38">It contains a total of 19 million software artifact nodes, which belong to 1.8 million libraries and have 4.9 million unique dependency speciications, with 5378 vulnerabilities being annotated.</s></p><p xml:id="_3qWSGab"><s xml:id="_AKxaZmm" coords="24,90.66,613.00,346.19,10.38">Our second contribution is a detailed analysis of the data that we previously generated.</s><s xml:id="_aXXnQJR" coords="24,439.17,613.00,92.13,10.38;24,80.70,624.95,450.61,10.38;24,80.70,636.91,239.49,10.38">It was conducted based on four diferent research questions and comprised the creation of applications for data processing as well as interactive data visualizations for manual data exploration.</s></p><p xml:id="_JaFGRub"><s xml:id="_jX7NXKw" coords="25,90.66,106.56,440.64,10.38;25,80.70,118.52,207.70,10.38">We found that a substantial amount of vulnerabilities is still unpatched (over 25%), but existing patches are often released long before vulnerability publication.</s><s xml:id="_KYnkzQV" coords="25,290.90,118.52,240.39,10.38;25,80.70,130.47,439.67,10.38">We also observed that vulnerabilities may transitively afect an artifact with a transitive depth of up to 25, making it hard to manually discover a potential security risk.</s><s xml:id="_6kWsVpG" coords="25,522.86,130.47,8.44,10.38;25,80.70,142.43,450.61,10.38;25,80.70,154.38,396.51,10.38">In addition to that, our analysis revealed that up to 20% of all libraries (Maven Central) in a repository have been afected by direct vulnerable dependencies, and 60% of those libraries did not upgrade any of them.</s><s xml:id="_ZGKJaG7" coords="25,479.69,154.38,52.71,10.38;25,80.33,166.34,450.97,10.38;25,80.70,178.29,450.61,10.38;25,80.70,190.25,285.96,10.38">Interestingly, while most dependency upgrades happen long before a vulnerability is published, the act of publishing does seem to trigger an immediate dependency upgrade for some maintainers in Maven Central and the NPM Registry, thus indicating that they may be actively responding to security advisories.</s></p><p xml:id="_ZMKNz7p"><s xml:id="_5uQKTzy" coords="25,90.66,202.20,440.64,10.38;25,80.70,214.16,168.55,10.38">Our third and inal contribution is a set of observed security threats and mitigation strategies, which we derived from the analysis results described above.</s><s xml:id="_6xkUkVu" coords="25,251.73,214.16,279.57,10.38;25,80.70,226.11,269.50,10.38">These strategies are meant to mitigate the security threats that result from our indings, thus potentially increasing application security.</s></p><p xml:id="_HryNzF7"><s xml:id="_ZAPReXW" coords="25,90.66,238.07,440.64,10.38;25,80.70,250.02,450.61,10.38;25,80.70,261.98,162.29,10.38">With each of our contributions, we aim to improve the current state-of-the-art regarding the development of patches and the upgrades of vulnerable dependencies, thus ultimately reducing the number of exploitable security laws in software applications.</s><s xml:id="_MGTK7EZ" coords="25,245.66,261.98,285.64,10.38;25,80.70,273.93,319.37,10.38">Our indings provide the foundation for a common understanding of the topic and indicate how to tackle some of the problems that we pointed out.</s><s xml:id="_mNgmmnA" coords="25,402.55,273.93,129.01,10.38;25,80.70,285.89,215.56,10.38">Our results may be extended by incorporating additional repositories or data sources.</s></p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0" coords="6,214.66,416.07,182.67,9.25"><head>Fig. 1 .</head><label>1</label><figDesc><div><p xml:id="_PXYkXqd"><s xml:id="_RXPkKvq" coords="6,214.66,416.07,21.68,9.25">Fig. 1.</s><s xml:id="_8gpAnsP" coords="6,240.83,416.07,156.51,9.25">UML description of the overall data model</s></p></div></figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1" coords="7,192.96,408.03,226.08,9.25"><head>Fig. 2 .</head><label>2</label><figDesc><div><p xml:id="_s4Neb6G"><s xml:id="_qwXaC5r" coords="7,192.96,408.03,226.08,9.25">Fig. 2. Example instance of the data model shown in Figure 1</s></p></div></figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2" coords="12,83.96,306.86,220.80,9.25;12,83.75,317.82,140.57,9.25"><head>Fig. 5 .Fig. 6 .</head><label>56</label><figDesc><div><p xml:id="_u24bNX5"><s xml:id="_P6wVsfs" coords="12,83.96,306.86,220.80,9.25;12,83.75,317.82,140.57,9.25">Fig. 5. Percentage of unpatched vulnerabilities and wildcard version range specifiers per repository</s></p></div></figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3" coords="13,316.25,249.45,200.29,10.47"><head>Fig. 7 .</head><label>7</label><figDesc><div><p xml:id="_EXvQ5ag"><s xml:id="_vyxhSkR" coords="13,316.25,249.45,200.29,10.47">Fig. 7. Distribution of δ P and δ D values per repository</s></p></div></figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5" coords="14,90.93,407.57,395.85,6.77;14,90.93,418.53,223.69,6.77;14,90.90,429.49,295.26,6.77;14,90.90,440.45,371.65,6.77;14,90.94,451.41,161.19,6.77;14,146.55,465.81,318.90,10.69"><head></head><label></label><figDesc><div><p xml:id="_hzKZj8B"><s xml:id="_9sPzRCk" coords="14,90.93,407.57,395.85,6.77;14,90.93,418.53,223.69,6.77;14,90.90,429.49,295.26,6.77;14,90.90,440.45,371.65,6.77;14,90.94,451.41,161.19,6.77;14,146.55,465.81,318.90,10.69">MATCH (v: Vulnerability { snyk_id : ' DUMMY -ID '}) -[: AFFECTS | REFERENCES *2] -&gt;( l0 : Artifact ) MATCH p = ( l0 ) &lt; -[: DEPENDS_ON *0..6] -( a: Artifact ) WITH length (p) AS depth , a. LibraryId AS lib , a. UniqueId AS uid WITH depth , count ( DISTINCT lib ) AS lib_count , count ( DISTINCT uid ) AS art_count RETURN depth , lib_count , art_count Listing 2. Cypher query used to obtain values I Art,n and I Lib,n for a single vulnerability</s></p></div></figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7" coords="17,91.01,330.22,116.56,10.47"><head>Fig. 9 .</head><label>9</label><figDesc><div><p xml:id="_SEUn3eX"><s xml:id="_dfqPfEk" coords="17,91.01,330.22,116.56,10.47">Fig. 9. Distribution of r P values</s></p></div></figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8" coords="17,259.54,329.11,226.08,10.47"><head>Fig. 10 .</head><label>10</label><figDesc><div><p xml:id="_QNsWw83"><s xml:id="_44P6PVJ" coords="17,259.54,329.11,25.85,9.25">Fig. 10.</s><s xml:id="_kuxXHmE" coords="17,289.88,329.11,195.74,10.47">Distribution of δ PF values for each repository in days</s></p></div></figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9" coords="17,90.93,538.26,424.54,6.77;17,90.90,549.22,405.14,6.77;17,90.93,560.18,127.72,6.77;17,90.94,571.14,223.68,6.77;17,208.99,585.50,194.02,9.25"><head>Listing 3 .</head><label>3</label><figDesc><div><p xml:id="_4MpMdEf"><s xml:id="_FgEFFQz" coords="17,90.93,538.26,424.54,6.77;17,90.90,549.22,180.68,6.77">MATCH (v: Vulnerability ) -[: AFFECTS | REFERENCES *2] -&gt;(: Artifact ) &lt; -[: DEPENDS_ON ] -( l1 : Artifact ) WITH v. PublishedAt AS publication , l1 .</s><s xml:id="_Wh4CdwP" coords="17,272.69,549.22,118.45,6.77">UniqueId AS artifact , l1 .</s><s xml:id="_p45hQnw" coords="17,392.27,549.22,103.78,6.77;17,90.93,560.18,127.72,6.77;17,90.94,571.14,223.68,6.77;17,247.04,585.50,155.97,9.25">releaseDate AS release WHERE release &gt; publication RETURN DISTINCT artifact , publication , release ; Cypher query used to obtain data for RQ4</s></p></div></figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4" coords="13,112.93,107.71,395.28,126.27"><head>Table 1 .</head><label>1</label><figDesc><div><p xml:id="_TcmZrbf"><s xml:id="_8GT8DEB" coords="13,145.36,223.22,132.67,10.47;13,384.39,107.71,111.15,11.23">Key measures for δ P and δ D in days ≤ 0 δ D &gt; 0 &gt; δ P δ P ≥ 0</s></p></div></figDesc><table coords="13,113.22,108.76,395.00,125.21"><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>δ D</cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell>100%</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>Mean δ D</cell><cell>73.1</cell><cell cols="2">NPM Nuget 7.9 -3.7</cell><cell>80%</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>Median δ D</cell><cell>-0.6</cell><cell>0.8</cell><cell>0.7</cell><cell>60%</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>IQR δ D Mean δ P</cell><cell cols="3">184.0 -188.2 -159.8 -209.8 25.4 3.8</cell><cell>40%</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>Median δ P</cell><cell>-28.2</cell><cell cols="2">-7.9 -30.3</cell><cell>20%</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>IQR δ P</cell><cell>311.8</cell><cell>143.5</cell><cell>395.8</cell><cell>0%</cell><cell>Maven</cell><cell>NPM</cell><cell>Nuget</cell><cell>Total</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6" coords="14,307.00,217.24,221.04,20.21"><head>Table 2 .</head><label>2</label><figDesc><div><p xml:id="_VmzvpCZ"><s xml:id="_wubu6aU" coords="14,339.35,217.24,188.70,10.47;14,307.25,228.19,156.90,9.25">Mean, median and IQC values for I Art,n per 100,000 total artifacts for each level and repository</s></p></div></figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_8" coords="15,144.74,303.13,322.28,9.25"><head>Table 3 .</head><label>3</label><figDesc><div><p xml:id="_qc8sfTr"><s xml:id="_atjxQwm" coords="15,177.16,303.13,289.86,9.25">Vulnerability with maximum impact chain length seen during manual analysis</s></p></div></figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_9" coords="16,124.65,395.95,362.70,61.83"><head>Table 4 .</head><label>4</label><figDesc><div><p xml:id="_cvDVWjK"><s xml:id="_hXBkgbK" coords="16,203.43,448.53,237.31,9.25">Key characteristics of the analysis results for RQ3 per repository</s></p></div></figDesc><table coords="16,124.65,410.30,338.58,35.09"><row><cell>Maven Central</cell><cell>99,162</cell><cell>28,97%</cell><cell>8.7</cell><cell>38%</cell><cell>-192</cell></row><row><cell>NuGet.org</cell><cell>3,144</cell><cell>1.16%</cell><cell>2.8</cell><cell>40%</cell><cell>-212</cell></row><row><cell>NPM Registry</cell><cell>102,666</cell><cell>7.96%</cell><cell>3.4</cell><cell>32%</cell><cell>-503</cell></row></table><note coords="16,195.06,396.79,180.40,10.40;16,375.96,395.95,31.86,11.24;16,408.32,395.95,38.49,11.24;16,447.31,395.95,40.04,10.38"><p xml:id="_yfD99ZZ"><s xml:id="_NmdCNCB" coords="16,195.06,396.79,180.40,10.40;16,375.96,395.95,31.86,11.24;16,408.32,395.95,38.49,11.24;16,447.31,395.95,40.04,10.38"># Libraries Relative # Libraries E[n VD ] E[r P ] E[δ PU ] in Days</s></p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_10" coords="18,144.28,107.93,323.43,265.84"><head>Table 5 .</head><label>5</label><figDesc><div><p xml:id="_3Mky56z"><s xml:id="_PbcbffB" coords="18,267.69,364.52,108.80,9.25">Results of RQ4 per repository</s></p></div></figDesc><table coords="18,144.28,107.93,323.43,253.45"><row><cell>Amount of total values in interval</cell><cell>0% 20% 40%</cell><cell>3 )</cell><cell>[ 3 ; 6 )</cell><cell>[ 6 ; 9 )</cell><cell>[ 9 ; 1 2 )</cell><cell>[ 1 2 ; 1 5 )</cell><cell cols="2">[ 1 5 ; 1 8 ) Maven Central [ 1 8 ; 2 1 ) [ 2 1 ; 2 4 ) NuGet.org NPM Registry</cell><cell>[ 2 4 ; )</cell></row><row><cell></cell><cell></cell><cell></cell><cell cols="6">Fig. 11. Distribution of durations δ PR in months</cell></row><row><cell cols="2">Repository</cell><cell></cell><cell cols="7"># Artifacts Relative # Artifacts E[n V ] E[δ PR ] in Days</cell></row><row><cell cols="3">Maven Central</cell><cell cols="2">807,200</cell><cell></cell><cell cols="2">15,46%</cell><cell>3.3</cell><cell>470</cell></row><row><cell cols="2">NuGet.org</cell><cell></cell><cell cols="2">15,119</cell><cell></cell><cell cols="2">0.50%</cell><cell>1.3</cell><cell>155</cell></row><row><cell cols="3">NPM Registry</cell><cell cols="2">2,203,639</cell><cell></cell><cell cols="2">16.25%</cell><cell>2.8</cell><cell>431</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_11" coords="19,95.46,219.06,421.07,85.70"><head>Table 6 .</head><label>6</label><figDesc><div><p xml:id="_R9e6Vyp"><s xml:id="_tKMavzr" coords="19,230.22,295.51,183.74,9.25">Set of all threats T with repositories they apply to</s></p></div></figDesc><table coords="19,352.89,219.06,163.65,9.54"><row><cell>Central NPM Registry NuGet.org</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_12" coords="20,117.48,254.29,377.04,85.70"><head>Table 7 .</head><label>7</label><figDesc><div><p xml:id="_qhsZY5X"><s xml:id="_4mkQMhc" coords="20,224.04,330.74,196.10,9.25">Set S containing mitigation strategies derived from T</s></p></div></figDesc><table coords="20,387.71,254.29,42.21,9.54"><row><cell>Audience</cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0" coords="3,83.93,625.69,82.57,8.30"><p xml:id="_JSBERgG"><s xml:id="_7EXJc2y" coords="3,83.93,625.69,82.57,8.30">repo1.maven.org/maven2</s></p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2" xml:id="foot_1" coords="3,84.07,635.65,118.74,8.30"><p xml:id="_EGWgzXJ"><s xml:id="_wseTFQD" coords="3,84.07,635.65,118.74,8.30">api.nuget.org/v3/catalog0/index.json</s></p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3" xml:id="foot_2" coords="3,84.07,645.62,121.50,8.30"><p xml:id="_57SG2SW"><s xml:id="_dT23rp4" coords="3,84.07,645.62,121.50,8.30">skimdb.npmjs.com/registry/_all_docs</s></p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="4" xml:id="foot_3" coords="4,83.93,624.61,381.62,8.30"><p xml:id="_aD67gpd"><s xml:id="_FZQ9R2u" coords="4,83.93,624.61,381.62,8.30">maven.apache.org/plugins/maven-dependency-plugin/examples/resolving-conlicts-using-the-dependency-tree.html</s></p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="5" xml:id="foot_4" coords="4,84.07,634.57,55.94,8.30"><p xml:id="_mrzQytK"><s xml:id="_XzS4zh4" coords="4,84.07,634.57,55.94,8.30">dependabot.com/</s></p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="6" xml:id="foot_5" coords="4,84.07,644.53,23.54,8.30"><p xml:id="_xfQmeGa"><s xml:id="_Z2JW9D9" coords="4,84.07,644.53,23.54,8.30">snyk.io</s></p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="7" xml:id="foot_6" coords="6,83.93,645.52,158.25,8.30"><p xml:id="_r2MCKaC"><s xml:id="_g5xCMTf" coords="6,83.93,645.52,158.25,8.30">https://nvd.nist.gov/vuln/detail/CVE-2020-11023</s></p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="8" xml:id="foot_7" coords="8,84.07,616.16,448.17,8.30;8,80.44,626.12,108.22,8.30"><p xml:id="_6ahkHC9"><s xml:id="_D5Waazr" coords="8,84.07,616.16,272.36,8.30">The repository is located at https://github.com/sse-labs/dependency-graph-miner.</s><s xml:id="_7YNxvYU" coords="8,358.41,616.16,173.83,8.30;8,80.44,626.12,108.22,8.30">An archived version is available via Zenodo at https: //doi.org/10.5281/zenodo.5040439</s></p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="9" xml:id="foot_8" coords="8,84.07,636.09,78.03,8.30"><p xml:id="_arfcRrk"><s xml:id="_dyrfzrp" coords="8,84.07,636.09,78.03,8.30">hub.docker.com/_/neo4j</s></p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="10" xml:id="foot_9" coords="8,86.80,646.05,75.76,8.30"><p xml:id="_U5UyguQ"><s xml:id="_TbW5V6U" coords="8,86.80,646.05,75.76,8.30">wiki.eclipse.org/Aether</s></p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="11" xml:id="foot_10" coords="9,86.80,645.94,38.22,8.30"><p xml:id="_6xShdhu"><s xml:id="_ksMZc2F" coords="9,86.80,645.94,38.22,8.30">semver.org/</s></p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="12" xml:id="foot_11" coords="11,86.80,635.02,62.47,8.30"><p xml:id="_xSWxMZt"><s xml:id="_wCXUa3g" coords="11,86.80,635.02,62.47,8.30">plotly.com/python/</s></p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="13" xml:id="foot_12" coords="11,86.80,644.98,54.21,8.30"><p xml:id="_qaYQUtM"><s xml:id="_s8WhY9k" coords="11,86.80,644.98,54.21,8.30">plotly.com/dash/</s></p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_13" coords="19,451.04,670.06,80.27,8.30"><p xml:id="_yG7AADu"><s xml:id="_YtZKtNz" coords="19,451.04,670.06,18.16,8.30">Digit.</s><s xml:id="_wjMUjXB" coords="19,471.53,670.06,23.42,8.30">Threat.</s><s xml:id="_Tj4vgjZ" coords="19,497.27,670.06,13.10,8.30">Res.</s><s xml:id="_AkUhhUJ" coords="19,512.70,670.06,18.60,8.30">Pract.</s></p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="14" xml:id="foot_14" coords="20,86.80,635.62,109.53,8.30"><p xml:id="_4pxhR4s"><s xml:id="_TWjd27c" coords="20,86.80,635.62,109.53,8.30">nvd.nist.gov/vuln/data-feeds#RSS</s></p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="15" xml:id="foot_15" coords="20,86.80,645.58,68.34,8.30"><p xml:id="_RtYxqMK"><s xml:id="_c44rUfW" coords="20,86.80,645.58,68.34,8.30">twitter.com/CVEnew</s></p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="16" xml:id="foot_16" coords="23,86.80,645.51,94.87,8.30"><p xml:id="_AVqcgRm"><s xml:id="_Q5TQBBt" coords="23,86.80,645.51,94.87,8.30">github.com/pyupio/safety-db</s></p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div><head xml:id="_KnKjnZT">ACKNOWLEDGMENTS</head><p xml:id="_kasvd94">Special thanks to <rs type="institution">Snyk Ltd.</rs> for sharing their data on vulnerabilities for the context of this research project.</p></div>
			</div>			<div type="references">

				<listBibl>

<biblStruct coords="25,97.77,365.60,433.54,8.30;25,97.77,375.45,429.92,8.42" xml:id="b0">
	<analytic>
		<title level="a" type="main" coord="25,343.42,365.60,187.88,8.30;25,97.77,375.56,74.53,8.30" xml:id="_fH4CCwy">On the impact of using trivial packages: an empirical case study on npm and PyPI</title>
		<author>
			<persName coords=""><forename type="first">Rabe</forename><surname>Abdalkareem</surname></persName>
			<idno type="ORCID">0000-0001-9914-5434</idno>
		</author>
		<author>
			<persName coords=""><forename type="first">Vinicius</forename><surname>Oda</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Suhaib</forename><surname>Mujahid</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Emad</forename><surname>Shihab</surname></persName>
		</author>
		<idno type="DOI">10.1007/s10664-019-09792-9</idno>
		<ptr target="https://doi.org/10.1007/s10664-019-09792-9" />
	</analytic>
	<monogr>
		<title level="j" xml:id="_kFyV2Qs" coord="25,178.54,375.45,99.99,8.42">Empirical Software Engineering</title>
		<title level="j" type="abbrev">Empir Software Eng</title>
		<idno type="ISSN">1382-3256</idno>
		<idno type="ISSNe">1573-7616</idno>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="1168" to="1204" />
			<date type="published" when="2020-03-01">2020. 01 Mar 2020</date>
			<publisher>Springer Science and Business Media LLC</publisher>
		</imprint>
	</monogr>
	<note type="raw_reference">Rabe Abdalkareem, Vinicius Oda, Suhaib Mujahid, and Emad Shihab. 2020. On the impact of using trivial packages: an empirical case study on npm and PyPI. Empirical Software Engineering 25, 2 (01 Mar 2020), 1168ś1204. https://doi.org/10.1007/s10664-019-09792-9</note>
</biblStruct>

<biblStruct coords="25,97.77,385.52,433.81,8.30;25,97.77,395.37,434.76,8.42;25,97.77,405.45,208.98,8.30" xml:id="b1">
	<analytic>
		<title level="a" type="main" coord="25,300.88,385.52,230.70,8.30;25,97.77,395.49,134.97,8.30" xml:id="_24XQJpB">Tracing known security vulnerabilities in software repositories âĂŞ A Semantic Web enabled modeling approach</title>
		<author>
			<persName coords=""><forename type="first">S</forename><surname>Sultan</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Ellis</forename><forename type="middle">E</forename><surname>Alqahtani</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Juergen</forename><surname>Eghan</surname></persName>
		</author>
		<author>
			<persName coords=""><surname>Rilling</surname></persName>
		</author>
		<idno type="DOI">10.1016/j.scico.2016.01.005</idno>
		<ptr target="https://doi.org/10.1016/j.scico.2016" />
	</analytic>
	<monogr>
		<title level="j" xml:id="_WKMmX6f" coord="25,239.10,395.37,108.22,8.42">Science of Computer Programming</title>
		<imprint>
			<biblScope unit="volume">121</biblScope>
			<biblScope unit="page" from="153" to="175" />
			<date type="published" when="2016">2016. 2016</date>
		</imprint>
	</monogr>
	<note>01.005 Special Issue on Knowledge-based Software Engineering</note>
	<note type="raw_reference">Sultan S. Alqahtani, Ellis E. Eghan, and Juergen Rilling. 2016. Tracing known security vulnerabilities in software repositories âĂŞ A Semantic Web enabled modeling approach. Science of Computer Programming 121 (2016), 153ś175. https://doi.org/10.1016/j.scico.2016. 01.005 Special Issue on Knowledge-based Software Engineering.</note>
</biblStruct>

<biblStruct coords="25,97.77,415.41,433.74,8.30;25,97.77,425.26,434.05,8.42;25,97.77,435.34,60.87,8.30" xml:id="b2">
	<analytic>
		<title level="a" type="main" coord="25,439.25,415.41,92.26,8.30;25,97.77,425.37,147.66,8.30" xml:id="_T35rtfc">How the Apache community upgrades dependencies: an evolutionary study</title>
		<author>
			<persName coords=""><forename type="first">Gabriele</forename><surname>Bavota</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Gerardo</forename><surname>Canfora</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Massimiliano</forename><surname>Di Penta</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Rocco</forename><surname>Oliveto</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Sebastiano</forename><surname>Panichella</surname></persName>
		</author>
		<idno type="DOI">10.1007/s10664-014-9325-9</idno>
		<ptr target="https://doi.org/10.1007/s10664-014-9325-9" />
	</analytic>
	<monogr>
		<title level="j" xml:id="_FcsUPx2" coord="25,251.47,425.26,99.11,8.42">Empirical Software Engineering</title>
		<title level="j" type="abbrev">Empir Software Eng</title>
		<idno type="ISSN">1382-3256</idno>
		<idno type="ISSNe">1573-7616</idno>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="1275" to="1317" />
			<date type="published" when="2015-10-01">2015. 01 Oct 2015</date>
			<publisher>Springer Science and Business Media LLC</publisher>
		</imprint>
	</monogr>
	<note type="raw_reference">Gabriele Bavota, Gerardo Canfora, Massimiliano Di Penta, Rocco Oliveto, and Sebastiano Panichella. 2015. How the Apache community upgrades dependencies: an evolutionary study. Empirical Software Engineering 20, 5 (01 Oct 2015), 1275ś1317. https://doi.org/10.1007/ s10664-014-9325-9</note>
</biblStruct>

<biblStruct coords="25,97.77,445.30,434.47,8.30;25,97.49,455.15,433.81,8.42;25,97.77,465.11,374.65,8.42" xml:id="b3">
	<analytic>
		<title level="a" type="main" coord="25,425.16,445.30,107.08,8.30;25,97.49,455.26,196.55,8.30" xml:id="_DeMk9he">The Maven Dependency Graph: A Temporal Graph-Based Representation of Maven Central</title>
		<author>
			<persName coords=""><forename type="first">Amine</forename><surname>Benelallam</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Nicolas</forename><surname>Harrand</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Cesar</forename><surname>Soto-Valero</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Benoit</forename><surname>Baudry</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Olivier</forename><surname>Barais</surname></persName>
		</author>
		<idno type="DOI">10.1109/msr.2019.00060</idno>
		<idno>MSR &apos;19</idno>
		<ptr target="https://doi.org/10.1109/MSR.2019.00060" />
	</analytic>
	<monogr>
		<title level="m" xml:id="_6egpGZm" coord="25,308.75,455.15,222.55,8.42;25,97.77,465.11,37.21,8.42">2019 IEEE/ACM 16th International Conference on Mining Software Repositories (MSR)</title>
		<meeting><address><addrLine>Montreal, Quebec, Canada</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2019-05">2019</date>
			<biblScope unit="page" from="344" to="348" />
		</imprint>
	</monogr>
	<note type="raw_reference">Amine Benelallam, Nicolas Harrand, César Soto-Valero, Benoit Baudry, and Olivier Barais. 2019. The Maven Dependency Graph: A Temporal Graph-Based Representation of Maven Central. In Proceedings of the 16th International Conference on Mining Software Repositories (Montreal, Quebec, Canada) (MSR &apos;19). IEEE Press, 344âĂŞ348. https://doi.org/10.1109/MSR.2019.00060</note>
</biblStruct>

<biblStruct coords="25,97.77,475.07,408.11,8.42" xml:id="b4">
	<analytic>
		<title level="a" type="main" coord="25,152.30,475.19,136.96,8.30" xml:id="_hRcXkWr">Managing software productivity and reuse</title>
		<author>
			<persName coords=""><forename type="first">B</forename><surname>Boehm</surname></persName>
		</author>
		<idno type="DOI">10.1109/2.789755</idno>
		<ptr target="https://doi.org/10.1109/2.789755" />
	</analytic>
	<monogr>
		<title level="j" xml:id="_KRCDQr8" coord="25,295.30,475.07,31.25,8.42">Computer</title>
		<title level="j" type="abbrev">Computer</title>
		<idno type="ISSN">0018-9162</idno>
		<imprint>
			<biblScope unit="volume">32</biblScope>
			<biblScope unit="issue">9</biblScope>
			<biblScope unit="page" from="111" to="113" />
			<date type="published" when="1999">1999. 1999</date>
			<publisher>Institute of Electrical and Electronics Engineers (IEEE)</publisher>
		</imprint>
	</monogr>
	<note type="raw_reference">B. Boehm. 1999. Managing software productivity and reuse. Computer 32, 9 (1999), 111ś113. https://doi.org/10.1109/2.789755</note>
</biblStruct>

<biblStruct coords="25,97.77,485.04,433.53,8.42;25,97.77,495.00,251.51,8.42" xml:id="b5">
	<analytic>
		<title level="a" type="main" coord="25,236.56,485.15,217.17,8.30" xml:id="_5syj5MR">Fine-Grained Network Analysis for Modern Software Ecosystems</title>
		<author>
			<persName coords=""><forename type="first">Paolo</forename><surname>Boldi</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Georgios</forename><surname>Gousios</surname></persName>
		</author>
		<idno type="DOI">10.1145/3418209</idno>
		<ptr target="https://doi.org/10.1145/3418209" />
	</analytic>
	<monogr>
		<title level="j" xml:id="_FgV2y9u" coord="25,461.39,485.04,69.91,8.42;25,97.77,495.00,62.12,8.42">ACM Transactions on Internet Technology</title>
		<title level="j" type="abbrev">ACM Trans. Internet Technol.</title>
		<idno type="ISSN">1533-5399</idno>
		<idno type="ISSNe">1557-6051</idno>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="1" to="14" />
			<date type="published" when="2021-02">2021. Feb 2021</date>
			<publisher>Association for Computing Machinery (ACM)</publisher>
		</imprint>
	</monogr>
	<note type="raw_reference">Paolo Boldi and Georgios Gousios. 2021. Fine-Grained Network Analysis for Modern Software Ecosystems. ACM Transactions on Internet Technology 21, 1 (Feb 2021), 1âĂŞ14. https://doi.org/10.1145/3418209</note>
</biblStruct>

<biblStruct coords="25,97.77,505.07,434.41,8.30;25,97.77,514.93,434.38,8.42;25,97.77,525.00,39.94,8.30" xml:id="b6">
	<analytic>
		<title level="a" type="main" coord="25,472.57,505.07,59.60,8.30;25,97.77,515.04,168.87,8.30" xml:id="_eHwNSRK">Lags in the release, adoption, and propagation of npm vulnerability fixes</title>
		<author>
			<persName coords=""><forename type="first">Bodin</forename><surname>Chinthanet</surname></persName>
			<idno type="ORCID">0000-0003-4439-1608</idno>
		</author>
		<author>
			<persName><forename type="first">Raula</forename><forename type="middle">Gaikovina</forename><surname>Kula</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Shane</forename><surname>Mcintosh</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Takashi</forename><surname>Ishio</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Akinori</forename><surname>Ihara</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Kenichi</forename><surname>Matsumoto</surname></persName>
		</author>
		<idno type="DOI">10.1007/s10664-021-09951-x</idno>
		<ptr target="https://doi.org/10.1007/s10664-021-09951-x" />
	</analytic>
	<monogr>
		<title level="j" xml:id="_nQmq4E7" coord="25,272.84,514.93,99.03,8.42">Empirical Software Engineering</title>
		<title level="j" type="abbrev">Empir Software Eng</title>
		<idno type="ISSN">1382-3256</idno>
		<idno type="ISSNe">1573-7616</idno>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="issue">3</biblScope>
			<date type="published" when="2021-03-30">2021. Mar 2021</date>
			<publisher>Springer Science and Business Media LLC</publisher>
		</imprint>
	</monogr>
	<note type="raw_reference">Bodin Chinthanet, Raula Gaikovina Kula, Shane McIntosh, Takashi Ishio, Akinori Ihara, and Kenichi Matsumoto. 2021. Lags in the release, adoption, and propagation of npm vulnerability ixes. Empirical Software Engineering 26, 3 (Mar 2021). https://doi.org/10.1007/s10664- 021-09951-x</note>
</biblStruct>

<biblStruct coords="25,97.77,534.96,434.47,8.30;25,97.77,544.93,36.79,8.30" xml:id="b7">
	<analytic>
		<title level="a" type="main" xml:id="_3YR9HkH">PIRAT - Tool for Automated Cyber-risk Assessment of PLC Components &amp; Systems Deploying NVD CVE &amp; MITRE ATT&amp;CK Databases</title>
		<author>
			<persName><forename type="first">Natalija</forename><surname>Vlajic</surname></persName>
			<idno type="ORCID">0000-0001-9921-0128</idno>
		</author>
		<author>
			<persName><forename type="first">Stefan</forename><surname>Petrovic</surname></persName>
			<idno type="ORCID">0009-0007-4880-9131</idno>
		</author>
		<author>
			<persName><forename type="first">Gabriele</forename><surname>Cianfarani</surname></persName>
			<idno type="ORCID">0009-0006-2807-7490</idno>
		</author>
		<idno type="DOI">10.1145/3576841.3589614</idno>
		<ptr target="https://cve.mitre.org/about/cve_and_nvd_relationship.html" />
	</analytic>
	<monogr>
		<title level="m" xml:id="_axMyZqw" coord="25,192.11,534.96,92.37,8.30">Proceedings of the ACM/IEEE 14th International Conference on Cyber-Physical Systems (with CPS-IoT Week 2023)</title>
		<meeting>the ACM/IEEE 14th International Conference on Cyber-Physical Systems (with CPS-IoT Week 2023)</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2019">2019</date>
			<biblScope unit="page" from="2020" to="2026" />
		</imprint>
		<respStmt>
			<orgName>MITRE Corporation</orgName>
		</respStmt>
	</monogr>
	<note type="raw_reference">MITRE Corporation. 2019. CVE and NVD Relationship. https://cve.mitre.org/about/cve_and_nvd_relationship.html. Accessed: 2020-06-04.</note>
</biblStruct>

<biblStruct coords="25,97.77,554.89,301.48,8.30" xml:id="b8">
	<analytic>
		<title level="a" type="main" xml:id="_xXHWZab">Análise de segurança dos orquestradores Kubernetes, Docker Swarm e Apache Mesos baseada no CVE / MITRE</title>
		<author>
			<persName><forename type="first">Nikolas</forename><surname>Jensen</surname></persName>
			<idno type="ORCID">0000-0003-3683-0113</idno>
		</author>
		<author>
			<persName><forename type="first">Charles</forename><forename type="middle">Christian</forename><surname>Miers</surname></persName>
			<idno type="ORCID">0000-0002-1976-0478</idno>
		</author>
		<idno type="DOI">10.5753/sbseg_estendido.2021.17349</idno>
		<ptr target="https://cve.mitre.org/cve/" />
	</analytic>
	<monogr>
		<title level="m" xml:id="_eDtsgmC" coord="25,186.14,554.89,47.86,8.30">Anais Estendidos do XXI Simpósio Brasileiro de Segurança da Informação e de Sistemas Computacionais (SBSeg Estendido 2021)</title>
		<imprint>
			<publisher>Sociedade Brasileira de Computação - SBC</publisher>
			<date type="published" when="2021-10-04">2021</date>
			<biblScope unit="page" from="2021" to="2025" />
		</imprint>
		<respStmt>
			<orgName>MITRE Corporation</orgName>
		</respStmt>
	</monogr>
	<note type="raw_reference">MITRE Corporation. 2021. CVE List Home. https://cve.mitre.org/cve/. Accessed: 2021-05-17.</note>
</biblStruct>

<biblStruct coords="25,97.77,564.85,433.74,8.30;25,97.77,574.70,434.76,8.42;25,97.49,584.78,369.07,8.30" xml:id="b9">
	<analytic>
		<title level="a" type="main" coord="25,292.74,564.85,238.77,8.30;25,97.77,574.81,27.09,8.30" xml:id="_Zx7rapD">On the impact of security vulnerabilities in the npm package dependency network</title>
		<author>
			<persName coords=""><forename type="first">Alexandre</forename><surname>Decan</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Tom</forename><surname>Mens</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Eleni</forename><surname>Constantinou</surname></persName>
		</author>
		<idno type="DOI">10.1145/3196398.3196401</idno>
		<ptr target="https://doi.org/10.1145/3196398.3196401" />
	</analytic>
	<monogr>
		<title level="m" xml:id="_d9YBYDq" coord="25,140.80,574.70,265.79,8.42;25,491.36,574.70,37.50,8.42">Proceedings of the 15th International Conference on Mining Software Repositories</title>
		<meeting>the 15th International Conference on Mining Software Repositories<address><addrLine>Gothenburg, Sweden; New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2018-05-28">2018</date>
			<biblScope unit="page" from="181" to="191" />
		</imprint>
	</monogr>
	<note>MSR âĂŹ18)</note>
	<note type="raw_reference">Alexandre Decan, Tom Mens, and Eleni Constantinou. 2018. On the Impact of Security Vulnerabilities in the npm Package Dependency Network. In Proceedings of the 15th International Conference on Mining Software Repositories (Gothenburg, Sweden) (MSR âĂŹ18). Association for Computing Machinery, New York, NY, USA, 181âĂŞ191. https://doi.org/10.1145/3196398.3196401</note>
</biblStruct>

<biblStruct coords="25,97.77,594.74,433.53,8.30;25,97.77,604.59,396.48,8.42" xml:id="b10">
	<analytic>
		<title level="a" type="main" coord="25,285.19,594.74,246.11,8.30;25,97.77,604.70,70.45,8.30" xml:id="_rFehqX7">An empirical comparison of dependency network evolution in seven software packaging ecosystems</title>
		<author>
			<persName coords=""><forename type="first">Alexandre</forename><surname>Decan</surname></persName>
			<idno type="ORCID">0000-0002-5824-5823</idno>
		</author>
		<author>
			<persName coords=""><forename type="first">Tom</forename><surname>Mens</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Philippe</forename><surname>Grosjean</surname></persName>
		</author>
		<idno type="DOI">10.1007/s10664-017-9589-y</idno>
		<ptr target="https://doi.org/10.1007/s10664-017-9589-y" />
	</analytic>
	<monogr>
		<title level="j" xml:id="_qU82nDY" coord="25,174.60,604.59,99.99,8.42">Empirical Software Engineering</title>
		<title level="j" type="abbrev">Empir Software Eng</title>
		<idno type="ISSN">1382-3256</idno>
		<idno type="ISSNe">1573-7616</idno>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="381" to="416" />
			<date type="published" when="2019-02">2019. Feb 2019</date>
			<publisher>Springer Science and Business Media LLC</publisher>
		</imprint>
	</monogr>
	<note type="raw_reference">Alexandre Decan, Tom Mens, and Philippe Grosjean. 2019. An empirical comparison of dependency network evolution in seven software packaging ecosystems. Empirical Software Engineering 24 (Feb 2019), 381ś416. https://doi.org/10.1007/s10664-017-9589-y</note>
</biblStruct>

<biblStruct coords="25,97.77,614.66,434.47,8.30;25,97.51,624.63,108.22,8.30" xml:id="b11">
	<monogr>
		<title level="m" type="main" coord="25,229.51,614.66,231.02,8.30" xml:id="_S9n8tJd">2021. sse-labs/dependency-graph-miner: Full Release for Final Paper</title>
		<author>
			<persName coords=""><forename type="first">Johannes</forename><surname>Dãĳsing</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Ben</forename><surname>Hermann</surname></persName>
		</author>
		<idno type="DOI">10.5281/zenodo.5040439</idno>
		<ptr target="https://doi.org/10.5281/zenodo.5040439" />
		<imprint>
			<date type="published" when="2021-06">Jun 2021</date>
		</imprint>
	</monogr>
	<note type="raw_reference">Johannes DÃĳsing and Ben Hermann. 2021. sse-labs/dependency-graph-miner: Full Release for Final Paper. (Jun 2021). https: //doi.org/10.5281/zenodo.5040439</note>
</biblStruct>

<biblStruct coords="25,97.77,634.59,433.53,8.30;25,97.77,644.44,433.53,8.42;26,97.77,108.05,422.73,8.42" xml:id="b12">
	<analytic>
		<title level="a" type="main" coord="25,311.66,634.59,168.14,8.30;25,503.99,634.59,27.31,8.30;25,97.77,644.55,404.89,8.30" xml:id="_UTp7kFp">Towards Smoother Library Migrations: A Look at Vulnerable Dependency Migrations at Function Level for npm JavaScript Packages</title>
		<author>
			<persName coords=""><forename type="first">Rodrigo</forename><forename type="middle">Elizalde</forename><surname>Zapata</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Raula</forename><surname>Gaikovina Kula</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Bodin</forename><surname>Chinthanet</surname></persName>
		</author>
		<idno type="DOI">10.1109/ICSME.2018.00067</idno>
		<ptr target="https://doi.org/10.1109/ICSME.2018.00067" />
	</analytic>
	<monogr>
		<title level="m" xml:id="_p3hQFBp" coord="25,516.96,644.44,14.34,8.42;26,97.77,108.05,248.97,8.42">2018 IEEE International Conference on Software Maintenance and Evolution (ICSME)</title>
		<imprint>
			<date type="published" when="2018">2018</date>
			<biblScope unit="page" from="559" to="563" />
		</imprint>
	</monogr>
	<note>Takashi Ishio, Kenichi Matsumoto, and Akinori Ihara</note>
	<note type="raw_reference">Rodrigo Elizalde Zapata, Raula Gaikovina Kula, Bodin Chinthanet, Takashi Ishio, Kenichi Matsumoto, and Akinori Ihara. 2018. Towards Smoother Library Migrations: A Look at Vulnerable Dependency Migrations at Function Level for npm JavaScript Packages. In 2018 IEEE International Conference on Software Maintenance and Evolution (ICSME). 559ś563. https://doi.org/10.1109/ICSME.2018.00067</note>
</biblStruct>

<biblStruct coords="26,97.77,118.12,419.66,8.30" xml:id="b13">
	<analytic>
		<title level="a" type="main" coord="26,97.77,118.12,92.84,8.30" xml:id="_aPTPP53">Using Maven with Eclipse</title>
		<author>
			<persName><forename type="first">Sameer</forename><surname>Wadkar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Madhu</forename><surname>Siddalingaiah</surname></persName>
		</author>
		<idno type="DOI">10.1007/978-1-4302-4864-4_19</idno>
		<ptr target="https://maven.apache.org/what-is-maven.html" />
	</analytic>
	<monogr>
		<title level="m" xml:id="_pqtVQb9" coord="26,215.58,118.12,68.13,8.30">Pro Apache Hadoop</title>
		<imprint>
			<publisher>Apress</publisher>
			<date type="published" when="2020">2020</date>
			<biblScope unit="page" from="391" to="398" />
		</imprint>
	</monogr>
	<note type="raw_reference">Apache Software Foundation. 2020. Maven -Introduction. https://maven.apache.org/what-is-maven.html. Accessed: 2020-11-19.</note>
</biblStruct>

<biblStruct coords="26,97.77,127.98,433.54,8.42;26,97.28,137.94,215.25,8.42" xml:id="b14">
	<analytic>
		<title level="a" type="main" coord="26,365.24,127.98,166.07,8.42;26,97.28,137.94,35.70,8.42" xml:id="_6jZAR2A">Modeling the Security Ecosystem - The Dynamics of (In)Security</title>
		<author>
			<persName coords=""><forename type="first">Stefan</forename><surname>Frei</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Dominik</forename><surname>Schatzmann</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Bernhard</forename><surname>Plattner</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Brian</forename><surname>Trammell</surname></persName>
		</author>
		<idno type="DOI">10.1007/978-1-4419-6967-5_6</idno>
		<ptr target="https://doi.org/10.1007/978-1-4419-6967-5_6" />
	</analytic>
	<monogr>
		<title level="m" xml:id="_eJJtkBh">Economics of Information Security and Privacy</title>
		<imprint>
			<publisher>Springer US</publisher>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="79" to="106" />
		</imprint>
	</monogr>
	<note type="raw_reference">Stefan Frei, Dominik Schatzmann, Bernhard Plattner, and Brian Trammell. 2010. Modeling the Security Ecosystem -The Dynamics of (In)Security. 79ś106. https://doi.org/10.1007/978-1-4419-6967-5_6</note>
</biblStruct>

<biblStruct coords="26,97.77,148.01,433.74,8.30;26,97.51,157.86,433.79,8.42;26,97.77,167.94,89.82,8.30" xml:id="b15">
	<analytic>
		<title level="a" type="main" coord="26,317.53,148.01,213.98,8.30;26,97.51,157.98,46.62,8.30" xml:id="_pmukacZ">A Double-Edged Sword? Software Reuse and Potential Security Vulnerabilities</title>
		<author>
			<persName coords=""><forename type="first">Antonios</forename><surname>Gkortzis</surname></persName>
			<idno type="ORCID">0000-0002-7628-1780</idno>
		</author>
		<author>
			<persName coords=""><forename type="first">Daniel</forename><surname>Feitosa</surname></persName>
			<idno type="ORCID">0000-0001-9371-232X</idno>
		</author>
		<author>
			<persName coords=""><forename type="first">Diomidis</forename><surname>Spinellis</surname></persName>
			<idno type="ORCID">0000-0003-4231-1897</idno>
		</author>
		<idno type="DOI">10.1007/978-3-030-22888-0_13</idno>
	</analytic>
	<monogr>
		<title level="m" xml:id="_BDSjZZB" coord="26,157.96,157.86,79.90,8.42">Lecture Notes in Computer Science</title>
		<editor>
			<persName><forename type="first">Xin</forename><surname>Peng</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">Apostolos</forename><surname>Ampatzoglou</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">Tanmay</forename><surname>Bhowmik</surname></persName>
		</editor>
		<meeting><address><addrLine>Cham</addrLine></address></meeting>
		<imprint>
			<publisher>Springer International Publishing</publisher>
			<date type="published" when="2019">2019</date>
			<biblScope unit="page" from="187" to="203" />
		</imprint>
	</monogr>
	<note type="raw_reference">Antonios Gkortzis, Daniel Feitosa, and Diomidis Spinellis. 2019. A Double-Edged Sword? Software Reuse and Potential Security Vulnerabilities. In Reuse in the Big Data Era, Xin Peng, Apostolos Ampatzoglou, and Tanmay Bhowmik (Eds.). Springer International Publishing, Cham, 187ś203.</note>
</biblStruct>

<biblStruct coords="26,97.77,177.90,358.37,8.30" xml:id="b16">
	<analytic>
		<title level="a" type="main" xml:id="_evzYU7E">Pentagon Truisms</title>
		<author>
			<persName coords=""><surname>Hackerone</surname></persName>
		</author>
		<idno type="DOI">10.2307/j.ctv13qftj3.6</idno>
		<ptr target="https://www.hackerone.com/hack-the-pentagon" />
	</analytic>
	<monogr>
		<title level="m" xml:id="_XZKzZpU" coord="26,156.20,177.90,60.13,8.30">Assignment: Pentagon</title>
		<imprint>
			<publisher>Potomac Books</publisher>
			<date type="published" when="2020-08-20">2020. 2020-08-20</date>
			<biblScope unit="page" from="23" to="40" />
		</imprint>
	</monogr>
	<note type="raw_reference">Hackerone. 2020. Hack the Pentagon. https://www.hackerone.com/hack-the-pentagon. Accessed: 2020-08-20.</note>
</biblStruct>

<biblStruct coords="26,97.77,187.86,433.53,8.30;26,97.77,197.71,433.54,8.42;26,97.77,207.68,307.55,8.42" xml:id="b17">
	<analytic>
		<title level="a" type="main" coord="26,448.10,187.86,83.20,8.30;26,97.77,197.83,156.71,8.30" xml:id="_eVcVzQB">On the Extent and Nature of Software Reuse in Open Source Java Projects</title>
		<author>
			<persName coords=""><forename type="first">Lars</forename><surname>Heinemann</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Florian</forename><surname>Deissenboeck</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Mario</forename><surname>Gleirscher</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Benjamin</forename><surname>Hummel</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Maximilian</forename><surname>Irlbeck</surname></persName>
		</author>
		<idno type="DOI">10.1007/978-3-642-21347-2_16</idno>
		<ptr target="https://doi.org/10.1007/978-3-642-21347-2_16" />
	</analytic>
	<monogr>
		<title level="m" xml:id="_UKhF9JE" coord="26,260.88,197.71,270.43,8.42;26,97.77,207.68,105.82,8.42">Lecture Notes in Computer Science</title>
		<imprint>
			<publisher>Springer Berlin Heidelberg</publisher>
			<date type="published" when="2011">2011</date>
			<biblScope unit="volume">6727</biblScope>
			<biblScope unit="page" from="207" to="222" />
		</imprint>
	</monogr>
	<note type="raw_reference">Lars Heinemann, Florian Deissenboeck, Mario Gleirscher, Benjamin Hummel, and Maximilian Irlbeck. 2011. On the Extent and Nature of Software Reuse in Open Source Java Projects. Top Productivity through Software Reuse: 12th International Conference on Software Reuse, ICSR, Pohang, South Korea 6727, 207ś222. https://doi.org/10.1007/978-3-642-21347-2_16</note>
</biblStruct>

<biblStruct coords="26,97.77,217.75,285.64,8.30" xml:id="b18">
	<analytic>
		<title level="a" type="main" xml:id="_82sgSTN">NPM et post-NPM dans les métropoles européennes : le défaut de communication, outil de résilience de l’élu</title>
		<author>
			<persName><forename type="first">Muriel</forename><surname>Michel-Clupot</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Serge</forename><surname>Rouot</surname></persName>
		</author>
		<idno type="DOI">10.7202/1083849ar</idno>
		<ptr target="https://docs.npmjs.com/about-npm" />
	</analytic>
	<monogr>
		<title level="j" xml:id="_6VfvTw2" coord="26,149.62,217.75,36.05,8.30">Management international</title>
		<title level="j" type="abbrev">Management international</title>
		<idno type="ISSN">1206-1697</idno>
		<idno type="ISSNe">1918-9222</idno>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page">164</biblScope>
			<date type="published" when="2020">2020</date>
			<publisher>HEC Montréal</publisher>
		</imprint>
	</monogr>
	<note type="raw_reference">NPM Inc. 2020. About NPM. https://docs.npmjs.com/about-npm. Accessed: 2020-11-19.</note>
</biblStruct>

<biblStruct coords="26,97.77,227.71,433.74,8.30;26,97.77,237.57,386.26,8.42" xml:id="b19">
	<analytic>
		<title level="a" type="main" coord="26,414.52,227.71,116.99,8.30;26,97.77,237.68,47.29,8.30" xml:id="_TuB95QE">Do developers update their library dependencies?</title>
		<author>
			<persName coords=""><forename type="first">Raula</forename><surname>Gaikovina Kula</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Daniel</forename><forename type="middle">M</forename><surname>German</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Ali</forename><surname>Ouni</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Takashi</forename><surname>Ishio</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Katsuro</forename><surname>Inoue</surname></persName>
		</author>
		<idno type="DOI">10.1007/s10664-017-9521-5</idno>
		<ptr target="https://doi.org/10.1007/s10664-017-9521-5" />
	</analytic>
	<monogr>
		<title level="j" xml:id="_e8senpV" coord="26,147.93,237.57,99.99,8.42">Empirical Software Engineering</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="384" to="417" />
			<date type="published" when="2018-02-01">2018. 01 Feb 2018</date>
		</imprint>
	</monogr>
	<note type="raw_reference">Raula Gaikovina Kula, Daniel M. German, Ali Ouni, Takashi Ishio, and Katsuro Inoue. 2018. Do developers update their library dependencies? Empirical Software Engineering 23, 1 (01 Feb 2018), 384ś417. https://doi.org/10.1007/s10664-017-9521-5</note>
</biblStruct>

<biblStruct coords="26,97.77,247.64,135.65,8.30" xml:id="b20">
	<monogr>
		<title/>
		<author>
			<persName coords=""><forename type="first">Gabriel</forename><surname>Lawrence</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Chris</forename><surname>Frohof</surname></persName>
		</author>
		<imprint/>
	</monogr>
	<note type="raw_reference">Gabriel Lawrence and Chris Frohof. [n.d.].</note>
</biblStruct>

<biblStruct coords="26,235.73,247.64,296.80,8.30;26,97.77,257.60,160.54,8.30" xml:id="b21">
	<analytic>
		<title level="a" type="main" coord="26,235.73,247.64,213.03,8.30" xml:id="_dExCbjF">How Does Marshalling Work?</title>
		<author>
			<persName><forename type="first">Paul</forename><forename type="middle">A U</forename><surname>Ali</surname></persName>
		</author>
		<idno type="DOI">10.1093/oso/9780198268659.003.0003</idno>
		<ptr target="https://www.slideshare.net/frohof1/appseccali-2015-marshalling-pickles" />
	</analytic>
	<monogr>
		<title level="m" xml:id="_86aJeV3">Marshalling Of Securities</title>
		<imprint>
			<publisher>Oxford University PressOxford</publisher>
			<date type="published" when="1999-06-24" />
			<biblScope unit="page" from="39" to="55" />
		</imprint>
	</monogr>
	<note type="raw_reference">Marshalling Pickles -How Deserializing Objects Can Ruin Your Day. https://www.slideshare. net/frohof1/appseccali-2015-marshalling-pickles</note>
</biblStruct>

<biblStruct coords="26,97.77,267.45,434.76,8.42;26,97.77,277.53,22.24,8.30" xml:id="b22">
	<analytic>
		<title level="a" type="main" coord="26,152.89,267.57,176.95,8.30" xml:id="_53B7Fhm">Effects of reuse on quality, productivity, and economics</title>
		<author>
			<persName coords=""><forename type="first">W</forename><forename type="middle">C</forename><surname>Lim</surname></persName>
		</author>
		<idno type="DOI">10.1109/52.311048</idno>
		<ptr target="https://doi.org/10.1109/52.311048" />
	</analytic>
	<monogr>
		<title level="j" xml:id="_vGMw4fj" coord="26,336.32,267.45,44.02,8.42">IEEE Software</title>
		<title level="j" type="abbrev">IEEE Softw.</title>
		<idno type="ISSN">0740-7459</idno>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="23" to="30" />
			<date type="published" when="1994-09">1994. 1994</date>
			<publisher>Institute of Electrical and Electronics Engineers (IEEE)</publisher>
		</imprint>
	</monogr>
	<note type="raw_reference">W. C. Lim. 1994. Efects of reuse on quality, productivity, and economics. IEEE Software 11, 5 (1994), 23ś30. https://doi.org/10.1109/52. 311048</note>
</biblStruct>

<biblStruct coords="26,97.77,287.49,434.38,8.30;26,97.77,297.45,164.44,8.30" xml:id="b23">
	<monogr>
		<author>
			<persName coords=""><forename type="first">Snyk</forename><surname>Limited</surname></persName>
		</author>
		<ptr target="https://support.snyk.io/hc/en-us/articles/360005933037-Snyk-open-source-packages-disclosure-policy" />
		<title level="m" xml:id="_9C6z97Q" coord="26,167.93,287.49,107.49,8.30">Snyk -Disclosing vulnerabilities</title>
		<imprint>
			<date type="published" when="2020">2020</date>
			<biblScope unit="page" from="2021" to="2024" />
		</imprint>
	</monogr>
	<note type="raw_reference">Snyk Limited. 2020. Snyk -Disclosing vulnerabilities. https://support.snyk.io/hc/en-us/articles/360005933037-Snyk-open-source- packages-disclosure-policy. Accessed: 2021-04-14.</note>
</biblStruct>

<biblStruct coords="26,97.77,307.42,409.82,8.30" xml:id="b24">
	<monogr>
		<author>
			<persName coords=""><forename type="first">Snyk</forename><surname>Limited</surname></persName>
		</author>
		<ptr target="https://snyk.io/product/vulnerability-database/" />
		<title level="m" xml:id="_DsCN3ME" coord="26,164.32,307.42,107.85,8.30">Snyk Intel Vulnerability Database</title>
		<imprint>
			<date type="published" when="2021">2021</date>
			<biblScope unit="page" from="2021" to="2024" />
		</imprint>
	</monogr>
	<note type="raw_reference">Snyk Limited. 2021. Snyk Intel Vulnerability Database. https://snyk.io/product/vulnerability-database/. Accessed: 2021-04-14.</note>
</biblStruct>

<biblStruct coords="26,97.77,317.38,397.13,8.30" xml:id="b25">
	<analytic>
		<title level="a" type="main" xml:id="_Z94VUWb">NuGet Recipes</title>
		<author>
			<persName><forename type="first">Maarten</forename><surname>Balliauw</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Xavier</forename><surname>Decoster</surname></persName>
		</author>
		<idno type="DOI">10.1007/978-1-4302-6002-8_8</idno>
		<ptr target="https://docs.microsoft.com/en-us/nuget/what-is-nuget" />
	</analytic>
	<monogr>
		<title level="m" xml:id="_UWPZEq5" coord="26,152.25,317.38,82.28,8.30">Pro NuGet</title>
		<imprint>
			<publisher>Apress</publisher>
			<date type="published" when="2019">2019</date>
			<biblScope unit="page" from="215" to="258" />
		</imprint>
	</monogr>
	<note type="raw_reference">Microsoft. 2019. An introduction to NuGet. https://docs.microsoft.com/en-us/nuget/what-is-nuget. Accessed: 2020-11-19.</note>
</biblStruct>

<biblStruct coords="26,97.77,327.34,329.24,8.30" xml:id="b26">
	<analytic>
		<title level="a" type="main" xml:id="_CBtJjWZ">An Investigation into the Prevalence of Reflection Techniques in Distributed Microsoft .Net NuGet Artefacts</title>
		<author>
			<persName><forename type="first">Andrew</forename><surname>Beaumont</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Benhur</forename><surname>Bakhtiari Bastaki</surname></persName>
		</author>
		<idno type="DOI">10.1145/3524304.3524329</idno>
		<ptr target="https://www.nuget.org/" />
	</analytic>
	<monogr>
		<title level="m" xml:id="_AmJe2jF" coord="26,152.25,327.34,115.28,8.30">2022 11th International Conference on Software and Computer Applications</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2020-11-20">2020. 2020-11-20</date>
		</imprint>
	</monogr>
	<note type="raw_reference">Microsoft. 2020. Create .NET apps faster with NuGet. https://www.nuget.org/. Accessed: 2020-11-20.</note>
</biblStruct>

<biblStruct coords="26,97.77,337.30,434.76,8.30;26,97.49,347.27,70.36,8.30" xml:id="b27">
	<analytic>
		<title level="a" type="main" xml:id="_f7dDmzv">Construcción de Cubo OLAP en Microsoft Analysis Services y Microsoft Excel</title>
		<author>
			<persName><forename type="first">Zully</forename><forename type="middle">Kristel</forename><surname>Guzmán Caraveo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Herman</forename><surname>Aguilar Mayo</surname></persName>
		</author>
		<idno type="DOI">10.36825/riti.08.15.005</idno>
		<ptr target="https://www.microsoft.com/en-us/msrc/bounty-microsoft-cloud?rtc=1" />
	</analytic>
	<monogr>
		<title level="j" xml:id="_H7JVrW5">Revista de Investigación en Tecnologías de la Información</title>
		<title level="j" type="abbrev">RITI</title>
		<idno type="ISSNe">2387-0893</idno>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">15</biblScope>
			<biblScope unit="page" from="41" to="49" />
			<date type="published" when="2020-08-20">2020. 2020-08-20</date>
			<publisher>Revista de Investigacion en Tecnologias de la Informacion</publisher>
		</imprint>
	</monogr>
	<note type="raw_reference">Microsoft. 2020. Microsoft Online Services Bounty Program. https://www.microsoft.com/en-us/msrc/bounty-microsoft-cloud?rtc=1. Accessed: 2020-08-20.</note>
</biblStruct>

<biblStruct coords="26,97.77,357.23,347.15,8.30" xml:id="b28">
	<monogr>
		<author>
			<persName coords=""><surname>Mvnrepository</surname></persName>
		</author>
		<idno type="DOI">10.3030/945358</idno>
		<ptr target="https://mvnrepository.com/repos/central" />
		<title level="m" xml:id="_TVgw9W8" coord="26,170.90,357.23,59.64,8.30">Central Repository</title>
		<imprint>
			<publisher>Publications Office of the European Union</publisher>
			<date type="published" when="2021-02-01">2021</date>
			<biblScope unit="page" from="2021" to="2025" />
		</imprint>
	</monogr>
	<note type="raw_reference">MvnRepository. 2021. Central Repository. https://mvnrepository.com/repos/central. Accessed: 2021-05-17.</note>
</biblStruct>

<biblStruct coords="26,97.77,367.19,434.88,8.30;26,97.59,377.15,9.17,8.30" xml:id="b29">
	<monogr>
		<title/>
		<author>
			<persName coords=""><surname>Mvnrepository</surname></persName>
		</author>
		<ptr target="mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind" />
		<imprint>
			<date type="published" when="2021">2021</date>
			<biblScope unit="page" from="2021" to="2025" />
		</imprint>
	</monogr>
	<note type="raw_reference">MvnRepository. 2021. Jackson Databind. mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind. Accessed: 2021-05- 17.</note>
</biblStruct>

<biblStruct coords="26,97.77,387.12,433.53,8.30;26,97.77,397.08,113.52,8.30" xml:id="b30">
	<analytic>
		<title level="a" type="main" xml:id="_5UAykKV">Setting Up Maven</title>
		<author>
			<persName><forename type="first">Balaji</forename><surname>Varanasi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sudha</forename><surname>Belida</surname></persName>
		</author>
		<idno type="DOI">10.1007/978-1-4842-0841-0_2</idno>
		<ptr target="https://docs.oracle.com/middleware/1212/core/MAVEN/maven_version.htm#MAVEN402" />
	</analytic>
	<monogr>
		<title level="m" xml:id="_nXW4AfP" coord="26,142.56,387.12,129.80,8.30">Introducing Maven</title>
		<imprint>
			<publisher>Apress</publisher>
			<date type="published" when="2015">2015</date>
			<biblScope unit="page" from="7" to="14" />
		</imprint>
	</monogr>
	<note type="raw_reference">Oracle. 2015. Understanding Maven Version Numbers. https://docs.oracle.com/middleware/1212/core/MAVEN/maven_version.htm# MAVEN402. Accessed: 2021-05-14.</note>
</biblStruct>

<biblStruct coords="26,97.77,417.00,434.47,8.30;26,97.77,426.86,433.54,8.42;26,97.77,436.82,434.47,8.42;26,97.51,446.89,110.86,8.30" xml:id="b31">
	<analytic>
		<title level="a" type="main" coord="26,406.35,417.00,125.88,8.30;26,97.77,426.97,94.13,8.30" xml:id="_n45xhcd">Vulnerable open source dependencies</title>
		<author>
			<persName coords=""><forename type="first">Ivan</forename><surname>Pashchenko</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Henrik</forename><surname>Plate</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Serena</forename><forename type="middle">Elisa</forename><surname>Ponta</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Antonino</forename><surname>Sabetta</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Fabio</forename><surname>Massacci</surname></persName>
		</author>
		<idno type="DOI">10.1145/3239235.3268920</idno>
		<ptr target="https://doi.org/10.1145/3239235.3268920" />
	</analytic>
	<monogr>
		<title level="m" xml:id="_2BQUmg9" coord="26,206.71,426.86,324.59,8.42;26,97.77,436.82,43.28,8.42;26,201.07,436.82,28.12,8.42">Proceedings of the 12th ACM/IEEE International Symposium on Empirical Software Engineering and Measurement</title>
		<meeting>the 12th ACM/IEEE International Symposium on Empirical Software Engineering and Measurement<address><addrLine>Oulu, Finland; New York, NY, USA, Article</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2018-10-11">2018</date>
			<biblScope unit="volume">42</biblScope>
		</imprint>
	</monogr>
	<note>ESEM 18)</note>
	<note type="raw_reference">Ivan Pashchenko, Henrik Plate, Serena Elisa Ponta, Antonino Sabetta, and Fabio Massacci. 2018. Vulnerable Open Source Dependencies: Counting Those That Matter. In Proceedings of the 12th ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (Oulu, Finland) (ESEM 18). Association for Computing Machinery, New York, NY, USA, Article 42, 10 pages. https: //doi.org/10.1145/3239235.3268920</note>
</biblStruct>

<biblStruct coords="26,97.77,456.86,433.53,8.30;26,97.77,466.71,362.80,8.42" xml:id="b32">
	<analytic>
		<title level="a" type="main" coord="26,328.68,456.86,202.62,8.30;26,97.77,466.82,43.51,8.30" xml:id="_YtAkTgw">Vuln4Real: A Methodology for Counting Actually Vulnerable Dependencies</title>
		<author>
			<persName><forename type="first">Ivan</forename><surname>Pashchenko</surname></persName>
			<idno type="ORCID">0000-0001-8202-576X</idno>
		</author>
		<author>
			<persName><forename type="first">Henrik</forename><surname>Plate</surname></persName>
			<idno type="ORCID">0000-0001-8862-3488</idno>
		</author>
		<author>
			<persName><forename type="first">Serena</forename><forename type="middle">Elisa</forename><surname>Ponta</surname></persName>
			<idno type="ORCID">0000-0002-6208-4743</idno>
		</author>
		<author>
			<persName><forename type="first">Antonino</forename><surname>Sabetta</surname></persName>
			<idno type="ORCID">0000-0003-3506-8374</idno>
		</author>
		<author>
			<persName><forename type="first">Fabio</forename><surname>Massacci</surname></persName>
			<idno type="ORCID">0000-0002-1091-8486</idno>
		</author>
		<idno type="DOI">10.1109/tse.2020.3025443</idno>
		<ptr target="https://doi.org/10.1109/TSE.2020.3025443" />
	</analytic>
	<monogr>
		<title level="j" xml:id="_xstQYeA" coord="26,147.77,466.71,135.77,8.42">IEEE Transactions on Software Engineering</title>
		<title level="j" type="abbrev">IIEEE Trans. Software Eng.</title>
		<idno type="ISSN">0098-5589</idno>
		<idno type="ISSNe">2326-3881</idno>
		<imprint>
			<biblScope unit="volume">48</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="1592" to="1609" />
			<date type="published" when="2020">2020. 2020</date>
			<publisher>Institute of Electrical and Electronics Engineers (IEEE)</publisher>
		</imprint>
	</monogr>
	<note type="raw_reference">I. Pashchenko, H. Plate, S. E. Ponta, A. Sabetta, and F. Massacci. 2020. Vuln4Real: A Methodology for Counting Actually Vulnerable Dependencies. IEEE Transactions on Software Engineering (2020), 1ś1. https://doi.org/10.1109/TSE.2020.3025443</note>
</biblStruct>

<biblStruct coords="26,97.77,476.78,434.76,8.30;26,97.77,486.63,433.53,8.42;26,97.77,496.71,336.53,8.30" xml:id="b33">
	<analytic>
		<title level="a" type="main" coord="26,279.36,476.78,249.99,8.30" xml:id="_VD4fK72">A Qualitative Study of Dependency Management and Its Security Implications</title>
		<author>
			<persName coords=""><forename type="first">Ivan</forename><surname>Pashchenko</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Duc-Ly</forename><surname>Vu</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Fabio</forename><surname>Massacci</surname></persName>
		</author>
		<idno type="DOI">10.1145/3372297.3417232</idno>
		<ptr target="https://doi.org/10.1145/3372297.3417232" />
	</analytic>
	<monogr>
		<title level="m" xml:id="_EMDAUVM" coord="26,106.11,486.63,383.57,8.42">Proceedings of the 2020 ACM SIGSAC Conference on Computer and Communications Security</title>
		<meeting>the 2020 ACM SIGSAC Conference on Computer and Communications Security<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2020-10-30">2020</date>
			<biblScope unit="page" from="1513" to="1531" />
		</imprint>
	</monogr>
	<note type="raw_reference">Ivan Pashchenko, Duc-Ly Vu, and Fabio Massacci. 2020. A Qualitative Study of Dependency Management and Its Security Implications. In Proceedings of the 2020 ACM SIGSAC Conference on Computer and Communications Security (Virtual Event, USA) (CCS &apos;20). Association for Computing Machinery, New York, NY, USA, 1513âĂŞ1531. https://doi.org/10.1145/3372297.3417232</note>
</biblStruct>

<biblStruct coords="26,97.77,506.56,431.51,8.42" xml:id="b34">
	<analytic>
		<title level="a" type="main" coord="26,167.91,506.56,338.18,8.42" xml:id="_vQaNrva">Know your open source code</title>
		<author>
			<persName coords=""><forename type="first">Mike</forename><surname>Pittenger</surname></persName>
		</author>
		<idno type="DOI">10.1016/s1353-4858(16)30048-4</idno>
	</analytic>
	<monogr>
		<title level="j" xml:id="_5Es6E9X">Network Security</title>
		<title level="j" type="abbrev">Network Security</title>
		<idno type="ISSN">1353-4858</idno>
		<imprint>
			<biblScope unit="volume">2016</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="11" to="15" />
			<date type="published" when="2016-05">2016. 2016</date>
			<publisher>Mark Allen Group</publisher>
		</imprint>
	</monogr>
	<note type="raw_reference">Mike Pittenger. 2016. The State of Open Source Security in Commercial Applications. Black Duck Open Source Security Analysis (2016).</note>
</biblStruct>

<biblStruct coords="26,97.77,516.63,433.53,8.30;26,97.77,526.48,434.48,8.42;26,97.51,536.56,116.59,8.30" xml:id="b35">
	<analytic>
		<title level="a" type="main" coord="26,245.67,516.63,285.63,8.30;26,97.77,526.59,82.66,8.30" xml:id="_94Z2bjM">Beyond Metadata: Code-Centric and Usage-Based Analysis of Known Vulnerabilities in Open-Source Software</title>
		<author>
			<persName><forename type="first">Serena</forename><forename type="middle">Elisa</forename><surname>Ponta</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Henrik</forename><surname>Plate</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Antonino</forename><surname>Sabetta</surname></persName>
		</author>
		<idno type="DOI">10.1109/icsme.2018.00054</idno>
		<ptr target="https://doi.org/10.1109/ICSME.2018.00054" />
	</analytic>
	<monogr>
		<title level="m" xml:id="_4SmKk7y" coord="26,195.82,526.48,306.53,8.42">2018 IEEE International Conference on Software Maintenance and Evolution (ICSME)</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2018-09">2018</date>
		</imprint>
	</monogr>
	<note type="raw_reference">S. E. Ponta, H. Plate, and A. Sabetta. 2018. Beyond Metadata: Code-Centric and Usage-Based Analysis of Known Vulnerabilities in Open-Source Software. In 2018 IEEE International Conference on Software Maintenance and Evolution (ICSME). 449ś460. https: //doi.org/10.1109/ICSME.2018.00054</note>
</biblStruct>

<biblStruct coords="26,97.77,546.52,433.54,8.30;26,97.77,556.37,396.07,8.42" xml:id="b36">
	<analytic>
		<title level="a" type="main" coord="26,301.71,546.52,229.60,8.30;26,97.77,556.48,42.07,8.30" xml:id="_tc8sjus">Detection, assessment and mitigation of vulnerabilities in open source dependencies</title>
		<author>
			<persName coords=""><forename type="first">Serena</forename><forename type="middle">Elisa</forename><surname>Ponta</surname></persName>
			<idno type="ORCID">0000-0002-6208-4743</idno>
		</author>
		<author>
			<persName coords=""><forename type="first">Henrik</forename><surname>Plate</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Antonino</forename><surname>Sabetta</surname></persName>
		</author>
		<idno type="DOI">10.1007/s10664-020-09830-x</idno>
		<ptr target="https://doi.org/10.1007/s10664-020-09830-x" />
	</analytic>
	<monogr>
		<title level="j" xml:id="_S6R2NYc" coord="26,146.22,556.37,99.99,8.42">Empirical Software Engineering</title>
		<title level="j" type="abbrev">Empir Software Eng</title>
		<idno type="ISSN">1382-3256</idno>
		<idno type="ISSNe">1573-7616</idno>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="3175" to="3215" />
			<date type="published" when="2020-09-01">2020. 01 Sep 2020</date>
			<publisher>Springer Science and Business Media LLC</publisher>
		</imprint>
	</monogr>
	<note type="raw_reference">Serena Elisa Ponta, Henrik Plate, and Antonino Sabetta. 2020. Detection, assessment and mitigation of vulnerabilities in open source dependencies. Empirical Software Engineering 25, 5 (01 Sep 2020), 3175ś3215. https://doi.org/10.1007/s10664-020-09830-x</note>
</biblStruct>

<biblStruct coords="26,97.77,566.44,434.38,8.30;26,97.77,576.41,157.04,8.30" xml:id="b37">
	<analytic>
		<title level="a" type="main" coord="26,97.77,566.44,124.14,8.30;26,245.91,566.44,84.06,8.30" xml:id="_BvvvnKH">Maven Dependency Management</title>
		<author>
			<persName><forename type="first">Balaji</forename><surname>Varanasi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sudha</forename><surname>Belida</surname></persName>
		</author>
		<idno type="DOI">10.1007/978-1-4842-0841-0_3</idno>
		<ptr target="https://jeremylong.github.io/DependencyCheck/dependency-check-maven/index.html" />
	</analytic>
	<monogr>
		<title level="m" xml:id="_mmgtmTF">Introducing Maven</title>
		<imprint>
			<publisher>Apress</publisher>
			<date type="published" when="2020">2020</date>
			<biblScope unit="page" from="15" to="22" />
		</imprint>
	</monogr>
	<note>Dependency-Check Maven</note>
	<note type="raw_reference">Open Web Application Security Project. 2020. Dependency-Check Maven. https://jeremylong.github.io/DependencyCheck/dependency- check-maven/index.html. Accessed: 2020-06-05.</note>
</biblStruct>

<biblStruct coords="26,97.77,586.26,433.53,8.42;26,97.77,596.22,346.39,8.42" xml:id="b38">
	<analytic>
		<title level="a" type="main" coord="26,158.66,586.37,259.20,8.30" xml:id="_apW9gEH">An Empirical Analysis of Vulnerabilities in Python Packages for Web Applications</title>
		<author>
			<persName coords=""><forename type="first">Jukka</forename><surname>Ruohonen</surname></persName>
		</author>
		<idno type="DOI">10.1109/iwesep.2018.00013</idno>
		<ptr target="https://doi.org/10.1109/IWESEP.2018.00013" />
	</analytic>
	<monogr>
		<title level="m" xml:id="_3zAXxyT" coord="26,431.16,586.26,100.14,8.42;26,97.77,596.22,198.50,8.42">2018 9th International Workshop on Empirical Software Engineering in Practice (IWESEP)</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2018-12">2018</date>
		</imprint>
	</monogr>
	<note type="raw_reference">J. Ruohonen. 2018. An Empirical Analysis of Vulnerabilities in Python Packages for Web Applications. In 2018 9th International Workshop on Empirical Software Engineering in Practice (IWESEP). 25ś30. https://doi.org/10.1109/IWESEP.2018.00013</note>
</biblStruct>

<biblStruct coords="26,97.77,606.18,433.54,8.42;26,97.77,616.15,351.49,8.42" xml:id="b39">
	<analytic>
		<title level="a" type="main" coord="26,254.51,606.29,231.62,8.30" xml:id="_RH2Ychj">A large scale exploratory analysis of software vulnerability life cycles</title>
		<author>
			<persName><forename type="first">Muhammad</forename><surname>Shahzad</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Muhammad</forename><forename type="middle">Zubair</forename><surname>Shafiq</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Alex</forename><forename type="middle">X</forename><surname>Liu</surname></persName>
		</author>
		<idno type="DOI">10.1109/icse.2012.6227141</idno>
		<ptr target="https://doi.org/10.1109/ICSE.2012.6227141" />
	</analytic>
	<monogr>
		<title level="m" xml:id="_XR66ngD" coord="26,500.64,606.18,30.66,8.42;26,97.77,616.15,177.42,8.42">2012 34th International Conference on Software Engineering (ICSE)</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2012-06">2012</date>
			<biblScope unit="page" from="771" to="781" />
		</imprint>
	</monogr>
	<note type="raw_reference">M. Shahzad, M. Z. Shaiq, and A. X. Liu. 2012. A large scale exploratory analysis of software vulnerability life cycles. In 2012 34th International Conference on Software Engineering (ICSE). 771ś781. https://doi.org/10.1109/ICSE.2012.6227141</note>
</biblStruct>

<biblStruct coords="26,97.77,626.25,433.53,8.27;26,97.77,636.07,376.81,8.42" xml:id="b40">
	<analytic>
		<title level="a" type="main" coord="26,367.01,626.25,164.29,8.27;26,97.77,636.21,68.41,8.27" xml:id="_rKsARuY">A comprehensive study of bloated dependencies in the Maven ecosystem</title>
		<author>
			<persName><forename type="first">César</forename><surname>Soto-Valero</surname></persName>
			<idno type="ORCID">0000-0003-0541-6411</idno>
		</author>
		<author>
			<persName coords=""><forename type="first">Nicolas</forename><surname>Harrand</surname></persName>
			<idno type="ORCID">0000-0002-2491-2771</idno>
		</author>
		<author>
			<persName coords=""><forename type="first">Martin</forename><surname>Monperrus</surname></persName>
			<idno type="ORCID">0000-0003-3505-3383</idno>
		</author>
		<author>
			<persName coords=""><forename type="first">Benoit</forename><surname>Baudry</surname></persName>
			<idno type="ORCID">0000-0002-4015-4640</idno>
		</author>
		<idno type="DOI">10.1007/s10664-020-09914-8</idno>
		<ptr target="https://doi.org/10.1007/s10664-020-09914-8" />
	</analytic>
	<monogr>
		<title level="j" xml:id="_pfKR9yh" coord="26,172.60,636.07,99.99,8.42">Empirical Software Engineering</title>
		<title level="j" type="abbrev">Empir Software Eng</title>
		<idno type="ISSN">1382-3256</idno>
		<idno type="ISSNe">1573-7616</idno>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="issue">3</biblScope>
			<date type="published" when="2021-03-25">2021. Mar 2021</date>
			<publisher>Springer Science and Business Media LLC</publisher>
		</imprint>
	</monogr>
	<note type="raw_reference">CÃľsar Soto-Valero, Nicolas Harrand, Martin Monperrus, and Benoit Baudry. 2021. A comprehensive study of bloated dependencies in the Maven ecosystem. Empirical Software Engineering 26, 3 (Mar 2021). https://doi.org/10.1007/s10664-020-09914-8</note>
</biblStruct>

<biblStruct coords="27,97.77,108.19,434.38,8.27;27,97.77,118.16,233.37,8.27" xml:id="b41">
	<analytic>
		<title level="a" type="main" xml:id="_mks3ByU">Synopsys: DevSecOps practices and open-source management in 2020</title>
		<idno type="DOI">10.1016/s1353-4858(20)30137-9</idno>
		<ptr target="https://www.synopsys.com/software-integrity/resources/analyst-reports/open-source-security-risk-analysis.html" />
	</analytic>
	<monogr>
		<title level="j" xml:id="_er4xTNs">Network Security</title>
		<title level="j" type="abbrev">Network Security</title>
		<idno type="ISSN">1353-4858</idno>
		<idno type="ISSNe">1872-9371</idno>
		<imprint>
			<biblScope unit="volume">2020</biblScope>
			<biblScope unit="issue">12</biblScope>
			<biblScope unit="page" from="4" to="4" />
			<date type="published" when="2021">2021</date>
			<publisher>Mark Allen Group</publisher>
		</imprint>
	</monogr>
	<note type="raw_reference">Synopsys, Inc. 2021. Open Source Security and Risk Analysis Report. https://www.synopsys.com/software-integrity/resources/analyst- reports/open-source-security-risk-analysis.html. Accessed: 2021-05-17.</note>
</biblStruct>

<biblStruct coords="27,97.77,128.12,430.02,8.27" xml:id="b42">
	<analytic>
		<title level="a" type="main" xml:id="_r2UtwSn">On the impact of security vulnerabilities in the npm package dependency network</title>
		<author>
			<persName><forename type="first">Alexandre</forename><surname>Decan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Tom</forename><surname>Mens</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Eleni</forename><surname>Constantinou</surname></persName>
		</author>
		<idno type="DOI">10.1145/3196398.3196401</idno>
		<ptr target="https://www.github.com/npm/security-holder#readme" />
	</analytic>
	<monogr>
		<title level="m" xml:id="_bEbVRXw" coord="27,186.15,128.12,82.07,8.27">Proceedings of the 15th International Conference on Mining Software Repositories</title>
		<meeting>the 15th International Conference on Mining Software Repositories</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2016">2016</date>
			<biblScope unit="page" from="2020" to="2029" />
		</imprint>
	</monogr>
	<note type="raw_reference">NPM Security Team. 2016. Security Holding Package. https://www.github.com/npm/security-holder#readme. Accessed: 2020-09-07.</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
